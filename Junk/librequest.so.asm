
fd_set struc ; (sizeof=0x80, copyof_42) ; XREF: getRequest/r getRequest/r
__fds_bits dq 16 dup(?) ; XREF: getRequest+11F/r getRequest+15E/w ...
fd_set ends


timeval struc ; (sizeof=0x10, copyof_43) ; XREF: getRequest/r
tv_sec dq ?             ; XREF: getRequest:loc_23458/w
tv_usec dq ?            ; XREF: getRequest+2ED/w
timeval ends


sockaddr_in struc ; (sizeof=0x10, copyof_10) ; XREF: s_client/r getRequest/r ...
sin_family dw ?         ; XREF: createSocket+58/w getRequest+452/r
sin_port dw ?           ; XREF: createSocket+72/w
sin_addr in_addr ?      ; XREF: createSocket+5E/w
sin_zero db 8 dup(?)    ; XREF: getRequest+459/r
sockaddr_in ends


s_ctx struc ; (sizeof=0x20, copyof_37) ; XREF: ctx/r
current dq ?            ; XREF: findLen+6F/w findLen+E5/w ... ; offset
callback dq ?           ; XREF: findLen+7A/w findLen+F0/w ... ; offset
level dd ?
db ? ; undefined
db ? ; undefined
db ? ; undefined
db ? ; undefined
opaque dq ?             ; XREF: findLen+67/w findLen+103/w ... ; offset
s_ctx ends


s_field struc ; (sizeof=0x18, copyof_36) ; XREF: field/r
search dq ?             ; XREF: findLen+3C/w findLen+FB/w ; offset
buf dq ?                ; XREF: findLen+8F/r findLen+9D/r ... ; offset
len dd ?                ; XREF: findLen+98/r
nb dd ?                 ; XREF: findLen+118/r
s_field ends


; enum _states, copyof_12, width 4 bytes
_states::LIBRE  = 0
_states::SHUTDOWN_AFTER_WRITE  = 1
_states::WRITABLE  = 2
_states::READABLE  = 3
_states::PARSEHEADER  = 4
_states::GETBODY  = 5
_states::GETCHUNK  = 6
_states::SHUTDOWN  = 7


; enum __socket_type, copyof_41, width 4 bytes
__socket_type::SOCK_STREAM  = 1
__socket_type::SOCK_DGRAM  = 2
__socket_type::SOCK_RAW  = 3
__socket_type::SOCK_RDM  = 4
__socket_type::SOCK_SEQPACKET  = 5
__socket_type::SOCK_DCCP  = 6
__socket_type::SOCK_PACKET  = 0Ah
__socket_type::SOCK_NONBLOCK  = 800h
__socket_type::SOCK_CLOEXEC  = 80000h

;
; +-------------------------------------------------------------------------+
; |      This file was generated by The Interactive Disassembler (IDA)      |
; |           Copyright (c) 2024 Hex-Rays, <support@hex-rays.com>           |
; |                            Freeware version                             |
; +-------------------------------------------------------------------------+
;
; Input SHA256 : 600472FC0EE823131BD848593B01B04908CF4771F930048E1246C4C58501808D
; Input MD5    : 00DE67163CE3DD8F8AA5A2AC4F01B57A
; Input CRC32  : AEC39FC0
; Compiler     : GNU C++

; File Name   : /Users/pim/Documents/ESISAR/NE302/ProjetHTTP/Junk/librequest.so
; Format      : ELF64 for x86-64 (Shared object)
; Shared Name 'librequest.so'
;
; Source File : 'librequest.c'
; Source File : 'socket.c'

.686p
.mmx
.model flat
.intel_syntax noprefix


; Segment type: Pure data
; Segment permissions: Read
LOAD segment mempage public 'DATA' use64
assume cs:LOAD
dword_0 dd 464C457Fh    ; File format: \x7FELF
db 2                    ; File class: 64-bit
db 1                    ; Data encoding: little-endian
db 1                    ; File version
db 0                    ; OS/ABI: UNIX System V ABI
db 0                    ; ABI Version
db 7 dup(0)             ; Padding
dw 3                    ; File type: Shared object
dw 3Eh                  ; Machine: x86-64
dd 1                    ; File version
dq offset __alpha       ; Entry point
dq 40h                  ; PHT file offset
dq 47B60h               ; SHT file offset
dd 0                    ; Processor-specific flags
dw 40h                  ; ELF header size
dw 38h                  ; PHT entry size
dw 7                    ; Number of entries in PHT
dw 40h                  ; SHT entry size
dw 17h                  ; Number of entries in SHT
dw 16h                  ; SHT entry index for string table
; ELF64 Program Header
; PHT Entry 0
dd 1                    ; Type: LOAD
dd 4                    ; Flags
dq 0                    ; File offset
dq 0                    ; Virtual address
dq 0                    ; Physical address
dq 4398h                ; Size in file image
dq 4398h                ; Size in memory image
dq 1000h                ; Alignment
; PHT Entry 1
dd 1                    ; Type: LOAD
dd 5                    ; Flags
dq 5000h                ; File offset
dq offset sub_5000      ; Virtual address
dq 5000h                ; Physical address
dq 1E966h               ; Size in file image
dq 1E966h               ; Size in memory image
dq 1000h                ; Alignment
; PHT Entry 2
dd 1                    ; Type: LOAD
dd 4                    ; Flags
dq 24000h               ; File offset
dq offset aOption       ; Virtual address
dq 24000h               ; Physical address
dq 3C64h                ; Size in file image
dq 3C64h                ; Size in memory image
dq 1000h                ; Alignment
; PHT Entry 3
dd 1                    ; Type: LOAD
dd 6                    ; Flags
dq 27EF0h               ; File offset
dq offset _DYNAMIC      ; Virtual address
dq 28EF0h               ; Physical address
dq 1F0h                 ; Size in file image
dq 478h                 ; Size in memory image
dq 1000h                ; Alignment
; PHT Entry 4
dd 2                    ; Type: DYNAMIC
dd 6                    ; Flags
dq 27EF0h               ; File offset
dq offset _DYNAMIC      ; Virtual address
dq 28EF0h               ; Physical address
dq 110h                 ; Size in file image
dq 110h                 ; Size in memory image
dq 8                    ; Alignment
; PHT Entry 5
dd 6474E551h            ; Type: STACK
dd 6                    ; Flags
dq 0                    ; File offset
dq 0                    ; Virtual address
dq 0                    ; Physical address
dq 0                    ; Size in file image
dq 0                    ; Size in memory image
dq 10h                  ; Alignment
; PHT Entry 6
dd 6474E552h            ; Type: RO-AFTER
dd 4                    ; Flags
dq 27EF0h               ; File offset
dq offset _DYNAMIC      ; Virtual address
dq 28EF0h               ; Physical address
dq 110h                 ; Size in file image
dq 110h                 ; Size in memory image
dq 1                    ; Alignment
; ELF Hash Table
elf_hash_nbucket dd 107h
elf_hash_nchain dd 146h
elf_hash_bucket dd 0, 17h, 7, 0Eh, 0, 56h, 0, 13Ch, 27h
dd 7Dh, 62h, 0, 0Bh, 31h, 0F7h, 19h, 3 dup(0)
dd 0D1h, 2Ch, 0, 125h, 0, 117h, 0A5h, 37h
dd 0, 0F5h, 92h, 120h, 94h, 0ADh, 6Ch, 46h
dd 4Fh, 8Ah, 85h, 2 dup(0), 13h, 99h, 0
dd 5Bh, 0, 13Eh, 72h, 0C1h, 90h, 1Eh, 96h
dd 20h, 79h, 143h, 0C6h, 0EDh, 0D8h, 0A0h
dd 0C4h, 0ECh, 40h, 75h, 0, 11Eh, 3 dup(0)
dd 0D7h, 4Bh, 0D9h, 0, 8, 8Ch, 0, 34h, 0
dd 123h, 3, 5Eh, 11h, 24h, 6Eh, 0C5h, 65h
dd 0, 105h, 0F1h, 0, 0E2h, 82h, 0, 0D3h
dd 2 dup(0), 55h, 142h, 9Eh, 57h, 10Ch, 4 dup(0)
dd 127h, 11Bh, 0, 77h, 81h, 9Dh, 0C2h, 83h
dd 0, 0BDh, 0, 100h, 13Fh, 128h, 5Ch, 53h
dd 115h, 0, 47h, 0B2h, 97h, 13Dh, 0, 0FDh
dd 0B4h, 0C0h, 136h, 101h, 114h, 0, 39h
dd 1Dh, 102h, 0E3h, 0C3h, 108h, 0DAh, 0
dd 7Ah, 0, 9, 33h, 0AAh, 0, 7Fh, 8Fh, 16h
dd 0CCh, 0CDh, 124h, 1Ch, 116h, 76h, 0B0h
dd 3Ah, 0CBh, 2 dup(0), 38h, 44h, 0F0h, 14h
dd 2 dup(0), 0F6h, 0Ch, 9Bh, 0, 0E7h, 28h
dd 12h, 9Ch, 126h, 95h, 0A3h, 0, 6Bh, 0E0h
dd 104h, 0AEh, 0, 0A8h, 5Fh, 0, 0F3h, 2Fh
dd 0D5h, 4Dh, 26h, 7Bh, 0C9h, 0, 29h, 2 dup(0)
dd 0B7h, 15h, 0AFh, 118h, 2 dup(0), 52h
dd 0FBh, 13Bh, 0, 132h, 2 dup(0), 0E5h, 8Dh
dd 0, 0F4h, 0D0h, 10h, 12Ah, 7Ch, 0, 0DBh
dd 0D2h, 0, 0D4h, 0Fh, 0, 135h, 84h, 0A2h
dd 45h, 0, 18h, 5Ah, 3Fh, 0, 9Fh, 0A6h, 0CFh
dd 2 dup(0), 106h, 0, 5Dh, 0A4h, 1Fh, 0
dd 113h, 129h, 2Eh, 0E1h, 71h, 3 dup(0)
dd 68h, 10Bh, 2Ah, 11Fh, 3Dh, 0A1h, 2 dup(0)
dd 67h
elf_hash_chain dd 3 dup(0), 98h, 5 dup(0), 22h, 0, 0FEh
dd 2 dup(0), 7Eh, 6Dh, 0ACh, 3Ch, 78h, 0
dd 32h, 0, 23h, 70h, 69h, 109h, 0A7h, 2 dup(0)
dd 10Ah, 2 dup(0), 0B8h, 2 dup(0), 0CAh
dd 0Ah, 0B5h, 0, 12Ch, 0BCh, 0, 10Dh, 0
dd 137h, 80h, 0BFh, 3 dup(0), 0Dh, 6Fh, 0FFh
dd 3 dup(0), 66h, 4 dup(0), 131h, 6 dup(0)
dd 93h, 58h, 0, 4Eh, 2, 3 dup(0), 0BBh, 130h
dd 2 dup(0), 1, 2 dup(0), 10Fh, 0, 138h
dd 5 dup(0), 9Ah, 0, 25h, 0C7h, 2 dup(0)
dd 5, 140h, 2 dup(0), 43h, 0, 54h, 0E9h
dd 8 dup(0), 60h, 0, 107h, 13Ah, 10Eh, 74h
dd 0, 111h, 0, 12Eh, 122h, 0, 0E6h, 5 dup(0)
dd 0FCh, 2 dup(0), 6Ah, 5 dup(0), 121h, 2 dup(0)
dd 0E4h, 41h, 0, 86h, 0, 73h, 0, 2Dh, 30h
dd 2 dup(0), 36h, 0C8h, 0, 0FAh, 0, 12Bh
dd 2 dup(0), 0DEh, 2 dup(0), 133h, 0DCh
dd 2 dup(0), 0B6h, 5 dup(0), 64h, 4 dup(0)
dd 141h, 2 dup(0), 4Ch, 7 dup(0), 139h, 2 dup(0)
dd 11Ah, 0, 12Fh, 0, 0BAh, 87h, 7 dup(0)
dd 144h, 0, 61h, 91h, 0, 0DFh, 2 dup(0)
dd 89h, 112h, 4, 6 dup(0), 0D6h, 8 dup(0)
dd 48h, 0DDh, 2 dup(0), 88h, 3 dup(0), 2Bh
dd 0, 35h, 0BEh, 2 dup(0), 4Ah, 0, 59h, 2 dup(0)
dd 134h, 2 dup(0), 3Bh, 3 dup(0), 119h, 1Ah
dd 0B9h, 50h, 0, 145h, 0EAh, 0, 0F2h, 0
dd 42h, 0ABh, 4 dup(0), 11Dh, 0EBh, 8Eh
dd 4 dup(0), 6, 8Bh, 0, 0CEh, 2 dup(0), 0F9h
dd 2 dup(0), 49h, 0F8h, 0, 103h, 0, 51h
dd 2 dup(0), 110h, 4 dup(0), 11Ch, 0, 0A9h
dd 4 dup(0), 1Bh, 3Eh, 3 dup(0), 63h, 21h
dd 0E8h, 0EFh, 12Dh, 0B1h, 0, 0EEh, 0, 0B3h
align 8
; ELF GNU Hash Table
elf_gnu_hash_nbuckets dd 107h
elf_gnu_hash_symbias dd 1Ah
elf_gnu_hash_bitmask_nwords dd 20h
elf_gnu_hash_shift dd 0Bh
elf_gnu_hash_indexes dq 258996AC48882004h, 420A48292200D2h, 23000801130D88h
dq 0C9F220837232A5h, 60C703420800001h, 7A28C2210111B7EEh
dq 404110C14110C000h, 1128418002061E28h
dq 9184004460D21901h, 34B055008525F348h
dq 901168002000A155h, 0D0056B2012B64h, 3222A00004040022h
dq 0A288884011A20A7Fh, 8C81D48858C4264Ah
dq 306004900434C228h, 3911061432A06210h
dq 40040100E000000h, 7110108001891041h, 40008404482481C0h
dq 400A640918522E0h, 45180438300EFh, 408005002A00300h
dq 20F6028124090110h, 1841122492090800h
dq 0D08865080040784Fh, 8104142E000000A1h
dq 3902806601006007h, 40E407004100204h, 82200000282010h
dq 8500010009C83222h, 1B2094A40A00E0Ah
elf_gnu_hash_bucket dd 1Ah, 0, 1Ch, 1Dh, 1Eh, 1Fh, 2 dup(0)
dd 20h, 21h, 23h, 0, 25h, 27h, 0, 29h, 0
dd 2Ah, 2Bh, 2Ch, 2Fh, 32h, 2 dup(0), 34h
dd 36h, 39h, 3Ah, 3Bh, 3Eh, 41h, 0, 42h
dd 43h, 3 dup(0), 45h, 48h, 0, 49h, 4Ah
dd 4Ch, 4Eh, 4Fh, 52h, 0, 53h, 55h, 0, 56h
dd 57h, 58h, 0, 5Ah, 5Eh, 0, 5Fh, 2 dup(0)
dd 60h, 62h, 63h, 66h, 0, 68h, 2 dup(0)
dd 69h, 6Ah, 0, 6Dh, 6Eh, 6Fh, 72h, 74h
dd 76h, 0, 78h, 79h, 0, 7Ah, 0, 7Bh, 0, 7Dh
dd 7Eh, 80h, 81h, 0, 83h, 85h, 86h, 87h
dd 89h, 8Ah, 0, 8Bh, 8Dh, 8Eh, 8Fh, 91h
dd 95h, 0, 97h, 98h, 0, 9Bh, 9Ch, 9Eh, 2 dup(0)
dd 0A2h, 0, 0A3h, 2 dup(0), 0A5h, 0A6h, 0A7h
dd 0, 0A9h, 0, 0AAh, 0AEh, 0B0h, 0, 0B3h
dd 0B5h, 0B7h, 0B8h, 0, 0B9h, 0BAh, 0BBh
dd 2 dup(0), 0BDh, 0BEh, 0BFh, 0C0h, 2 dup(0)
dd 0C1h, 0C2h, 0C3h, 0C5h, 0C6h, 0CAh, 0CCh
dd 0CDh, 0CEh, 0D0h, 2 dup(0), 0D2h, 0D3h
dd 0, 0D4h, 0D5h, 0D7h, 0D8h, 0, 0D9h, 0DBh
dd 2 dup(0), 0DCh, 0DDh, 0DFh, 0E1h, 0E2h
dd 0E4h, 0E7h, 0E8h, 0EAh, 0EBh, 0ECh, 0EDh
dd 0EEh, 0F0h, 0F1h, 0, 0F3h, 0F5h, 2 dup(0)
dd 0F7h, 0F8h, 0, 0F9h, 0FAh, 2 dup(0), 0FCh
dd 0, 0FDh, 0FEh, 0, 0FFh, 4 dup(0), 101h
dd 3 dup(0), 103h, 0, 106h, 107h, 108h, 109h
dd 10Ah, 2 dup(0), 10Bh, 0, 10Dh, 10Eh, 10Fh
dd 0, 110h, 114h, 115h, 116h, 117h, 0, 118h
dd 11Ah, 11Bh, 11Eh, 0, 11Fh, 0, 122h, 2 dup(0)
dd 124h, 125h, 0, 127h, 129h, 12Ah, 12Ch
dd 12Dh, 12Eh, 12Fh, 132h, 2 dup(0), 133h
dd 134h, 135h, 139h, 0, 13Ah, 13Dh, 140h
dd 142h, 0, 144h
elf_gnu_hash_chain dd 7C9B48C6h, 3FB7981Fh, 0AA8094D5h, 0FB034DE1h
dd 3E5E6823h, 794EA8C9h, 7C97FE63h, 0EFD93DF4h
dd 3EF722CDh, 9323211Ch, 0D2BEC1ADh, 24721030h
dd 7C9C614Bh, 7A7C3890h, 0E3434785h, 0CD6288CDh
dd 7C92C9F5h, 6744A20Bh, 51AF3588h, 0D363AA58h
dd 0D8EABC31h, 0E02A5088h, 1F8B54DEh, 8C7E61CBh
dd 0C9D80208h, 5F695FF9h, 80E79702h, 81D66F6Dh
dd 0B7E73838h, 0F3FD38Ch, 0F78633A3h, 0B880E7Fh
dd 2BA4D863h, 125CE37Eh, 0EC684140h, 0B3D882CBh
dd 0F7EF8858h, 4BDF747Ah, 0EB27E25Bh, 9F9F98EDh
dd 0DCBB0F7h, 2022DC64h, 0A6B5D595h, 1B6289C2h
dd 0D0DF627Ch, 0C337BE47h, 0ADC8C4BFh, 5FF5ECB5h
dd 0DEDB1B9Eh, 7E734C15h, 0E770C0B0h, 0F514A871h
dd 2F34DB9Fh, 0C45BBFF0h, 55ECC340h, 583E66Bh
dd 27947CC9h, 696FD100h, 34023509h, 0C625AB13h
dd 106A2B77h, 26C0E40Dh, 51147434h, 0C42EF8DFh
dd 5651243Ch, 35CDE642h, 2909A252h, 0B87D513h
dd 55E7398Fh, 69554945h, 48E78EE4h, 5F54236Bh
dd 0C239602Fh, 22338EE0h, 0A5A6E72h, 7BFA326Bh
dd 62A2DBB6h, 21FA666Dh, 0DF7116A1h, 0EC6B7643h
dd 59D1E164h, 6806428Ch, 0B18D99EFh, 0B87D731h
dd 7C97FEA3h, 57894822h, 0B882754h, 0C4F09F6Dh
dd 7C9C25F2h, 7CA123F7h, 1B7C2040h, 38B19D89h
dd 74DA826Eh, 6926F195h, 0EBDC8557h, 82D49F99h
dd 9B470143h, 3FE739FCh, 7B14DCE3h, 6BD4B21Dh
dd 618CAA48h, 392D12C9h, 50E64BD5h, 582CE1Eh
dd 1B6760F1h, 5CFA00C4h, 1D416C1h, 0F3981BFh
dd 0A48BABEBh, 773AB386h, 1170BFC3h, 0DB36CC5Bh
dd 16C8DFBFh, 7A472122h, 1021C973h, 0C82F7179h
dd 0A76FE287h, 6F7747E2h, 0EBE5AFE1h, 3FB8516Eh
dd 851DE276h, 0CBBC4C22h, 0D8E57BB7h, 0CAC195DCh
dd 7C8DE3E7h, 0B882EA5h, 4F7610E4h, 18044AF2h
dd 19290FC9h, 0A88F92C7h, 0E23CAD98h, 0E0748269h
dd 52FF2E12h, 44248A10h, 3F008B48h, 0A80C5FD5h
dd 24D3EA4Dh, 7C8457E6h, 2675E237h, 5CBB2597h
dd 68725B47h, 8DCE68C0h, 0B886943h, 637F9F27h
dd 733E48D6h, 1054EAF0h, 7C867242h, 6E8BFAB5h
dd 0E01EBD2h, 618582ADh, 93A891C4h, 6F67BC2h
dd 0EEBDEE3h, 0F1880492h, 84BA18A3h, 0A06EB78Ch
dd 2CDA797Dh, 0AF6FE41Dh, 2D513BAFh, 122834EFh
dd 285CE397h, 80100FE2h, 659B923Fh, 0B881B41h
dd 0B0BB83BBh, 0DDB84F97h, 23638025h, 0B9185393h
dd 0EA1BCB1Bh, 6936BB6Ah, 0FDB99817h, 80077B79h
dd 0C60CB668h, 1B5A827Ah, 0EEBE7194h, 11AE517Bh
dd 0F47BDF4h, 3E63E305h, 0F47BDF5h, 0F47BDF7h
dd 0F5F7292Ch, 2AC0851Fh, 5053A7EAh, 0D01149h
dd 7EB61281h, 5A6B41C9h, 773C06CDh, 10F72EB2h
dd 592B01B7h, 7AC59917h, 0B5987A9Dh, 8D029830h
dd 175BB05Bh, 2B4DC497h, 90E6C8EFh, 3EFB885Ch
dd 79832715h, 0EEC1372h, 0BED2D709h, 0DEAEAB51h
dd 10F5648Ch, 0B58A3EABh, 0FF2306Ah, 0B2FD863Ch
dd 5E7E32Fh, 0EB6EA0EFh, 6BEB4544h, 4F77161Dh
dd 0C3AAF7E9h, 0EEC397Dh, 69A62BDBh, 77D084A7h
dd 35ECE2DEh, 255336EFh, 0EC70F20Dh, 870963BAh
dd 511058B5h, 0D866146h, 856BF1A7h, 0AB8BFB82h
dd 473E6FB9h, 0E35ED5F1h, 7C9EBD07h, 0B87EB2Dh
dd 5322228Eh, 98A432C3h, 0B8873D5h, 0F63F149h
dd 2FB6064Fh, 77438B2Ch, 5BCB72ABh, 56DE59F8h
dd 351DEDD3h, 1E71C414h, 0FE1645D0h, 8C20955h
dd 3601502Dh, 0EF74E1Fh, 22F95505h, 1070CD47h
dd 4D1DE6FBh, 7C9D3DF0h, 59755Fh, 0FA2C5E31h
dd 95136551h, 0CD44C05h, 812ABA38h, 0EC686D2Ah
dd 309FC92Eh, 0D82C5AC5h, 69CA3281h, 0B1D1A943h
dd 8460064Bh, 0D6363867h, 0ABAF5380h, 42D276FDh
dd 0D0D16D1Dh, 0B0438890h, 3E518F76h, 103DB63Bh
dd 7C9A3869h, 7DAE06ACh, 0A8DD7D26h, 81167A49h
dd 3C54BB7Ch, 0AEFE53BBh, 0E6EE4B8Bh, 0C24627Ah
dd 0EDCA3CFFh, 0D8CC8630h, 12EAFA77h, 40EB6133h
dd 9EEF32D0h, 0CF26EC19h, 43C2C151h, 0B66D543Bh
dd 38A8C6F9h, 9F20E366h, 3AA01558h, 1A9C886Bh
dd 0EC6B3223h, 0B5EFE17Dh, 5543B83Dh, 0A21F6630h
dd 6BFD12E0h, 0EEBE486h, 267E3EB9h, 7CA00B2Dh
dd 0EBDCD83Ah, 6796A0A2h, 48DC6Fh, 7C92C8D8h
dd 1B600FBAh, 7C92CAE7h, 417AC546h, 35F80D41h
dd 33C79566h, 8B474D19h, 7C840542h, 549F2F2Fh
dd 0
; ELF Symbol Table
Elf64_Sym <0>
Elf64_Sym <offset aPrintf - offset unk_3378,\ ; "printf"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aMemcpy - offset unk_3378,\ ; "memcpy"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aPerror - offset unk_3378,\ ; "perror"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aMalloc - offset unk_3378,\ ; "malloc"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aSocket - offset unk_3378,\ ; "socket"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aSelect - offset unk_3378,\ ; "select"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aAccept_0 - offset unk_3378,\ ; "accept"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aWrite - offset unk_3378,\ ; "write"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aBind - offset unk_3378,\ ; "bind"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aSetsockopt - offset unk_3378,\ ; "setsockopt"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aRead - offset unk_3378,\ ; "read"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aStrncmp - offset unk_3378,\ ; "strncmp"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aRealloc - offset unk_3378,\ ; "realloc"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aListen - offset unk_3378,\ ; "listen"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aMemset - offset unk_3378,\ ; "memset"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aTime - offset unk_3378,\ ; "time"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aStrcmp - offset unk_3378,\ ; "strcmp"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aShutdown - offset unk_3378,\ ; "shutdown"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aHtons - offset unk_3378,\ ; "htons"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aExit - offset unk_3378,\ ; "exit"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aAtoi - offset unk_3378,\ ; "atoi"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aStrlen - offset unk_3378,\ ; "strlen"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aStrchr - offset unk_3378,\ ; "strchr"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aClose - offset unk_3378,\ ; "close"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aFree - offset unk_3378,\ ; "free"
           10h, 0, 0, offset dword_0, 0>
Elf64_Sym <offset aNotq - offset unk_3378,\ ; "notq"
           12h, 0, 7, offset notq, 117h>
Elf64_Sym <offset aByteRangeResp - offset unk_3378,\ ; "byte_range_resp"
           12h, 0, 7, \
           offset _byte_range_resp, \
           188h>
Elf64_Sym <offset aDquote - offset unk_3378,\ ; "__dquote"
           12h, 0, 7, offset __dquote, \
           3Ch>
Elf64_Sym <offset aOriginForm - offset unk_3378,\ ; "origin_form"
           12h, 0, 7, \
           offset origin_form, 16Ah>
Elf64_Sym <offset aHttpDate - offset unk_3378,\ ; "HTTP_date"
           12h, 0, 7, offset HTTP_date, \
           0D6h>
Elf64_Sym <offset aAlpha - offset unk_3378,\ ; "__alpha"
           12h, 0, 7, offset __alpha, \
           66h>
Elf64_Sym <offset aUriHost+4 - offset unk_3378,\ ; "host"
           12h, 0, 7, offset host, 108h>
Elf64_Sym <offset aToken68 - offset unk_3378,\ ; "token68"
           12h, 0, 7, offset token68, \
           318h>
Elf64_Sym <offset aOtherContentRa - offset unk_3378,\ ; "other_content_range"
           12h, 0, 7, \
           offset other_content_range, \
           0D3h>
Elf64_Sym <offset aEntityTag - offset unk_3378,\ ; "entity_tag"
           12h, 0, 7, offset entity_tag,\
           15Ah>
Elf64_Sym <offset aTCodings+2 - offset unk_3378,\ ; "codings"
           12h, 0, 7, offset codings, \
           10Ah>
Elf64_Sym <offset aUnsatisfiedRan - offset unk_3378,\ ; "unsatisfied_range"
           12h, 0, 7, \
           offset unsatisfied_range, \
           0BBh>
Elf64_Sym <offset aPort - offset unk_3378,\ ; "port"
           12h, 0, 7, offset port, 0DCh>
Elf64_Sym <offset aRange - offset unk_3378,\ ; "__range"
           12h, 0, 7, offset __range, \
           60h>
Elf64_Sym <offset aExpires - offset unk_3378,\ ; "Expires"
           12h, 0, 7, offset Expires, \
           9Fh>
Elf64_Sym <offset aContentRange - offset unk_3378,\ ; "Content_Range"
           12h, 0, 7, \
           offset Content_Range, 0D6h>
Elf64_Sym <offset aLf - offset unk_3378,\ ; "__lf"
           12h, 0, 7, offset __lf, 3Ch>
Elf64_Sym <offset aWarnAgent - offset unk_3378,\ ; "warn_agent"
           12h, 0, 7, offset warn_agent,\
           21Eh>
Elf64_Sym <offset aAcceptableRang - offset unk_3378,\ ; "acceptable_ranges"
           12h, 0, 7, \
           offset acceptable_ranges, \
           41Ah>
Elf64_Sym <offset aComment - offset unk_3378,\ ; "comment"
           12h, 0, 7, offset comment, \
           1FCh>
Elf64_Sym <offset aAbsolutePath - offset unk_3378,\ ; "absolute_path"
           12h, 0, 7, \
           offset absolute_path, 17Fh>
Elf64_Sym <offset aIfMatchHeader - offset unk_3378,\ ; "If_Match_header"
           12h, 0, 7, \
           offset If_Match_header, 0FFh>
Elf64_Sym <offset aOtherRangeSet - offset unk_3378,\ ; "other_range_set"
           12h, 0, 7, \
           offset other_range_set, 0DBh>
Elf64_Sym <offset aTransferParame - offset unk_3378,\ ; "transfer_parameter"
           12h, 0, 7, \
           offset transfer_parameter, \
           1A8h>
Elf64_Sym <offset aIfRangeHeader - offset unk_3378,\ ; "If_Range_header"
           12h, 0, 7, \
           offset If_Range_header, 0FFh>
Elf64_Sym <offset aSendrequest - offset unk_3378,\ ; "sendRequest"
           12h, 0, 7, \
           offset sendRequest, 114h>
Elf64_Sym <offset aQuotedPair - offset unk_3378,\ ; "quoted_pair"
           12h, 0, 7, \
           offset quoted_pair, 1CBh>
Elf64_Sym <offset aSstring - offset unk_3378,\ ; "__sstring"
           12h, 0, 7, offset __sstring, \
           94h>
Elf64_Sym <offset aAcceptLanguage - offset unk_3378,\ ; "Accept_Language"
           12h, 0, 7, \
           offset Accept_Language, 5D6h>
Elf64_Sym <offset aCtext - offset unk_3378,\ ; "ctext"
           12h, 0, 7, offset ctext, \
           1AFh>
Elf64_Sym <offset aPathNoscheme - offset unk_3378,\ ; "path_noscheme"
           12h, 0, 7, \
           offset path_noscheme, 19Fh>
Elf64_Sym <offset aOws - offset unk_3378,\ ; "OWS"
           12h, 0, 7, offset OWS, 190h>
Elf64_Sym <offset aContentLanguag - offset unk_3378,\ ; "Content_Language"
           12h, 0, 7, \
           offset Content_Language, \
           355h>
Elf64_Sym <offset aCompleteLength - offset unk_3378,\ ; "complete_length"
           12h, 0, 7, \
           offset complete_length, 0DBh>
Elf64_Sym <offset aChar - offset unk_3378,\ ; "__char"
           12h, 0, 7, offset __char, \
           3Ch>
Elf64_Sym <offset aAuthScheme - offset unk_3378,\ ; "auth_scheme"
           12h, 0, 7, \
           offset auth_scheme, 9Fh>
Elf64_Sym <offset aRefererHeader - offset unk_3378,\ ; "Referer_header"
           12h, 0, 7, \
           offset Referer_header, 0FFh>
Elf64_Sym <offset aUserAgentHeade - offset unk_3378,\ ; "User_Agent_header"
           12h, 0, 7, \
           offset User_Agent_header, \
           0FFh>
Elf64_Sym <offset aMaxForwardsHea - offset unk_3378,\ ; "Max_Forwards_header"
           12h, 0, 7, \
           offset Max_Forwards_header, \
           0FFh>
Elf64_Sym <offset aUpgrade - offset unk_3378,\ ; "Upgrade"
           12h, 0, 7, offset Upgrade, \
           35Fh>
Elf64_Sym <offset aMinute - offset unk_3378,\ ; "minute"
           12h, 0, 7, offset minute, \
           0F1h>
Elf64_Sym <offset aLanguageTag - offset unk_3378,\ ; "Language_Tag"
           12h, 0, 7, \
           offset Language_Tag, 108h>
Elf64_Sym <offset aAccept - offset unk_3378,\ ; "Accept"
           12h, 0, 7, offset Accept, \
           647h>
Elf64_Sym <offset aStatusCode - offset unk_3378,\ ; "status_code"
           12h, 0, 7, \
           offset status_code, 0F1h>
Elf64_Sym <offset aServer - offset unk_3378,\ ; "Server"
           12h, 0, 7, offset Server, \
           24Bh>
Elf64_Sym <offset aProduct - offset unk_3378,\ ; "product"
           12h, 0, 7, offset product, \
           16Fh>
Elf64_Sym <offset aAcceptCharset - offset unk_3378,\ ; "Accept_Charset"
           12h, 0, 7, \
           offset Accept_Charset, 88Eh>
Elf64_Sym <offset aRetryAfterHead - offset unk_3378,\ ; "Retry_After_header"
           12h, 0, 7, \
           offset Retry_After_header, \
           0FFh>
Elf64_Sym <offset aAsteriskForm - offset unk_3378,\ ; "asterisk_form"
           12h, 0, 7, \
           offset asterisk_form, 0A4h>
Elf64_Sym <offset aCookieString - offset unk_3378,\ ; "cookie_string"
           12h, 0, 7, \
           offset cookie_string, 1AAh>
Elf64_Sym <offset aTransferEncodi - offset unk_3378,\ ; "Transfer_Encoding"
           12h, 0, 7, \
           offset Transfer_Encoding, \
           35Fh>
Elf64_Sym <offset aLastChunk - offset unk_3378,\ ; "last_chunk"
           12h, 0, 7, offset last_chunk,\
           1A6h>
Elf64_Sym <offset aProxyAuthoriza_0+6 - offset unk_3378,\ ; "Authorization_header"
           12h, 0, 7, \
           offset Authorization_header, \
           0FFh>
Elf64_Sym <offset aMediaRange - offset unk_3378,\ ; "media_range"
           12h, 0, 7, \
           offset media_range, 414h>
Elf64_Sym <offset aPathEmpty - offset unk_3378,\ ; "path_empty"
           12h, 0, 7, offset path_empty,\
           0A6h>
Elf64_Sym <offset aCookiePair - offset unk_3378,\ ; "cookie_pair"
           12h, 0, 7, \
           offset cookie_pair, 0D8h>
Elf64_Sym <offset aChallenge - offset unk_3378,\ ; "challenge"
           12h, 0, 7, offset challenge, \
           577h>
Elf64_Sym <offset aIfMatch - offset unk_3378,\ ; "If_Match"
           12h, 0, 7, offset If_Match, \
           41Ch>
Elf64_Sym <offset aSendbuffer - offset unk_3378,\ ; "sendBuffer"
           12h, 0, 7, offset sendBuffer,\
           156h>
Elf64_Sym <offset aMaxForwards - offset unk_3378,\ ; "Max_Forwards"
           12h, 0, 7, \
           offset Max_Forwards, 0DBh>
Elf64_Sym <offset aTchar - offset unk_3378,\ ; "tchar"
           12h, 0, 7, offset tchar, \
           3F2h>
Elf64_Sym <offset aPrivateuse - offset unk_3378,\ ; "privateuse"
           12h, 0, 7, offset privateuse,\
           276h>
Elf64_Sym <offset aGrandfathered - offset unk_3378,\ ; "grandfathered"
           12h, 0, 7, \
           offset grandfathered, 0D6h>
Elf64_Sym <offset aSegmentNz - offset unk_3378,\ ; "segment_nz"
           12h, 0, 7, offset segment_nz,\
           0E0h>
Elf64_Sym <offset aLastBytePos - offset unk_3378,\ ; "last_byte_pos"
           12h, 0, 7, \
           offset last_byte_pos, 0DBh>
Elf64_Sym <offset aPathAbempty - offset unk_3378,\ ; "path_abempty"
           12h, 0, 7, \
           offset path_abempty, 185h>
Elf64_Sym <offset aIrregular - offset unk_3378,\ ; "irregular"
           12h, 0, 7, offset irregular, \
           422h>
Elf64_Sym <offset aAge - offset unk_3378,\ ; "Age"
           12h, 0, 7, offset Age, 0A4h>
Elf64_Sym <offset aVaryHeader - offset unk_3378,\ ; "Vary_header"
           12h, 0, 7, \
           offset Vary_header, 0FFh>
Elf64_Sym <offset aIfModifiedSinc - offset unk_3378,\ ; "If_Modified_Since"
           12h, 0, 7, \
           offset If_Modified_Since, \
           9Fh>
Elf64_Sym <offset aMediaParameter - offset unk_3378,\ ; "media_parameter"
           12h, 0, 7, \
           offset media_parameter, 17Eh>
Elf64_Sym <offset aSendreponse - offset unk_3378,\ ; "sendReponse"
           12h, 0, 7, \
           offset sendReponse, 131h>
Elf64_Sym <offset aCharset - offset unk_3378,\ ; "charset"
           12h, 0, 7, offset charset, \
           9Fh>
Elf64_Sym <offset aCacheControlHe - offset unk_3378,\ ; "Cache_Control_header"
           12h, 0, 7, \
           offset Cache_Control_header, \
           0FFh>
Elf64_Sym <offset aContentCoding - offset unk_3378,\ ; "content_coding"
           12h, 0, 7, \
           offset content_coding, 9Fh>
Elf64_Sym <offset aShutdownsocket - offset unk_3378,\ ; "shutdownSocket"
           12h, 0, 7, \
           offset shutdownSocket, 99h>
Elf64_Sym <offset aMessageBody - offset unk_3378,\ ; "message_body"
           12h, 0, 7, \
           offset message_body, 0DCh>
Elf64_Sym <offset aConnectionOpti - offset unk_3378,\ ; "connection_option"
           12h, 0, 7, \
           offset connection_option, \
           0A4h>
Elf64_Sym <offset aContentType - offset unk_3378,\ ; "Content_Type"
           12h, 0, 7, \
           offset Content_Type, 0A4h>
Elf64_Sym <offset aIcar - offset unk_3378,\ ; "__icar"
           12h, 0, 7, offset __icar, \
           76h>
Elf64_Sym <offset aImfFixdate - offset unk_3378,\ ; "IMF_fixdate"
           12h, 0, 7, \
           offset IMF_fixdate, 146h>
Elf64_Sym <offset aViaHeader - offset unk_3378,\ ; "Via_header"
           12h, 0, 7, offset Via_header,\
           0FFh>
Elf64_Sym <offset aExpect - offset unk_3378,\ ; "Expect"
           12h, 0, 7, offset Expect, \
           0A6h>
Elf64_Sym <offset aBws - offset unk_3378,\ ; "BWS"
           12h, 0, 7, offset BWS, 0A4h>
Elf64_Sym <offset aHour - offset unk_3378,\ ; "hour"
           12h, 0, 7, offset hour, 0F1h>
Elf64_Sym <offset aSuffixByteRang - offset unk_3378,\ ; "suffix_byte_range_spec"
           12h, 0, 7, \
           offset suffix_byte_range_spec,\
           0BEh>
Elf64_Sym <offset aAbsoluteUri+9 - offset unk_3378,\ ; "URI"
           12h, 0, 7, offset URI, 278h>
Elf64_Sym <offset aExpiresHeader - offset unk_3378,\ ; "Expires_header"
           12h, 0, 7, \
           offset Expires_header, 0FFh>
Elf64_Sym <offset aAbsolutePath+9 - offset unk_3378,\ ; "path"
           12h, 0, 7, offset path, 174h>
Elf64_Sym <offset aYear - offset unk_3378,\ ; "year"
           12h, 0, 7, offset year, 0F1h>
Elf64_Sym <offset aSecond - offset unk_3378,\ ; "second"
           12h, 0, 7, offset second, \
           0F1h>
Elf64_Sym <offset aFieldName - offset unk_3378,\ ; "field_name"
           12h, 0, 7, offset field_name,\
           0A4h>
Elf64_Sym <offset aGetrequest - offset unk_3378,\ ; "getRequest"
           12h, 0, 7, offset getRequest,\
           7F0h>
Elf64_Sym <offset aChunkedBody - offset unk_3378,\ ; "chunked_body"
           12h, 0, 7, \
           offset chunked_body, 125h>
Elf64_Sym <offset aWarnCode - offset unk_3378,\ ; "warn_code"
           12h, 0, 7, offset warn_code, \
           0F1h>
Elf64_Sym <offset aExtlang - offset unk_3378,\ ; "extlang"
           12h, 0, 7, offset extlang, \
           256h>
Elf64_Sym <offset aHierPart - offset unk_3378,\ ; "hier_part"
           12h, 0, 7, offset hier_part, \
           174h>
Elf64_Sym <offset aProtocolVersio - offset unk_3378,\ ; "protocol_version"
           12h, 0, 7, \
           offset protocol_version, \
           0A4h>
Elf64_Sym <offset aTransferExtens+9 - offset unk_3378,\ ; "extension"
           12h, 0, 7, offset extension, \
           276h>
Elf64_Sym <offset aReceivedProtoc - offset unk_3378,\ ; "received_protocol"
           12h, 0, 7, \
           offset received_protocol, \
           16Ah>
Elf64_Sym <offset aNotqtoken - offset unk_3378,\ ; "notqtoken"
           12h, 0, 7, offset notqtoken, \
           5BDh>
Elf64_Sym <offset aIfUnmodifiedSi - offset unk_3378,\ ; "If_Unmodified_Since"
           12h, 0, 7, \
           offset If_Unmodified_Since, \
           9Fh>
Elf64_Sym <offset aUpgradeHeader - offset unk_3378,\ ; "Upgrade_header"
           12h, 0, 7, \
           offset Upgrade_header, 0FFh>
Elf64_Sym <offset aCookieName - offset unk_3378,\ ; "cookie_name"
           12h, 0, 7, \
           offset cookie_name, 9Fh>
Elf64_Sym <offset aStatusLine - offset unk_3378,\ ; "status_line"
           12h, 0, 7, \
           offset status_line, 108h>
Elf64_Sym <offset aProxyAuthentic - offset unk_3378,\ ; "Proxy_Authenticate"
           12h, 0, 7, \
           offset Proxy_Authenticate, \
           35Fh>
Elf64_Sym <offset aEndwritedirect - offset unk_3378,\ ; "endWriteDirectClient"
           12h, 0, 7, \
           offset endWriteDirectClient, \
           24h>
Elf64_Sym <offset aLastChunk+5 - offset unk_3378,\ ; "chunk"
           12h, 0, 7, offset chunk, \
           19Eh>
Elf64_Sym <offset aWritedirectcli - offset unk_3378,\ ; "writeDirectClient"
           12h, 0, 7, \
           offset writeDirectClient, \
           81h>
Elf64_Sym <offset aObsDate - offset unk_3378,\ ; "obs_date"
           12h, 0, 7, offset obs_date, \
           0D1h>
Elf64_Sym <offset aDayName - offset unk_3378,\ ; "day_name"
           12h, 0, 7, offset day_name, \
           1EEh>
Elf64_Sym <offset aAgeHeader - offset unk_3378,\ ; "Age_header"
           12h, 0, 7, offset Age_header,\
           0FFh>
Elf64_Sym <offset aQdtext - offset unk_3378,\ ; "qdtext"
           12h, 0, 7, offset qdtext, \
           1A5h>
Elf64_Sym <offset aOctet - offset unk_3378,\ ; "__octet"
           12h, 0, 7, offset __octet, \
           3Ch>
Elf64_Sym <offset aPchar - offset unk_3378,\ ; "pchar"
           12h, 0, 7, offset pchar, \
           174h>
Elf64_Sym <offset aCacheControl - offset unk_3378,\ ; "Cache_Control"
           12h, 0, 7, \
           offset Cache_Control, 35Fh>
Elf64_Sym <offset aAcceptCharsetH - offset unk_3378,\ ; "Accept_Charset_header"
           12h, 0, 7, \
           offset Accept_Charset_header,\
           0FFh>
Elf64_Sym <offset aFieldContent - offset unk_3378,\ ; "field_content"
           12h, 0, 7, \
           offset field_content, 0FEh>
Elf64_Sym <offset aWarnText - offset unk_3378,\ ; "warn_text"
           12h, 0, 7, offset warn_text, \
           9Fh>
Elf64_Sym <offset aSuffixByteRang+7 - offset unk_3378,\ ; "byte_range_spec"
           12h, 0, 7, \
           offset _byte_range_spec, \
           174h>
Elf64_Sym <offset aCacheDirective - offset unk_3378,\ ; "cache_directive"
           12h, 0, 7, \
           offset cache_directive, 21Eh>
Elf64_Sym <offset aDelaySeconds - offset unk_3378,\ ; "delay_seconds"
           12h, 0, 7, \
           offset delay_seconds, 0DBh>
Elf64_Sym <offset aAbsoluteForm - offset unk_3378,\ ; "absolute_form"
           12h, 0, 7, \
           offset absolute_form, 9Fh>
Elf64_Sym <offset aPragma - offset unk_3378,\ ; "Pragma"
           12h, 0, 7, offset Pragma, \
           35Fh>
Elf64_Sym <offset aVary - offset unk_3378,\ ; "Vary"
           12h, 0, 7, offset Vary, 412h>
Elf64_Sym <offset aVia - offset unk_3378,\ ; "Via"
           12h, 0, 7, offset Via, 668h>
Elf64_Sym <offset aFieldValue - offset unk_3378,\ ; "field_value"
           12h, 0, 7, \
           offset field_value, 195h>
Elf64_Sym <offset aQvalue - offset unk_3378,\ ; "qvalue"
           12h, 0, 7, offset qvalue, \
           435h>
Elf64_Sym <offset aRegion - offset unk_3378,\ ; "region"
           12h, 0, 7, offset region, \
           170h>
Elf64_Sym <offset aLocationHeader - offset unk_3378,\ ; "Location_header"
           12h, 0, 7, \
           offset Location_header, 0FFh>
Elf64_Sym <offset aLastModified - offset unk_3378,\ ; "Last_Modified"
           12h, 0, 7, \
           offset Last_Modified, 9Fh>
Elf64_Sym <offset aWwwAuthenticat - offset unk_3378,\ ; "WWW_Authenticate"
           12h, 0, 7, \
           offset WWW_Authenticate, \
           35Fh>
Elf64_Sym <offset aRequestshutdow - offset unk_3378,\ ; "requestShutdownSocket"
           12h, 0, 7, \
           offset requestShutdownSocket,\
           75h>
Elf64_Sym <offset aHeaderField - offset unk_3378,\ ; "header_field"
           12h, 0, 7, \
           offset header_field, 1E1h>
Elf64_Sym <offset aContentLengthH - offset unk_3378,\ ; "Content_Length_header"
           12h, 0, 7, \
           offset Content_Length_header,\
           0FFh>
Elf64_Sym <offset aRequestLine - offset unk_3378,\ ; "request_line"
           12h, 0, 7, \
           offset request_line, 10Dh>
Elf64_Sym <offset aWeight - offset unk_3378,\ ; "weight"
           12h, 0, 7, offset weight, \
           0FFh>
Elf64_Sym <offset aEtag - offset unk_3378,\ ; "ETag"
           12h, 0, 7, offset ETag, 0A4h>
Elf64_Sym <offset aChunkData - offset unk_3378,\ ; "chunk_data"
           12h, 0, 7, offset chunk_data,\
           0DBh>
Elf64_Sym <offset aIfNoneMatchHea - offset unk_3378,\ ; "If_None_Match_header"
           12h, 0, 7, \
           offset If_None_Match_header, \
           0FFh>
Elf64_Sym <offset aTransferExtens - offset unk_3378,\ ; "transfer_extension"
           12h, 0, 7, \
           offset transfer_extension, \
           1C4h>
Elf64_Sym <offset aAcceptLanguage_0 - offset unk_3378,\ ; "Accept_Language_header"
           12h, 0, 7, \
           offset Accept_Language_header,\
           0FFh>
Elf64_Sym <offset aTimeOfDay+8 - offset unk_3378,\ ; "day"
           12h, 0, 7, offset day, 0F1h>
Elf64_Sym <offset aTeHeader - offset unk_3378,\ ; "TE_header"
           12h, 0, 7, offset TE_header, \
           0FFh>
Elf64_Sym <offset aProxyAuthoriza+6 - offset unk_3378,\ ; "Authorization"
           12h, 0, 7, \
           offset Authorization, 9Fh>
Elf64_Sym <offset aPathAbsolute - offset unk_3378,\ ; "path_absolute"
           12h, 0, 7, \
           offset path_absolute, 25Ch>
Elf64_Sym <offset aHost - offset unk_3378,\ ; "Host"
           12h, 0, 7, offset Host, 16Fh>
Elf64_Sym <offset aHttpUri - offset unk_3378,\ ; "http_URI"
           12h, 0, 7, offset http_URI, \
           266h>
Elf64_Sym <offset aIfRange+3 - offset unk_3378,\ ; "Range"
           12h, 0, 7, offset Range, \
           0D6h>
Elf64_Sym <offset aQuotedString - offset unk_3378,\ ; "quoted_string"
           12h, 0, 7, \
           offset quoted_string, 1BAh>
Elf64_Sym <offset aAcceptExt - offset unk_3378,\ ; "accept_ext"
           12h, 0, 7, offset accept_ext,\
           262h>
Elf64_Sym <offset aRegName - offset unk_3378,\ ; "reg_name"
           12h, 0, 7, offset reg_name, \
           1CDh>
Elf64_Sym <offset aBit - offset unk_3378,\ ; "__bit"
           12h, 0, 7, offset __bit, 4Ah>
Elf64_Sym <offset aCredentials - offset unk_3378,\ ; "credentials"
           12h, 0, 7, \
           offset credentials, 577h>
Elf64_Sym <offset aAcceptEncoding_0 - offset unk_3378,\ ; "Accept_Encoding_header"
           12h, 0, 7, \
           offset Accept_Encoding_header,\
           0FFh>
Elf64_Sym <offset aPathRootless - offset unk_3378,\ ; "path_rootless"
           12h, 0, 7, \
           offset path_rootless, 19Fh>
Elf64_Sym <offset aDeltaSeconds - offset unk_3378,\ ; "delta_seconds"
           12h, 0, 7, \
           offset delta_seconds, 0DBh>
Elf64_Sym <offset aPctEncoded - offset unk_3378,\ ; "pct_encoded"
           12h, 0, 7, \
           offset pct_encoded, 0CEh>
Elf64_Sym <offset aChunkExtName - offset unk_3378,\ ; "chunk_ext_name"
           12h, 0, 7, \
           offset chunk_ext_name, 0A4h>
Elf64_Sym <offset aReasonPhrase - offset unk_3378,\ ; "reason_phrase"
           12h, 0, 7, \
           offset reason_phrase, 1ECh>
Elf64_Sym <offset aWarningValue - offset unk_3378,\ ; "warning_value"
           12h, 0, 7, \
           offset warning_value, 1B9h>
Elf64_Sym <offset aIstring - offset unk_3378,\ ; "__istring"
           12h, 0, 7, offset __istring, \
           0F6h>
Elf64_Sym <offset aOtherRangesSpe - offset unk_3378,\ ; "other_ranges_specifier"
           12h, 0, 7, \
           offset other_ranges_specifier,\
           0CEh>
Elf64_Sym <offset aRws - offset unk_3378,\ ; "RWS"
           12h, 0, 7, offset RWS, 18Fh>
Elf64_Sym <offset aStartLine - offset unk_3378,\ ; "start_line"
           12h, 0, 7, offset start_line,\
           9Fh>
Elf64_Sym <offset aProtocolName - offset unk_3378,\ ; "protocol_name"
           12h, 0, 7, \
           offset protocol_name, 0A4h>
Elf64_Sym <offset aUnreserved+2 - offset unk_3378,\ ; "reserved"
           12h, 0, 7, offset reserved, \
           0D6h>
Elf64_Sym <offset aUriHost - offset unk_3378,\ ; "uri_host"
           12h, 0, 7, offset uri_host, \
           9Fh>
Elf64_Sym <offset aIfRangeHeader+3 - offset unk_3378,\ ; "Range_header"
           12h, 0, 7, \
           offset Range_header, 0FFh>
Elf64_Sym <offset aDateHeader - offset unk_3378,\ ; "Date_header"
           12h, 0, 7, \
           offset Date_header, 0FFh>
Elf64_Sym <offset aRelativePart - offset unk_3378,\ ; "relative_part"
           12h, 0, 7, \
           offset relative_part, 174h>
Elf64_Sym <offset aExtensionPragm - offset unk_3378,\ ; "extension_pragma"
           12h, 0, 7, \
           offset extension_pragma, \
           21Eh>
Elf64_Sym <offset aAsctimeDate - offset unk_3378,\ ; "asctime_date"
           12h, 0, 7, \
           offset asctime_date, 131h>
Elf64_Sym <offset aAuthScheme+5 - offset unk_3378,\ ; "scheme"
           12h, 0, 7, offset scheme, \
           23Eh>
Elf64_Sym <offset aRequestTarget - offset unk_3378,\ ; "request_target"
           12h, 0, 7, \
           offset request_target, 9Fh>
Elf64_Sym <offset aAcceptEncoding - offset unk_3378,\ ; "Accept_Encoding"
           12h, 0, 7, \
           offset Accept_Encoding, 647h>
Elf64_Sym <offset aDate1 - offset unk_3378,\ ; "date1"
           12h, 0, 7, offset date1, \
           102h>
Elf64_Sym <offset aHttpName - offset unk_3378,\ ; "HTTP_name"
           12h, 0, 7, offset HTTP_name, \
           0A6h>
Elf64_Sym <offset aDate2 - offset unk_3378,\ ; "date2"
           12h, 0, 7, offset date2, \
           159h>
Elf64_Sym <offset aDate3 - offset unk_3378,\ ; "date3"
           12h, 0, 7, offset date3, \
           270h>
Elf64_Sym <offset aIfModifiedSinc_0 - offset unk_3378,\ ; "If_Modified_Since_header"
           12h, 0, 7, \
           offset If_Modified_Since_header,\
           0FFh>
Elf64_Sym <offset aByteContentRan - offset unk_3378,\ ; "byte_content_range"
           12h, 0, 7, \
           offset _byte_content_range, \
           188h>
Elf64_Sym <offset aBytesUnit - offset unk_3378,\ ; "bytes_unit"
           12h, 0, 7, offset bytes_unit,\
           0A6h>
Elf64_Sym <offset aHttpMessage - offset unk_3378,\ ; "HTTP_message"
           12h, 0, 7, \
           offset HTTP_message, 1AFh>
Elf64_Sym <offset aTrailerHeader - offset unk_3378,\ ; "Trailer_header"
           12h, 0, 7, \
           offset Trailer_header, 0FFh>
Elf64_Sym <offset aLanguage - offset unk_3378,\ ; "language"
           12h, 0, 7, offset language, \
           2C3h>
Elf64_Sym <offset aObsFold - offset unk_3378,\ ; "obs_fold"
           12h, 0, 7, offset obs_fold, \
           1A4h>
Elf64_Sym <offset aOtherRangeUnit - offset unk_3378,\ ; "other_range_unit"
           12h, 0, 7, \
           offset other_range_unit, 9Fh>
Elf64_Sym <offset aExpectHeader - offset unk_3378,\ ; "Expect_header"
           12h, 0, 7, \
           offset Expect_header, 0FFh>
Elf64_Sym <offset aVchar - offset unk_3378,\ ; "__vchar"
           12h, 0, 7, offset __vchar, \
           4Ah>
Elf64_Sym <offset aConnectionHead - offset unk_3378,\ ; "Connection_header"
           12h, 0, 7, \
           offset Connection_header, \
           0FFh>
Elf64_Sym <offset aChunkExtVal - offset unk_3378,\ ; "chunk_ext_val"
           12h, 0, 7, \
           offset chunk_ext_val, 0D6h>
Elf64_Sym <offset aWarning - offset unk_3378,\ ; "Warning"
           12h, 0, 7, offset Warning, \
           35Fh>
Elf64_Sym <offset aReceivedProtoc+9 - offset unk_3378,\ ; "protocol"
           12h, 0, 7, offset protocol, \
           174h>
Elf64_Sym <offset aIfNoneMatch - offset unk_3378,\ ; "If_None_Match"
           12h, 0, 7, \
           offset If_None_Match, 41Ch>
Elf64_Sym <offset aGetlastfield - offset unk_3378,\ ; "getLastField"
           12h, 0, 7, \
           offset getLastField, 74h>
Elf64_Sym <offset aDigit - offset unk_3378,\ ; "__digit"
           12h, 0, 7, offset __digit, \
           4Ah>
Elf64_Sym <offset aNum - offset unk_3378,\ ; "__num"
           12h, 0, 7, offset __num, 94h>
Elf64_Sym <offset aContentTypeHea - offset unk_3378,\ ; "Content_Type_header"
           12h, 0, 7, \
           offset Content_Type_header, \
           0FFh>
Elf64_Sym <offset aByteRangesSpec - offset unk_3378,\ ; "byte_ranges_specifier"
           12h, 0, 7, \
           offset _byte_ranges_specifier,\
           0D3h>
Elf64_Sym <offset aOtherRangeResp - offset unk_3378,\ ; "other_range_resp"
           12h, 0, 7, \
           offset other_range_resp, \
           0DCh>
Elf64_Sym <offset aHttpVersion - offset unk_3378,\ ; "HTTP_version"
           12h, 0, 7, \
           offset HTTP_version, 0FDh>
Elf64_Sym <offset aMonth - offset unk_3378,\ ; "month"
           12h, 0, 7, offset month, \
           306h>
Elf64_Sym <offset aHexdig - offset unk_3378,\ ; "__hexdig"
           12h, 0, 7, offset __hexdig, \
           82h>
Elf64_Sym <offset aSegmentNzNc - offset unk_3378,\ ; "segment_nz_nc"
           12h, 0, 7, \
           offset segment_nz_nc, 1FFh>
Elf64_Sym <offset aAuthority - offset unk_3378,\ ; "authority"
           12h, 0, 7, offset authority, \
           244h>
Elf64_Sym <offset aTimeOfDay - offset unk_3378,\ ; "time_of_day"
           12h, 0, 7, \
           offset time_of_day, 0FDh>
Elf64_Sym <offset aFieldVchar - offset unk_3378,\ ; "field_vchar"
           12h, 0, 7, \
           offset field_vchar, 0D1h>
Elf64_Sym <offset aUnreserved - offset unk_3378,\ ; "unreserved"
           12h, 0, 7, offset unreserved,\
           1A0h>
Elf64_Sym <offset aWsp - offset unk_3378,\ ; "__wsp"
           12h, 0, 7, offset __wsp, 4Ah>
Elf64_Sym <offset aVariant - offset unk_3378,\ ; "variant"
           12h, 0, 7, offset variant, \
           210h>
Elf64_Sym <offset aCookieHeader - offset unk_3378,\ ; "Cookie_header"
           12h, 0, 7, \
           offset Cookie_header, 0EAh>
Elf64_Sym <offset aTCodings - offset unk_3378,\ ; "t_codings"
           12h, 0, 7, offset t_codings, \
           219h>
Elf64_Sym <offset aIpvfuture - offset unk_3378,\ ; "IPvFuture"
           12h, 0, 7, offset IPvFuture, \
           251h>
Elf64_Sym <offset aScar - offset unk_3378,\ ; "__scar"
           12h, 0, 7, offset __scar, \
           42h>
Elf64_Sym <offset aAlphanum - offset unk_3378,\ ; "alphanum"
           12h, 0, 7, offset alphanum, \
           0CCh>
Elf64_Sym <offset aConnection - offset unk_3378,\ ; "Connection"
           12h, 0, 7, offset Connection,\
           36Eh>
Elf64_Sym <offset aMethod - offset unk_3378,\ ; "method"
           12h, 0, 7, offset method, \
           0A4h>
Elf64_Sym <offset aContentEncodin - offset unk_3378,\ ; "Content_Encoding"
           12h, 0, 7, \
           offset Content_Encoding, \
           35Fh>
Elf64_Sym <offset aWarningHeader - offset unk_3378,\ ; "Warning_header"
           12h, 0, 7, \
           offset Warning_header, 0FFh>
Elf64_Sym <offset aContentLocatio - offset unk_3378,\ ; "Content_Location"
           12h, 0, 7, \
           offset Content_Location, \
           0CCh>
Elf64_Sym <offset aFirstBytePos - offset unk_3378,\ ; "first_byte_pos"
           12h, 0, 7, \
           offset first_byte_pos, 0DBh>
Elf64_Sym <offset aMediaType+6 - offset unk_3378,\ ; "type"
           12h, 0, 7, offset type, 9Fh>
Elf64_Sym <offset aGmt - offset unk_3378,\ ; "GMT"
           12h, 0, 7, offset GMT, 0A6h>
Elf64_Sym <offset aDecOctet - offset unk_3378,\ ; "dec_octet"
           12h, 0, 7, offset dec_octet, \
           245h>
Elf64_Sym <offset aTRanking - offset unk_3378,\ ; "t_ranking"
           12h, 0, 7, offset t_ranking, \
           0FFh>
Elf64_Sym <offset aH16 - offset unk_3378,\ ; "h16"
           12h, 0, 7, offset h16, 0F1h>
Elf64_Sym <offset aEtagc - offset unk_3378,\ ; "etagc"
           12h, 0, 7, offset etagc, \
           0DBh>
Elf64_Sym <offset aChunkExt - offset unk_3378,\ ; "chunk_ext"
           12h, 0, 7, offset chunk_ext, \
           259h>
Elf64_Sym <offset aObsText - offset unk_3378,\ ; "obs_text"
           12h, 0, 7, offset obs_text, \
           0A9h>
Elf64_Sym <offset aProductVersion - offset unk_3378,\ ; "product_version"
           12h, 0, 7, \
           offset product_version, 9Fh>
Elf64_Sym <offset aTrailer - offset unk_3378,\ ; "Trailer"
           12h, 0, 7, offset Trailer, \
           35Fh>
Elf64_Sym <offset aAbsoluteUri - offset unk_3378,\ ; "absolute_URI"
           12h, 0, 7, \
           offset absolute_URI, 1A3h>
Elf64_Sym <offset aLanguageRange - offset unk_3378,\ ; "language_range"
           12h, 0, 7, \
           offset language_range, 2FBh>
Elf64_Sym <offset aUserinfo - offset unk_3378,\ ; "userinfo"
           12h, 0, 7, offset userinfo, \
           200h>
Elf64_Sym <offset aAcceptRanges - offset unk_3378,\ ; "Accept_Ranges"
           12h, 0, 7, \
           offset Accept_Ranges, 0A4h>
Elf64_Sym <offset aSubDelims - offset unk_3378,\ ; "sub_delims"
           12h, 0, 7, \
           offset _sub_delims, 2B8h>
Elf64_Sym <offset aProxyAuthoriza_0 - offset unk_3378,\ ; "Proxy_Authorization_header"
           12h, 0, 7, \
           offset Proxy_Authorization_header,\
           0FFh>
Elf64_Sym <offset aByteRange - offset unk_3378,\ ; "byte_range"
           12h, 0, 7, \
           offset _byte_range, 0D8h>
Elf64_Sym <offset aNotqtoken+4 - offset unk_3378,\ ; "token"
           12h, 0, 7, offset token, \
           0DBh>
Elf64_Sym <offset aSuffixLength - offset unk_3378,\ ; "suffix_length"
           12h, 0, 7, \
           offset suffix_length, 0DBh>
Elf64_Sym <offset aRank - offset unk_3378,\ ; "rank"
           12h, 0, 7, offset rank, 435h>
Elf64_Sym <offset aTe - offset unk_3378,\ ; "TE"
           12h, 0, 7, offset TE, 3BEh>
Elf64_Sym <offset aByteRangeSet - offset unk_3378,\ ; "byte_range_set"
           12h, 0, 7, \
           offset _byte_range_set, 4CDh>
Elf64_Sym <offset aOtherRangeUnit+6 - offset unk_3378,\ ; "range_unit"
           12h, 0, 7, offset range_unit,\
           0CCh>
Elf64_Sym <offset aAllow - offset unk_3378,\ ; "Allow"
           12h, 0, 7, offset Allow, \
           3B4h>
Elf64_Sym <offset aTransferEncodi_0 - offset unk_3378,\ ; "Transfer_Encoding_header"
           12h, 0, 7, \
           offset Transfer_Encoding_header,\
           0FFh>
Elf64_Sym <offset aCrlf - offset unk_3378,\ ; "__crlf"
           12h, 0, 7, offset __crlf, \
           72h>
Elf64_Sym <offset aDayNameL - offset unk_3378,\ ; "day_name_l"
           12h, 0, 7, offset day_name_l,\
           1EEh>
Elf64_Sym <offset aPragmaHeader - offset unk_3378,\ ; "Pragma_header"
           12h, 0, 7, \
           offset Pragma_header, 0FFh>
Elf64_Sym <offset aIfRange - offset unk_3378,\ ; "If_Range"
           12h, 0, 7, offset If_Range, \
           0CCh>
Elf64_Sym <offset aUriReference - offset unk_3378,\ ; "URI_reference"
           12h, 0, 7, \
           offset URI_reference, 0D1h>
Elf64_Sym <offset aOpaqueTag - offset unk_3378,\ ; "opaque_tag"
           12h, 0, 7, offset opaque_tag,\
           106h>
Elf64_Sym <offset aReceivedBy - offset unk_3378,\ ; "received_by"
           12h, 0, 7, \
           offset received_by, 223h>
Elf64_Sym <offset aAuthorityForm - offset unk_3378,\ ; "authority_form"
           12h, 0, 7, \
           offset authority_form, 9Fh>
Elf64_Sym <offset aTransferCoding - offset unk_3378,\ ; "transfer_coding"
           12h, 0, 7, \
           offset transfer_coding, 17Ch>
Elf64_Sym <offset aGenDelims - offset unk_3378,\ ; "gen_delims"
           12h, 0, 7, offset gen_delims,\
           1E0h>
Elf64_Sym <offset aSubtype - offset unk_3378,\ ; "subtype"
           12h, 0, 7, offset subtype, \
           9Fh>
Elf64_Sym <offset aIrregular+2 - offset unk_3378,\ ; "regular"
           12h, 0, 7, offset regular, \
           25Eh>
Elf64_Sym <offset aQuery - offset unk_3378,\ ; "query"
           12h, 0, 7, offset query, \
           1C8h>
Elf64_Sym <offset aLs32 - offset unk_3378,\ ; "ls32"
           12h, 0, 7, offset ls32, 183h>
Elf64_Sym <offset aRetryAfter - offset unk_3378,\ ; "Retry_After"
           12h, 0, 7, \
           offset Retry_After, 0D1h>
Elf64_Sym <offset aMediaType - offset unk_3378,\ ; "media_type"
           12h, 0, 7, offset media_type,\
           1FDh>
Elf64_Sym <offset aPseudonym - offset unk_3378,\ ; "pseudonym"
           12h, 0, 7, offset pseudonym, \
           0A4h>
Elf64_Sym <offset aAcceptHeader - offset unk_3378,\ ; "Accept_header"
           12h, 0, 7, \
           offset Accept_header, 0FFh>
Elf64_Sym <offset aPragmaDirectiv - offset unk_3378,\ ; "pragma_directive"
           12h, 0, 7, \
           offset pragma_directive, \
           0D3h>
Elf64_Sym <offset aIpLiteral - offset unk_3378,\ ; "IP_literal"
           12h, 0, 7, offset IP_literal,\
           18Dh>
Elf64_Sym <offset aRfc850Date - offset unk_3378,\ ; "rfc850_date"
           12h, 0, 7, \
           offset rfc850_date, 13Ch>
Elf64_Sym <offset aContentLocatio+8 - offset unk_3378,\ ; "Location"
           12h, 0, 7, offset Location, \
           9Fh>
Elf64_Sym <offset aIpv6address - offset unk_3378,\ ; "IPv6address"
           12h, 0, 7, \
           offset IPv6address, 17E7h>
Elf64_Sym <offset aProxyAuthoriza - offset unk_3378,\ ; "Proxy_Authorization"
           12h, 0, 7, \
           offset Proxy_Authorization, \
           0A4h>
Elf64_Sym <offset aUserAgent - offset unk_3378,\ ; "User_Agent"
           12h, 0, 7, offset User_Agent,\
           24Bh>
Elf64_Sym <offset aReferer - offset unk_3378,\ ; "Referer"
           12h, 0, 7, offset Referer, \
           0CCh>
Elf64_Sym <offset aFragment - offset unk_3378,\ ; "fragment"
           12h, 0, 7, offset fragment, \
           1C8h>
Elf64_Sym <offset aIfUnmodifiedSi_0 - offset unk_3378,\ ; "If_Unmodified_Since_header"
           12h, 0, 7, \
           offset If_Unmodified_Since_header,\
           0FFh>
Elf64_Sym <offset aCookieValue - offset unk_3378,\ ; "cookie_value"
           12h, 0, 7, \
           offset cookie_value, 1FFh>
Elf64_Sym <offset aSingleton - offset unk_3378,\ ; "singleton"
           12h, 0, 7, offset singleton, \
           183h>
Elf64_Sym <offset aMediaParameter+6 - offset unk_3378,\ ; "parameter"
           12h, 0, 7, offset parameter, \
           17Eh>
Elf64_Sym <offset aAcceptParams - offset unk_3378,\ ; "accept_params"
           12h, 0, 7, \
           offset accept_params, 0F6h>
Elf64_Sym <offset aHostHeader - offset unk_3378,\ ; "Host_header"
           12h, 0, 7, \
           offset Host_header, 0FFh>
Elf64_Sym <offset aHtab - offset unk_3378,\ ; "__htab"
           12h, 0, 7, offset __htab, \
           3Ch>
Elf64_Sym <offset aCookieOctet - offset unk_3378,\ ; "cookie_octet"
           12h, 0, 7, \
           offset cookie_octet, 18Ah>
Elf64_Sym <offset aRelativeRef - offset unk_3378,\ ; "relative_ref"
           12h, 0, 7, \
           offset relative_ref, 244h>
Elf64_Sym <offset aFreerequest - offset unk_3378,\ ; "freeRequest"
           12h, 0, 7, \
           offset freeRequest, 3Dh>
Elf64_Sym <offset aContentLength - offset unk_3378,\ ; "Content_Length"
           12h, 0, 7, \
           offset Content_Length, 0DBh>
Elf64_Sym <offset aCtl - offset unk_3378,\ ; "__ctl"
           12h, 0, 7, offset __ctl, 58h>
Elf64_Sym <offset aChunkSize - offset unk_3378,\ ; "chunk_size"
           12h, 0, 7, offset chunk_size,\
           0DBh>
Elf64_Sym <offset aWeak - offset unk_3378,\ ; "weak"
           12h, 0, 7, offset weak, 0A6h>
Elf64_Sym <offset aWarnDate - offset unk_3378,\ ; "warn_date"
           12h, 0, 7, offset warn_date, \
           0C9h>
Elf64_Sym <offset aLangtag - offset unk_3378,\ ; "langtag"
           12h, 0, 7, offset langtag, \
           50Ah>
Elf64_Sym <offset aIpv4address - offset unk_3378,\ ; "IPv4address"
           12h, 0, 7, \
           offset IPv4address, 140h>
Elf64_Sym <offset aCr - offset unk_3378,\ ; "__cr"
           12h, 0, 7, offset __cr, 3Ch>
Elf64_Sym <offset aScript - offset unk_3378,\ ; "script"
           12h, 0, 7, offset script, \
           0F1h>
Elf64_Sym <offset aSp - offset unk_3378,\ ; "__sp"
           12h, 0, 7, offset __sp, 3Ch>
Elf64_Sym <offset aHttpsUri - offset unk_3378,\ ; "https_URI"
           12h, 0, 7, offset https_URI, \
           266h>
Elf64_Sym <offset aPartialUri - offset unk_3378,\ ; "partial_URI"
           12h, 0, 7, \
           offset partial_URI, 16Ah>
Elf64_Sym <offset aAuthParam - offset unk_3378,\ ; "auth_param"
           12h, 0, 7, offset auth_param,\
           1A8h>
Elf64_Sym <offset aSegment - offset unk_3378,\ ; "segment"
           12h, 0, 7, offset segment, \
           0E1h>
Elf64_Sym <offset aDate - offset unk_3378,\ ; "Date"
           12h, 0, 7, offset Date, 0A4h>
Elf64_Sym <offset aTrailerPart - offset unk_3378,\ ; "trailer_part"
           12h, 0, 7, \
           offset trailer_part, 180h>
; ELF String Table
unk_3378 db    0
aAlpha db '__alpha',0
aBit db '__bit',0
aChar db '__char',0
aCr db '__cr',0
aCrlf db '__crlf',0
aCtl db '__ctl',0
aDigit db '__digit',0
aDquote db '__dquote',0
aHexdig db '__hexdig',0
aHtab db '__htab',0
aLf db '__lf',0
aOctet db '__octet',0
aSp db '__sp',0
aVchar db '__vchar',0
aWsp db '__wsp',0
aRange db '__range',0
aIstring db '__istring',0
aStrlen db 'strlen',0
aSstring db '__sstring',0
aIcar db '__icar',0
aScar db '__scar',0
aNum db '__num',0
aHierPart db 'hier_part',0
aQuery db 'query',0
aFragment db 'fragment',0
aAuthority db 'authority',0
aPathAbempty db 'path_abempty',0
aPathAbsolute db 'path_absolute',0
aPathRootless db 'path_rootless',0
aPathEmpty db 'path_empty',0
aUriReference db 'URI_reference',0
aRelativeRef db 'relative_ref',0
aAbsoluteUri db 'absolute_URI',0
aRelativePart db 'relative_part',0
aPathNoscheme db 'path_noscheme',0
aUserinfo db 'userinfo',0
aPort db 'port',0
aUnreserved db 'unreserved',0
aPctEncoded db 'pct_encoded',0
aSubDelims db 'sub_delims',0
aIpLiteral db 'IP_literal',0
aIpv4address db 'IPv4address',0
aRegName db 'reg_name',0
aIpv6address db 'IPv6address',0
aIpvfuture db 'IPvFuture',0
aH16 db 'h16',0
aLs32 db 'ls32',0
aDecOctet db 'dec_octet',0
aSegment db 'segment',0
aSegmentNz db 'segment_nz',0
aSegmentNzNc db 'segment_nz_nc',0
aPchar db 'pchar',0
aGenDelims db 'gen_delims',0
aLanguageRange db 'language_range',0
aAlphanum db 'alphanum',0
aLanguageTag db 'Language_Tag',0
aLangtag db 'langtag',0
aPrivateuse db 'privateuse',0
aGrandfathered db 'grandfathered',0
aLanguage db 'language',0
aScript db 'script',0
aRegion db 'region',0
aVariant db 'variant',0
aExtlang db 'extlang',0
aSingleton db 'singleton',0
aIrregular db 'irregular',0
aBws db 'BWS',0
aOws db 'OWS',0
aConnection db 'Connection',0
aConnectionOpti db 'connection_option',0
aContentLength db 'Content_Length',0
aHttpMessage db 'HTTP_message',0
aStartLine db 'start_line',0
aHeaderField db 'header_field',0
aHttpName db 'HTTP_name',0
aHttpVersion db 'HTTP_version',0
aHost db 'Host',0
aUriHost db 'uri_host',0
aRws db 'RWS',0
aTe db 'TE',0
aTCodings db 't_codings',0
aTrailer db 'Trailer',0
aFieldName db 'field_name',0
aTransferEncodi db 'Transfer_Encoding',0
aTransferCoding db 'transfer_coding',0
aUpgrade db 'Upgrade',0
aVia db 'Via',0
aReceivedProtoc db 'received_protocol',0
aReceivedBy db 'received_by',0
aComment db 'comment',0
aAbsoluteForm db 'absolute_form',0
aAbsolutePath db 'absolute_path',0
aAsteriskForm db 'asterisk_form',0
aAuthorityForm db 'authority_form',0
aChunkSize db 'chunk_size',0
aChunkExt db 'chunk_ext',0
aChunkData db 'chunk_data',0
aChunkExtName db 'chunk_ext_name',0
aChunkExtVal db 'chunk_ext_val',0
aQuotedString db 'quoted_string',0
aChunkedBody db 'chunked_body',0
aLastChunk db 'last_chunk',0
aTrailerPart db 'trailer_part',0
aCtext db 'ctext',0
aQuotedPair db 'quoted_pair',0
aObsText db 'obs_text',0
aFieldContent db 'field_content',0
aFieldVchar db 'field_vchar',0
aFieldValue db 'field_value',0
aObsFold db 'obs_fold',0
aHttpUri db 'http_URI',0
aHttpsUri db 'https_URI',0
aMessageBody db 'message_body',0
aMethod db 'method',0
aOriginForm db 'origin_form',0
aPartialUri db 'partial_URI',0
aProtocolName db 'protocol_name',0
aProtocolVersio db 'protocol_version',0
aPseudonym db 'pseudonym',0
aQdtext db 'qdtext',0
aRank db 'rank',0
aReasonPhrase db 'reason_phrase',0
aRequestLine db 'request_line',0
aRequestTarget db 'request_target',0
aStatusCode db 'status_code',0
aStatusLine db 'status_line',0
aTRanking db 't_ranking',0
aTchar db 'tchar',0
aNotq db 'notq',0
aNotqtoken db 'notqtoken',0
aTransferExtens db 'transfer_extension',0
aTransferParame db 'transfer_parameter',0
aAccept db 'Accept',0
aMediaRange db 'media_range',0
aAcceptParams db 'accept_params',0
aAcceptCharset db 'Accept_Charset',0
aCharset db 'charset',0
aWeight db 'weight',0
aAcceptEncoding db 'Accept_Encoding',0
aAcceptLanguage db 'Accept_Language',0
aAllow db 'Allow',0
aContentEncodin db 'Content_Encoding',0
aContentCoding db 'content_coding',0
aContentLanguag db 'Content_Language',0
aContentLocatio db 'Content_Location',0
aContentType db 'Content_Type',0
aMediaType db 'media_type',0
aDate db 'Date',0
aHttpDate db 'HTTP_date',0
aExpect db 'Expect',0
aGmt db 'GMT',0
aImfFixdate db 'IMF_fixdate',0
aObsDate db 'obs_date',0
aDayName db 'day_name',0
aDate1 db 'date1',0
aTimeOfDay db 'time_of_day',0
aMaxForwards db 'Max_Forwards',0
aReferer db 'Referer',0
aRetryAfter db 'Retry_After',0
aDelaySeconds db 'delay_seconds',0
aServer db 'Server',0
aProduct db 'product',0
aUserAgent db 'User_Agent',0
aVary db 'Vary',0
aAcceptExt db 'accept_ext',0
aAsctimeDate db 'asctime_date',0
aDate3 db 'date3',0
aYear db 'year',0
aMonth db 'month',0
aDate2 db 'date2',0
aDayNameL db 'day_name_l',0
aHour db 'hour',0
aSubtype db 'subtype',0
aMediaParameter db 'media_parameter',0
aMinute db 'minute',0
aRfc850Date db 'rfc850_date',0
aProductVersion db 'product_version',0
aQvalue db 'qvalue',0
aSecond db 'second',0
aEtag db 'ETag',0
aEntityTag db 'entity_tag',0
aIfMatch db 'If_Match',0
aIfModifiedSinc db 'If_Modified_Since',0
aIfNoneMatch db 'If_None_Match',0
aIfUnmodifiedSi db 'If_Unmodified_Since',0
aLastModified db 'Last_Modified',0
aWeak db 'weak',0
aOpaqueTag db 'opaque_tag',0
aEtagc db 'etagc',0
aAcceptRanges db 'Accept_Ranges',0
aAcceptableRang db 'acceptable_ranges',0
aContentRange db 'Content_Range',0
aByteContentRan db 'byte_content_range',0
aOtherContentRa db 'other_content_range',0
aIfRange db 'If_Range',0
aByteRangesSpec db 'byte_ranges_specifier',0
aOtherRangesSpe db 'other_ranges_specifier',0
aBytesUnit db 'bytes_unit',0
aByteRangeResp db 'byte_range_resp',0
aUnsatisfiedRan db 'unsatisfied_range',0
aByteRange db 'byte_range',0
aFirstBytePos db 'first_byte_pos',0
aLastBytePos db 'last_byte_pos',0
aCompleteLength db 'complete_length',0
aByteRangeSet db 'byte_range_set',0
aSuffixByteRang db 'suffix_byte_range_spec',0
aOtherRangeUnit db 'other_range_unit',0
aOtherRangeResp db 'other_range_resp',0
aOtherRangeSet db 'other_range_set',0
aSuffixLength db 'suffix_length',0
aAge db 'Age',0
aDeltaSeconds db 'delta_seconds',0
aCacheControl db 'Cache_Control',0
aCacheDirective db 'cache_directive',0
aExpires db 'Expires',0
aPragma db 'Pragma',0
aPragmaDirectiv db 'pragma_directive',0
aWarning db 'Warning',0
aWarningValue db 'warning_value',0
aExtensionPragm db 'extension_pragma',0
aWarnAgent db 'warn_agent',0
aWarnCode db 'warn_code',0
aWarnDate db 'warn_date',0
aWarnText db 'warn_text',0
aProxyAuthentic db 'Proxy_Authenticate',0
aChallenge db 'challenge',0
aProxyAuthoriza db 'Proxy_Authorization',0
aCredentials db 'credentials',0
aWwwAuthenticat db 'WWW_Authenticate',0
aAuthParam db 'auth_param',0
aAuthScheme db 'auth_scheme',0
aToken68 db 'token68',0
aConnectionHead db 'Connection_header',0
aContentLengthH db 'Content_Length_header',0
aContentTypeHea db 'Content_Type_header',0
aTrailerHeader db 'Trailer_header',0
aTransferEncodi_0 db 'Transfer_Encoding_header',0
aUpgradeHeader db 'Upgrade_header',0
aViaHeader db 'Via_header',0
aAgeHeader db 'Age_header',0
aExpiresHeader db 'Expires_header',0
aDateHeader db 'Date_header',0
aLocationHeader db 'Location_header',0
aRetryAfterHead db 'Retry_After_header',0
aVaryHeader db 'Vary_header',0
aWarningHeader db 'Warning_header',0
aCacheControlHe db 'Cache_Control_header',0
aExpectHeader db 'Expect_header',0
aHostHeader db 'Host_header',0
aMaxForwardsHea db 'Max_Forwards_header',0
aPragmaHeader db 'Pragma_header',0
aTeHeader db 'TE_header',0
aIfMatchHeader db 'If_Match_header',0
aIfNoneMatchHea db 'If_None_Match_header',0
aIfModifiedSinc_0 db 'If_Modified_Since_header',0
aIfUnmodifiedSi_0 db 'If_Unmodified_Since_header',0
aIfRangeHeader db 'If_Range_header',0
aAcceptHeader db 'Accept_header',0
aAcceptCharsetH db 'Accept_Charset_header',0
aAcceptEncoding_0 db 'Accept_Encoding_header',0
aAcceptLanguage_0 db 'Accept_Language_header',0
aProxyAuthoriza_0 db 'Proxy_Authorization_header',0
aRefererHeader db 'Referer_header',0
aUserAgentHeade db 'User_Agent_header',0
aCookiePair db 'cookie_pair',0
aCookieName db 'cookie_name',0
aCookieValue db 'cookie_value',0
aCookieOctet db 'cookie_octet',0
aCookieHeader db 'Cookie_header',0
aCookieString db 'cookie_string',0
aShutdownsocket db 'shutdownSocket',0
aShutdown db 'shutdown',0
aTime db 'time',0
aRequestshutdow db 'requestShutdownSocket',0
aClose db 'close',0
aFree db 'free',0
aSocket db 'socket',0
aPerror db 'perror',0
aHtons db 'htons',0
aSetsockopt db 'setsockopt',0
aBind db 'bind',0
aListen db 'listen',0
aGetlastfield db 'getLastField',0
aStrcmp db 'strcmp',0
aStrncmp db 'strncmp',0
aAtoi db 'atoi',0
aSendrequest db 'sendRequest',0
aStrchr db 'strchr',0
aPrintf db 'printf',0
aRealloc db 'realloc',0
aMemcpy db 'memcpy',0
aSendbuffer db 'sendBuffer',0
aWrite db 'write',0
aWritedirectcli db 'writeDirectClient',0
aEndwritedirect db 'endWriteDirectClient',0
aSendreponse db 'sendReponse',0
aMalloc db 'malloc',0
aFreerequest db 'freeRequest',0
aGetrequest db 'getRequest',0
aSelect db 'select',0
aExit db 'exit',0
aMemset db 'memset',0
aAccept_0 db 'accept',0
aRead db 'read',0
aLibrequestSo db 'librequest.so',0
align 20h
; ELF JMPREL Relocation Table
Elf64_Rela <29018h, 100000007h, 0> ; R_X86_64_JUMP_SLOT printf
Elf64_Rela <29020h, 200000007h, 0> ; R_X86_64_JUMP_SLOT memcpy
Elf64_Rela <29028h, 300000007h, 0> ; R_X86_64_JUMP_SLOT perror
Elf64_Rela <29030h, 400000007h, 0> ; R_X86_64_JUMP_SLOT malloc
Elf64_Rela <29038h, 500000007h, 0> ; R_X86_64_JUMP_SLOT socket
Elf64_Rela <29040h, 600000007h, 0> ; R_X86_64_JUMP_SLOT select
Elf64_Rela <29048h, 700000007h, 0> ; R_X86_64_JUMP_SLOT accept
Elf64_Rela <29050h, 800000007h, 0> ; R_X86_64_JUMP_SLOT write
Elf64_Rela <29058h, 900000007h, 0> ; R_X86_64_JUMP_SLOT bind
Elf64_Rela <29060h, 0A00000007h, 0> ; R_X86_64_JUMP_SLOT setsockopt
Elf64_Rela <29068h, 0B00000007h, 0> ; R_X86_64_JUMP_SLOT read
Elf64_Rela <29070h, 0C00000007h, 0> ; R_X86_64_JUMP_SLOT strncmp
Elf64_Rela <29078h, 0D00000007h, 0> ; R_X86_64_JUMP_SLOT realloc
Elf64_Rela <29080h, 0E00000007h, 0> ; R_X86_64_JUMP_SLOT listen
Elf64_Rela <29088h, 0F00000007h, 0> ; R_X86_64_JUMP_SLOT memset
Elf64_Rela <29090h, 1000000007h, 0> ; R_X86_64_JUMP_SLOT time
Elf64_Rela <29098h, 1100000007h, 0> ; R_X86_64_JUMP_SLOT strcmp
Elf64_Rela <290A0h, 1200000007h, 0> ; R_X86_64_JUMP_SLOT shutdown
Elf64_Rela <290A8h, 1300000007h, 0> ; R_X86_64_JUMP_SLOT htons
Elf64_Rela <290B0h, 1400000007h, 0> ; R_X86_64_JUMP_SLOT exit
Elf64_Rela <290B8h, 1500000007h, 0> ; R_X86_64_JUMP_SLOT atoi
Elf64_Rela <290C0h, 1600000007h, 0> ; R_X86_64_JUMP_SLOT strlen
Elf64_Rela <290C8h, 1700000007h, 0> ; R_X86_64_JUMP_SLOT strchr
Elf64_Rela <290D0h, 1800000007h, 0> ; R_X86_64_JUMP_SLOT close
Elf64_Rela <290D8h, 1900000007h, 0> ; R_X86_64_JUMP_SLOT free
LOAD ends


; Segment type: Pure code
; Segment permissions: Read/Execute
_plt segment para public 'CODE' use64
assume cs:_plt
;org 5000h
assume es:nothing, ss:nothing, ds:LOAD, fs:nothing, gs:nothing



sub_5000 proc near
; __unwind {
push    cs:qword_29008
jmp     cs:qword_29010
sub_5000 endp

align 10h
; [00000006 BYTES: COLLAPSED FUNCTION _printf. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _memcpy. PRESS CTRL-NUMPAD+ TO EXPAND]
push    1
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _perror. PRESS CTRL-NUMPAD+ TO EXPAND]
push    2
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _malloc. PRESS CTRL-NUMPAD+ TO EXPAND]
push    3
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _socket. PRESS CTRL-NUMPAD+ TO EXPAND]
push    4
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _select. PRESS CTRL-NUMPAD+ TO EXPAND]
push    5
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _accept. PRESS CTRL-NUMPAD+ TO EXPAND]
push    6
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _write. PRESS CTRL-NUMPAD+ TO EXPAND]
push    7
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _bind. PRESS CTRL-NUMPAD+ TO EXPAND]
push    8
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _setsockopt. PRESS CTRL-NUMPAD+ TO EXPAND]
push    9
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _read. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Ah
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _strncmp. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Bh
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _realloc. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Ch
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _listen. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Dh
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _memset. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Eh
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _time. PRESS CTRL-NUMPAD+ TO EXPAND]
push    0Fh
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _strcmp. PRESS CTRL-NUMPAD+ TO EXPAND]
push    10h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _shutdown. PRESS CTRL-NUMPAD+ TO EXPAND]
push    11h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _htons. PRESS CTRL-NUMPAD+ TO EXPAND]
push    12h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _exit. PRESS CTRL-NUMPAD+ TO EXPAND]
push    13h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _atoi. PRESS CTRL-NUMPAD+ TO EXPAND]
push    14h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _strlen. PRESS CTRL-NUMPAD+ TO EXPAND]
push    15h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _strchr. PRESS CTRL-NUMPAD+ TO EXPAND]
push    16h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _close. PRESS CTRL-NUMPAD+ TO EXPAND]
push    17h
jmp     sub_5000
; [00000006 BYTES: COLLAPSED FUNCTION _free. PRESS CTRL-NUMPAD+ TO EXPAND]
push    18h
jmp     sub_5000
; } // starts at 5000
_plt ends


; Segment type: Pure code
; Segment permissions: Read/Execute
_text segment byte public 'CODE' use64
assume cs:_text
;org 51A0h
assume es:nothing, ss:nothing, ds:LOAD, fs:nothing, gs:nothing


; Attributes: bp-based frame

; int __cdecl _alpha(ctx *c)
public __alpha
__alpha proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__alpha'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 60h ; '`'
jle     short loc_51C8
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 7Ah ; 'z'
jle     short loc_51E4

loc_51C8:
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 40h ; '@'
jle     short loc_51E8
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 5Ah ; 'Z'
jg      short loc_51E8

loc_51E4:
mov     [rbp+state], 1

loc_51E8:
cmp     [rbp+state], 0
jz      short loc_5200
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5200:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 51A0
__alpha endp



; Attributes: bp-based frame

; int __cdecl _bit(ctx *c)
public __bit
__bit proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 30h ; '0'
jz      short loc_522E
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 31h ; '1'
jnz     short loc_5232

loc_522E:
mov     [rbp+state], 1

loc_5232:
cmp     [rbp+state], 0
jz      short loc_524A
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_524A:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5206
__bit endp



; Attributes: bp-based frame

; int __cdecl _char(ctx *c)
__char proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__char'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
test    al, al
jle     short loc_526E
mov     [rbp+state], 1

loc_526E:
cmp     [rbp+state], 0
jz      short loc_5286
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5286:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5250
__char endp



; Attributes: bp-based frame

; int __cdecl _cr(ctx *c)
public __cr
__cr proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 0Dh
jnz     short loc_52AA
mov     [rbp+state], 1

loc_52AA:
cmp     [rbp+state], 0
jz      short loc_52C2
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_52C2:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 528C
__cr endp



; Attributes: bp-based frame

; int __cdecl _crlf(ctx *c)
__crlf proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__crlf'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 0Dh
jnz     short loc_5323
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 0Ah
jnz     short loc_5323
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx
mov     [rbp+state], 1

loc_5323:
cmp     [rbp+state], 0
jnz     short loc_5334
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx

loc_5334:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 52C8
__crlf endp



; Attributes: bp-based frame

; int __cdecl _ctl(ctx *c)
public __ctl
__ctl proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
test    al, al
js      short loc_5362
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 1Fh
jle     short loc_5370

loc_5362:
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 7Fh
jnz     short loc_5374

loc_5370:
mov     [rbp+state], 1

loc_5374:
cmp     [rbp+state], 0
jz      short loc_538C
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_538C:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 533A
__ctl endp



; Attributes: bp-based frame

; int __cdecl _digit(ctx *c)
__digit proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__digit'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 2Fh ; '/'
jle     short loc_53BE
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 39h ; '9'
jg      short loc_53BE
mov     [rbp+state], 1

loc_53BE:
cmp     [rbp+state], 0
jz      short loc_53D6
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_53D6:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5392
__digit endp



; Attributes: bp-based frame

; int __cdecl _dquote(ctx *c)
__dquote proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__dquote'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 22h ; '"'
jnz     short loc_53FA
mov     [rbp+state], 1

loc_53FA:
cmp     [rbp+state], 0
jz      short loc_5412
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5412:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 53DC
__dquote endp



; Attributes: bp-based frame

; int __cdecl _hexdig(ctx *c)
__hexdig proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__hexdig'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 2Fh ; '/'
jle     short loc_5440
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 39h ; '9'
jle     short loc_5478

loc_5440:
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 40h ; '@'
jle     short loc_545C
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 46h ; 'F'
jle     short loc_5478

loc_545C:
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 60h ; '`'
jle     short loc_547C
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 66h ; 'f'
jg      short loc_547C

loc_5478:
mov     [rbp+state], 1

loc_547C:
cmp     [rbp+state], 0
jz      short loc_5494
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5494:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5418
__hexdig endp



; Attributes: bp-based frame

; int __cdecl _htab(ctx *c)
__htab proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__htab'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 9
jnz     short loc_54B8
mov     [rbp+state], 1

loc_54B8:
cmp     [rbp+state], 0
jz      short loc_54D0
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_54D0:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 549A
__htab endp



; Attributes: bp-based frame

; int __cdecl _lf(ctx *c)
public __lf
__lf proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 0Ah
jnz     short loc_54F4
mov     [rbp+state], 1

loc_54F4:
cmp     [rbp+state], 0
jz      short loc_550C
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_550C:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 54D6
__lf endp



; Attributes: bp-based frame

; int __cdecl _octet(ctx *c)
__octet proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__octet'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
test    al, al
jz      short loc_5530
mov     [rbp+state], 1

loc_5530:
cmp     [rbp+state], 0
jz      short loc_5548
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5548:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5512
__octet endp



; Attributes: bp-based frame

; int __cdecl _sp(ctx *c)
__sp proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__sp'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 20h ; ' '
jnz     short loc_556C
mov     [rbp+state], 1

loc_556C:
cmp     [rbp+state], 0
jz      short loc_5584
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5584:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 554E
__sp endp



; Attributes: bp-based frame

; int __cdecl _vchar(ctx *c)
__vchar proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__vchar'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 20h ; ' '
jle     short loc_55B6
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 7Fh
jz      short loc_55B6
mov     [rbp+state], 1

loc_55B6:
cmp     [rbp+state], 0
jz      short loc_55CE
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_55CE:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 558A
__vchar endp



; Attributes: bp-based frame

; int __cdecl _wsp(ctx *c)
public __wsp
__wsp proc near

c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 20h ; ' '
jz      short loc_55FC
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 9
jnz     short loc_5600

loc_55FC:
mov     [rbp+state], 1

loc_5600:
cmp     [rbp+state], 0
jz      short loc_5618
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5618:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 55D4
__wsp endp



; Attributes: bp-based frame

; int __cdecl _range(ctx *c, char x, char y)
public __range
__range proc near

y= byte ptr -20h
x= byte ptr -1Ch
c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     eax, esi
mov     [rbp+x], al
mov     eax, edx
mov     [rbp+y], al
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
mov     edx, eax
movzx   eax, [rbp+x]
cmp     dl, al
jb      short loc_5660
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
mov     edx, eax
movzx   eax, [rbp+y]
cmp     dl, al
ja      short loc_5660
mov     [rbp+state], 1

loc_5660:
cmp     [rbp+state], 0
jz      short loc_5678
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5678:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 561E
__range endp



; Attributes: bp-based frame

; int __cdecl _istring(ctx *c, char *s)
public __istring
__istring proc near

s= qword ptr -30h
c= qword ptr -28h
i= dword ptr -18h
state= byte ptr -11h

; __unwind {
push    rbp
mov     rbp, rsp
push    rbx
sub     rsp, 28h
mov     [rbp+c], rdi
mov     [rbp+s], rsi
mov     [rbp+state], 1
mov     [rbp+i], 0
jmp     loc_572A

loc_569F:
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   edx, byte ptr [rax]
mov     eax, [rbp+i]
movsxd  rcx, eax
mov     rax, [rbp+s]
add     rax, rcx
movzx   eax, byte ptr [rax]
cmp     dl, al
jz      short loc_5726
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   eax, byte ptr [rax]
cmp     al, 60h ; '`'
jle     short loc_5720
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   eax, byte ptr [rax]
cmp     al, 7Ah ; 'z'
jg      short loc_5720
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   eax, byte ptr [rax]
movsx   eax, al
lea     ecx, [rax-20h]
mov     eax, [rbp+i]
movsxd  rdx, eax
mov     rax, [rbp+s]
add     rax, rdx
movzx   eax, byte ptr [rax]
movsx   eax, al
cmp     ecx, eax
jz      short loc_5726

loc_5720:
mov     [rbp+state], 0
jmp     short loc_5745

loc_5726:
add     [rbp+i], 1

loc_572A:
mov     eax, [rbp+i]
movsxd  rbx, eax
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
cmp     rbx, rax
jb      loc_569F

loc_5745:
cmp     [rbp+state], 1
jnz     short loc_5769
mov     rax, [rbp+c]
mov     rbx, [rax]
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
lea     rdx, [rbx+rax]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5769:
movsx   eax, [rbp+state]
add     rsp, 28h
pop     rbx
pop     rbp
retn
; } // starts at 567E
__istring endp



; Attributes: bp-based frame

; int __cdecl _sstring(ctx *c, char *s)
public __sstring
__sstring proc near

s= qword ptr -30h
c= qword ptr -28h
i= dword ptr -18h
state= byte ptr -11h

; __unwind {
push    rbp
mov     rbp, rsp
push    rbx
sub     rsp, 28h
mov     [rbp+c], rdi
mov     [rbp+s], rsi
mov     [rbp+state], 1
mov     [rbp+i], 0
jmp     short loc_57C2

loc_5792:
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   edx, byte ptr [rax]
mov     eax, [rbp+i]
movsxd  rcx, eax
mov     rax, [rbp+s]
add     rax, rcx
movzx   eax, byte ptr [rax]
cmp     dl, al
jz      short loc_57BE
mov     [rbp+state], 0
jmp     short loc_57D9

loc_57BE:
add     [rbp+i], 1

loc_57C2:
mov     eax, [rbp+i]
movsxd  rbx, eax
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
cmp     rbx, rax
jb      short loc_5792

loc_57D9:
cmp     [rbp+state], 1
jnz     short loc_57FD
mov     rax, [rbp+c]
mov     rbx, [rax]
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
lea     rdx, [rbx+rax]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_57FD:
movsx   eax, [rbp+state]
add     rsp, 28h
pop     rbx
pop     rbp
retn
; } // starts at 5774
__sstring endp



; Attributes: bp-based frame

; int __cdecl _icar(ctx *c, char __c)
__icar proc near

__c= byte ptr -1Ch
c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is '__icar'
mov     rbp, rsp
mov     [rbp+c], rdi
mov     eax, esi
mov     [rbp+__c], al
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     [rbp+__c], al
jz      short loc_585C
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 60h ; '`'
jle     short loc_5860
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     al, 7Ah ; 'z'
jg      short loc_5860
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
movsx   eax, al
lea     edx, [rax-20h]
movsx   eax, [rbp+__c]
cmp     edx, eax
jnz     short loc_5860

loc_585C:
mov     [rbp+state], 1

loc_5860:
cmp     [rbp+state], 0
jz      short loc_5878
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5878:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 5808
__icar endp



; Attributes: bp-based frame

; int __cdecl _scar(ctx *c, char __c)
public __scar
__scar proc near

__c= byte ptr -1Ch
c= qword ptr -18h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+c], rdi
mov     eax, esi
mov     [rbp+__c], al
mov     [rbp+state], 0
mov     rax, [rbp+c]
mov     rax, [rax]
movzx   eax, byte ptr [rax]
cmp     [rbp+__c], al
jnz     short loc_58A2
mov     [rbp+state], 1

loc_58A2:
cmp     [rbp+state], 0
jz      short loc_58BA
mov     rax, [rbp+c]
mov     rax, [rax]
lea     rdx, [rax+1]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_58BA:
movsx   eax, [rbp+state]
pop     rbp
retn
; } // starts at 587E
__scar endp



; Attributes: bp-based frame

; int __cdecl _num(ctx *c, char *s)
public __num
__num proc near

s= qword ptr -30h
c= qword ptr -28h
i= dword ptr -18h
state= byte ptr -11h

; __unwind {
push    rbp
mov     rbp, rsp
push    rbx
sub     rsp, 28h
mov     [rbp+c], rdi
mov     [rbp+s], rsi
mov     [rbp+state], 1
mov     [rbp+i], 0
jmp     short loc_590E

loc_58DE:
mov     rax, [rbp+c]
mov     rdx, [rax]
mov     eax, [rbp+i]
cdqe
add     rax, rdx
movzx   edx, byte ptr [rax]
mov     eax, [rbp+i]
movsxd  rcx, eax
mov     rax, [rbp+s]
add     rax, rcx
movzx   eax, byte ptr [rax]
cmp     dl, al
jz      short loc_590A
mov     [rbp+state], 0
jmp     short loc_5925

loc_590A:
add     [rbp+i], 1

loc_590E:
mov     eax, [rbp+i]
movsxd  rbx, eax
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
cmp     rbx, rax
jb      short loc_58DE

loc_5925:
cmp     [rbp+state], 1
jnz     short loc_5949
mov     rax, [rbp+c]
mov     rbx, [rax]
mov     rax, [rbp+s]
mov     rdi, rax        ; s
call    _strlen
lea     rdx, [rbx+rax]
mov     rax, [rbp+c]
mov     [rax], rdx

loc_5949:
movsx   eax, [rbp+state]
add     rsp, 28h
pop     rbx
pop     rbp
retn
; } // starts at 58C0
__num endp



; Attributes: bp-based frame

; int __cdecl URI(ctx *c)
public URI
URI proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_599A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    scheme
mov     [rbp+state], al

loc_599A:
cmp     [rbp+state], 0
jz      short loc_59B4
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_59B4:
cmp     [rbp+state], 0
jz      short loc_59CE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    hier_part
mov     [rbp+state], al

loc_59CE:
cmp     [rbp+state], 0
jz      loc_5A9E
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_5A48

loc_59F2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_5A17
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_5A17:
cmp     [rbp+state], 0
jz      short loc_5A31
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    query
mov     [rbp+state], al

loc_5A31:
cmp     [rbp+state], 0
jnz     short loc_5A44
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_5A4E

loc_5A44:
add     [rbp+i], 1

loc_5A48:
cmp     [rbp+i], 0
jle     short loc_59F2

loc_5A4E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5A9E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5A9E:
cmp     [rbp+state], 0
jz      loc_5B6E
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_5B18

loc_5AC2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_5AE7
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_5AE7:
cmp     [rbp+state], 0
jz      short loc_5B01
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    fragment
mov     [rbp+state], al

loc_5B01:
cmp     [rbp+state], 0
jnz     short loc_5B14
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_5B1E

loc_5B14:
add     [rbp+i_0], 1

loc_5B18:
cmp     [rbp+i_0], 0
jle     short loc_5AC2

loc_5B1E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5B6E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5B6E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5BC6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2710 ; "URI"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5BC6:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 5954
URI endp



; Attributes: bp-based frame

; int __cdecl hier_part(ctx *c)
public hier_part
hier_part proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_5C14
mov     rax, [rbp+c]
lea     rsi, s          ; "//"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_5C14:
cmp     [rbp+state], 0
jz      short loc_5C2E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    authority
mov     [rbp+state], al

loc_5C2E:
cmp     [rbp+state], 0
jz      short loc_5C48
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_abempty
mov     [rbp+state], al

loc_5C48:
cmp     [rbp+state], 0
jnz     loc_5CDB
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_5C7B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_absolute
mov     [rbp+state], al

loc_5C7B:
cmp     [rbp+state], 0
jnz     short loc_5CDE
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_5CAA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_rootless
mov     [rbp+state], al

loc_5CAA:
cmp     [rbp+state], 0
jnz     short loc_5CE1
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_5CE2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_empty
mov     [rbp+state], al
jmp     short loc_5CE2

loc_5CDB:
nop
jmp     short loc_5CE2

loc_5CDE:
nop
jmp     short loc_5CE2

loc_5CE1:
nop

loc_5CE2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5D3A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2727 ; "hier_part"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5D3A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 5BCC
hier_part endp



; Attributes: bp-based frame

; int __cdecl URI_reference(ctx *c)
public URI_reference
URI_reference proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_5D81
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    URI
mov     [rbp+state], al

loc_5D81:
cmp     [rbp+state], 0
jnz     short loc_5DB2
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_5DB3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    relative_ref
mov     [rbp+state], al
jmp     short loc_5DB3

loc_5DB2:
nop

loc_5DB3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5E0B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2736 ; "URI_reference"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5E0B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 5D40
URI_reference endp



; Attributes: bp-based frame

; int __cdecl absolute_URI(ctx *c)
public absolute_URI
absolute_URI proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_5E57
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    scheme
mov     [rbp+state], al

loc_5E57:
cmp     [rbp+state], 0
jz      short loc_5E71
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_5E71:
cmp     [rbp+state], 0
jz      short loc_5E86
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    hier_part
mov     [rbp+state], al

loc_5E86:
cmp     [rbp+state], 0
jz      loc_5F56
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_5F00

loc_5EAA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_5ECF
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_5ECF:
cmp     [rbp+state], 0
jz      short loc_5EE9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    query
mov     [rbp+state], al

loc_5EE9:
cmp     [rbp+state], 0
jnz     short loc_5EFC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_5F06

loc_5EFC:
add     [rbp+i], 1

loc_5F00:
cmp     [rbp+i], 0
jle     short loc_5EAA

loc_5F06:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5F56
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5F56:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_5FAE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2749 ; "absolute_URI"
mov     rdi, rax
mov     eax, 0
call    r9

loc_5FAE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 5E11
absolute_URI endp



; Attributes: bp-based frame

; int __cdecl relative_ref(ctx *c)
public relative_ref
relative_ref proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_5FFA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    relative_part
mov     [rbp+state], al

loc_5FFA:
cmp     [rbp+state], 0
jz      loc_60CA
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_6074

loc_601E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_6043
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6043:
cmp     [rbp+state], 0
jz      short loc_605D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    query
mov     [rbp+state], al

loc_605D:
cmp     [rbp+state], 0
jnz     short loc_6070
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_607A

loc_6070:
add     [rbp+i], 1

loc_6074:
cmp     [rbp+i], 0
jle     short loc_601E

loc_607A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_60CA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_60CA:
cmp     [rbp+state], 0
jz      loc_619A
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_6144

loc_60EE:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_6113
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6113:
cmp     [rbp+state], 0
jz      short loc_612D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    fragment
mov     [rbp+state], al

loc_612D:
cmp     [rbp+state], 0
jnz     short loc_6140
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_614A

loc_6140:
add     [rbp+i_0], 1

loc_6144:
cmp     [rbp+i_0], 0
jle     short loc_60EE

loc_614A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_619A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_619A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_61F2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2769 ; "relative_ref"
mov     rdi, rax
mov     eax, 0
call    r9

loc_61F2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 5FB4
relative_ref endp



; Attributes: bp-based frame

; int __cdecl relative_part(ctx *c)
public relative_part
relative_part proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_6240
mov     rax, [rbp+c]
lea     rsi, s          ; "//"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_6240:
cmp     [rbp+state], 0
jz      short loc_625A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    authority
mov     [rbp+state], al

loc_625A:
cmp     [rbp+state], 0
jz      short loc_6274
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_abempty
mov     [rbp+state], al

loc_6274:
cmp     [rbp+state], 0
jnz     loc_6307
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_62A7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_absolute
mov     [rbp+state], al

loc_62A7:
cmp     [rbp+state], 0
jnz     short loc_630A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_62D6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_noscheme
mov     [rbp+state], al

loc_62D6:
cmp     [rbp+state], 0
jnz     short loc_630D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_630E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_empty
mov     [rbp+state], al
jmp     short loc_630E

loc_6307:
nop
jmp     short loc_630E

loc_630A:
nop
jmp     short loc_630E

loc_630D:
nop

loc_630E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6366
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2782 ; "relative_part"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6366:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 61F8
relative_part endp



; Attributes: bp-based frame

; int __cdecl scheme(ctx *c)
public scheme
scheme proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_63AD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_63AD:
cmp     [rbp+state], 0
jz      loc_654C
mov     [rbp+i], 0

loc_63BE:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_64D7
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_6404
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_6404:
cmp     [rbp+state], 0
jnz     loc_64D6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6432
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_6432:
cmp     [rbp+state], 0
jnz     loc_64D6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6465
mov     rax, [rbp+c]
mov     esi, 2Bh ; '+'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6465:
cmp     [rbp+state], 0
jnz     short loc_64D6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6494
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6494:
cmp     [rbp+state], 0
jnz     short loc_64D6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_64C3
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_64C3:
cmp     [rbp+state], 0
jnz     short loc_64D6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_64D7

loc_64D6:
nop

loc_64D7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6524
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6524:
cmp     [rbp+state], 0
jnz     short loc_6543
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_654C

loc_6543:
add     [rbp+i], 1
jmp     loc_63BE

loc_654C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_65A4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2794 ; "scheme"
mov     rdi, rax
mov     eax, 0
call    r9

loc_65A4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 636C
scheme endp



; Attributes: bp-based frame

; int __cdecl authority(ctx *c)
public authority
authority proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_66A6
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_6650

loc_65FA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_661F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    userinfo
mov     [rbp+state], al

loc_661F:
cmp     [rbp+state], 0
jz      short loc_6639
mov     rax, [rbp+c]
mov     esi, 40h ; '@'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6639:
cmp     [rbp+state], 0
jnz     short loc_664C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_6656

loc_664C:
add     [rbp+i], 1

loc_6650:
cmp     [rbp+i], 0
jle     short loc_65FA

loc_6656:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_66A6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_66A6:
cmp     [rbp+state], 0
jz      short loc_66C0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    host
mov     [rbp+state], al

loc_66C0:
cmp     [rbp+state], 0
jz      loc_6790
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_673A

loc_66E4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_6709
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6709:
cmp     [rbp+state], 0
jz      short loc_6723
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    port
mov     [rbp+state], al

loc_6723:
cmp     [rbp+state], 0
jnz     short loc_6736
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_6740

loc_6736:
add     [rbp+i_0], 1

loc_673A:
cmp     [rbp+i_0], 0
jle     short loc_66E4

loc_6740:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6790
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6790:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_67E8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2816 ; "authority"
mov     rdi, rax
mov     eax, 0
call    r9

loc_67E8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 65AA
authority endp



; Attributes: bp-based frame

; int __cdecl userinfo(ctx *c)
public userinfo
userinfo proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_6990
mov     [rbp+i], 0

loc_682B:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_691B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_6876
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unreserved
mov     [rbp+state], al

loc_6876:
cmp     [rbp+state], 0
jnz     loc_691A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_68A9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pct_encoded
mov     [rbp+state], al

loc_68A9:
cmp     [rbp+state], 0
jnz     short loc_691A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_68D8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al

loc_68D8:
cmp     [rbp+state], 0
jnz     short loc_691A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6907
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6907:
cmp     [rbp+state], 0
jnz     short loc_691A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_691B

loc_691A:
nop

loc_691B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6968
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6968:
cmp     [rbp+state], 0
jnz     short loc_6987
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_6990

loc_6987:
add     [rbp+i], 1
jmp     loc_682B

loc_6990:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_69E8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2834 ; "userinfo"
mov     rdi, rax
mov     eax, 0
call    r9

loc_69E8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 67EE
userinfo endp



; Attributes: bp-based frame

; int __cdecl host(ctx *c)
public host
host proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_6A34
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IP_literal
mov     [rbp+state], al

loc_6A34:
cmp     [rbp+state], 0
jnz     short loc_6A94
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6A63
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IPv4address
mov     [rbp+state], al

loc_6A63:
cmp     [rbp+state], 0
jnz     short loc_6A97
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6A98
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    reg_name
mov     [rbp+state], al
jmp     short loc_6A98

loc_6A94:
nop
jmp     short loc_6A98

loc_6A97:
nop

loc_6A98:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6AF0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2847 ; "host"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6AF0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 69EE
host endp



; Attributes: bp-based frame

; int __cdecl port(ctx *c)
public port
port proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_6B74
mov     [rbp+i], 0

loc_6B2F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_6B4F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_6B4F:
cmp     [rbp+state], 0
jnz     short loc_6B6E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_6B74

loc_6B6E:
add     [rbp+i], 1
jmp     short loc_6B2F

loc_6B74:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6BCC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2857 ; "port"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6BCC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 6AF6
port endp



; Attributes: bp-based frame

; int __cdecl IP_literal(ctx *c)
public IP_literal
IP_literal proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_6C18
mov     rax, [rbp+c]
mov     esi, 5Bh ; '['  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6C18:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_6C9A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_6C54
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IPv6address
mov     [rbp+state], al

loc_6C54:
cmp     [rbp+state], 0
jnz     short loc_6C96
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6C83
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IPvFuture
mov     [rbp+state], al

loc_6C83:
cmp     [rbp+state], 0
jnz     short loc_6C99
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_6C9A

loc_6C96:
nop
jmp     short loc_6C9A

loc_6C99:
nop

loc_6C9A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6CE7
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6CE7:
cmp     [rbp+state], 0
jz      short loc_6D01
mov     rax, [rbp+c]
mov     esi, 5Dh ; ']'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6D01:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6D59
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2869 ; "IP_literal"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6D59:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 6BD2
IP_literal endp



; Attributes: bp-based frame

; int __cdecl IPvFuture(ctx *c)
public IPvFuture
IPvFuture proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_6DA5
mov     rax, [rbp+c]
mov     esi, 56h ; 'V'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6DA5:
cmp     [rbp+state], 0
jz      short loc_6DF6
mov     [rbp+i], 0

loc_6DB2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_6DD2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __hexdig
mov     [rbp+state], al

loc_6DD2:
cmp     [rbp+state], 0
jnz     short loc_6DF0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_6DF6

loc_6DF0:
add     [rbp+i], 1
jmp     short loc_6DB2

loc_6DF6:
cmp     [rbp+state], 0
jz      short loc_6E10
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6E10:
cmp     [rbp+state], 0
jz      loc_6F52
mov     [rbp+i_0], 0

loc_6E21:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_6EDE
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_6E6C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unreserved
mov     [rbp+state], al

loc_6E6C:
cmp     [rbp+state], 0
jnz     short loc_6EDD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6E9B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al

loc_6E9B:
cmp     [rbp+state], 0
jnz     short loc_6EDD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_6ECA
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_6ECA:
cmp     [rbp+state], 0
jnz     short loc_6EDD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_6EDE

loc_6EDD:
nop

loc_6EDE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6F2B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6F2B:
cmp     [rbp+state], 0
jnz     short loc_6F49
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
cmp     [rbp+i_0], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_6F52

loc_6F49:
add     [rbp+i_0], 1
jmp     loc_6E21

loc_6F52:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_6FAA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___2887 ; "IPvFuture"
mov     rdi, rax
mov     eax, 0
call    r9

loc_6FAA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 6D5F
IPvFuture endp



; Attributes: bp-based frame

; int __cdecl IPv6address(ctx *c)
public IPv6address
IPv6address proc near

c= qword ptr -148h
save_28= qword ptr -140h
save_27= qword ptr -138h
save_26= qword ptr -130h
save_25= qword ptr -128h
save_24= qword ptr -120h
save_23= qword ptr -118h
save_22= qword ptr -110h
save_21= qword ptr -108h
save_20= qword ptr -100h
save_19= qword ptr -0F8h
save_18= qword ptr -0F0h
save_17= qword ptr -0E8h
save_16= qword ptr -0E0h
save_15= qword ptr -0D8h
save_14= qword ptr -0D0h
save_13= qword ptr -0C8h
save_12= qword ptr -0C0h
save_11= qword ptr -0B8h
save_10= qword ptr -0B0h
save_9= qword ptr -0A8h
save_8= qword ptr -0A0h
save_7= qword ptr -98h
save_6= qword ptr -90h
save_5= qword ptr -88h
save_4= qword ptr -80h
save_3= qword ptr -78h
save_2= qword ptr -70h
save_1= qword ptr -68h
save_0= qword ptr -60h
save= qword ptr -58h
i_16= dword ptr -4Ch
i_15= dword ptr -48h
i_14= dword ptr -44h
i_13= dword ptr -40h
i_12= dword ptr -3Ch
i_11= dword ptr -38h
i_10= dword ptr -34h
i_9= dword ptr -30h
i_8= dword ptr -2Ch
i_7= dword ptr -28h
i_6= dword ptr -24h
i_5= dword ptr -20h
i_4= dword ptr -1Ch
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 150h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_7126
mov     [rbp+i], 0
jmp     loc_7101

loc_7001:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_708B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_7057
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7057:
cmp     [rbp+state], 0
jz      short loc_7074
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7074:
cmp     [rbp+state], 0
jnz     short loc_708A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_708B

loc_708A:
nop

loc_708B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_70E7
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_70E7:
cmp     [rbp+state], 0
jnz     short loc_70FD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_710B

loc_70FD:
add     [rbp+i], 1

loc_7101:
cmp     [rbp+i], 5
jle     loc_7001

loc_710B:
cmp     [rbp+i], 5
jle     short loc_711E
cmp     [rbp+i], 6
jg      short loc_711E
mov     eax, 1
jmp     short loc_7123

loc_711E:
mov     eax, 0

loc_7123:
mov     [rbp+state], al

loc_7126:
cmp     [rbp+state], 0
jz      short loc_7143
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_7143:
cmp     [rbp+state], 0
jnz     loc_8711
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_717E
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_717E:
cmp     [rbp+state], 0
jz      loc_72B9
mov     [rbp+i_0], 0
jmp     loc_7294

loc_7194:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_721E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_71EA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_71EA:
cmp     [rbp+state], 0
jz      short loc_7207
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7207:
cmp     [rbp+state], 0
jnz     short loc_721D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_721E

loc_721D:
nop

loc_721E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_727A
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_727A:
cmp     [rbp+state], 0
jnz     short loc_7290
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_729E

loc_7290:
add     [rbp+i_0], 1

loc_7294:
cmp     [rbp+i_0], 4
jle     loc_7194

loc_729E:
cmp     [rbp+i_0], 4
jle     short loc_72B1
cmp     [rbp+i_0], 5
jg      short loc_72B1
mov     eax, 1
jmp     short loc_72B6

loc_72B1:
mov     eax, 0

loc_72B6:
mov     [rbp+state], al

loc_72B9:
cmp     [rbp+state], 0
jz      short loc_72D6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_72D6:
cmp     [rbp+state], 0
jnz     loc_8714
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_73C6
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_7361

loc_731C:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_7347
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7347:
cmp     [rbp+state], 0
jnz     short loc_735D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_7367

loc_735D:
add     [rbp+i_1], 1

loc_7361:
cmp     [rbp+i_1], 0
jle     short loc_731C

loc_7367:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_73C6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_73C6:
cmp     [rbp+state], 0
jz      short loc_73E5
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_73E5:
cmp     [rbp+state], 0
jz      loc_752F
mov     [rbp+i_2], 0
jmp     loc_750A

loc_73FB:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_748E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_7457
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7457:
cmp     [rbp+state], 0
jz      short loc_7474
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7474:
cmp     [rbp+state], 0
jnz     short loc_748D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_748E

loc_748D:
nop

loc_748E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_74ED
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_5]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_74ED:
cmp     [rbp+state], 0
jnz     short loc_7506
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_7514

loc_7506:
add     [rbp+i_2], 1

loc_750A:
cmp     [rbp+i_2], 3
jle     loc_73FB

loc_7514:
cmp     [rbp+i_2], 3
jle     short loc_7527
cmp     [rbp+i_2], 4
jg      short loc_7527
mov     eax, 1
jmp     short loc_752C

loc_7527:
mov     eax, 0

loc_752C:
mov     [rbp+state], al

loc_752F:
cmp     [rbp+state], 0
jz      short loc_754C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_754C:
cmp     [rbp+state], 0
jnz     loc_8717
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_7793
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     loc_772A

loc_7595:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_75C3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_75C3:
cmp     [rbp+state], 0
jz      loc_770D
mov     [rbp+i_4], 0
jmp     loc_76E8

loc_75D9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_766C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_9], rax
cmp     [rbp+state], 0
jz      short loc_7635
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7635:
cmp     [rbp+state], 0
jz      short loc_7652
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7652:
cmp     [rbp+state], 0
jnz     short loc_766B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_9]
mov     [rax], rdx
jmp     short loc_766C

loc_766B:
nop

loc_766C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_76CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_8]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_76CB:
cmp     [rbp+state], 0
jnz     short loc_76E4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_76F2

loc_76E4:
add     [rbp+i_4], 1

loc_76E8:
cmp     [rbp+i_4], 0
jle     loc_75D9

loc_76F2:
cmp     [rbp+i_4], 0
js      short loc_7705
cmp     [rbp+i_4], 1
jg      short loc_7705
mov     eax, 1
jmp     short loc_770A

loc_7705:
mov     eax, 0

loc_770A:
mov     [rbp+state], al

loc_770D:
cmp     [rbp+state], 0
jnz     short loc_7726
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_7734

loc_7726:
add     [rbp+i_3], 1

loc_772A:
cmp     [rbp+i_3], 0
jle     loc_7595

loc_7734:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7793
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7793:
cmp     [rbp+state], 0
jz      short loc_77B2
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_77B2:
cmp     [rbp+state], 0
jz      loc_78FC
mov     [rbp+i_5], 0
jmp     loc_78D7

loc_77C8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_10], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_785B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_11], rax
cmp     [rbp+state], 0
jz      short loc_7824
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7824:
cmp     [rbp+state], 0
jz      short loc_7841
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7841:
cmp     [rbp+state], 0
jnz     short loc_785A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_11]
mov     [rax], rdx
jmp     short loc_785B

loc_785A:
nop

loc_785B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_78BA
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_10]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_78BA:
cmp     [rbp+state], 0
jnz     short loc_78D3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_10]
mov     [rax], rdx
jmp     short loc_78E1

loc_78D3:
add     [rbp+i_5], 1

loc_78D7:
cmp     [rbp+i_5], 2
jle     loc_77C8

loc_78E1:
cmp     [rbp+i_5], 2
jle     short loc_78F4
cmp     [rbp+i_5], 3
jg      short loc_78F4
mov     eax, 1
jmp     short loc_78F9

loc_78F4:
mov     eax, 0

loc_78F9:
mov     [rbp+state], al

loc_78FC:
cmp     [rbp+state], 0
jz      short loc_7919
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_7919:
cmp     [rbp+state], 0
jnz     loc_871A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_7B60
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_6], 0
jmp     loc_7AF7

loc_7962:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_12], rax
cmp     [rbp+state], 0
jz      short loc_7990
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7990:
cmp     [rbp+state], 0
jz      loc_7ADA
mov     [rbp+i_7], 0
jmp     loc_7AB5

loc_79A6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_13], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_7A39
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_14], rax
cmp     [rbp+state], 0
jz      short loc_7A02
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7A02:
cmp     [rbp+state], 0
jz      short loc_7A1F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7A1F:
cmp     [rbp+state], 0
jnz     short loc_7A38
mov     rax, [rbp+c]
mov     rdx, [rbp+save_14]
mov     [rax], rdx
jmp     short loc_7A39

loc_7A38:
nop

loc_7A39:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7A98
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_13]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7A98:
cmp     [rbp+state], 0
jnz     short loc_7AB1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_13]
mov     [rax], rdx
jmp     short loc_7ABF

loc_7AB1:
add     [rbp+i_7], 1

loc_7AB5:
cmp     [rbp+i_7], 1
jle     loc_79A6

loc_7ABF:
cmp     [rbp+i_7], 0
js      short loc_7AD2
cmp     [rbp+i_7], 2
jg      short loc_7AD2
mov     eax, 1
jmp     short loc_7AD7

loc_7AD2:
mov     eax, 0

loc_7AD7:
mov     [rbp+state], al

loc_7ADA:
cmp     [rbp+state], 0
jnz     short loc_7AF3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_12]
mov     [rax], rdx
jmp     short loc_7B01

loc_7AF3:
add     [rbp+i_6], 1

loc_7AF7:
cmp     [rbp+i_6], 0
jle     loc_7962

loc_7B01:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7B60
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_6]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7B60:
cmp     [rbp+state], 0
jz      short loc_7B7F
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_7B7F:
cmp     [rbp+state], 0
jz      loc_7CC9
mov     [rbp+i_8], 0
jmp     loc_7CA4

loc_7B95:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_15], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_7C28
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_16], rax
cmp     [rbp+state], 0
jz      short loc_7BF1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7BF1:
cmp     [rbp+state], 0
jz      short loc_7C0E
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7C0E:
cmp     [rbp+state], 0
jnz     short loc_7C27
mov     rax, [rbp+c]
mov     rdx, [rbp+save_16]
mov     [rax], rdx
jmp     short loc_7C28

loc_7C27:
nop

loc_7C28:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7C87
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_15]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7C87:
cmp     [rbp+state], 0
jnz     short loc_7CA0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_15]
mov     [rax], rdx
jmp     short loc_7CAE

loc_7CA0:
add     [rbp+i_8], 1

loc_7CA4:
cmp     [rbp+i_8], 1
jle     loc_7B95

loc_7CAE:
cmp     [rbp+i_8], 1
jle     short loc_7CC1
cmp     [rbp+i_8], 2
jg      short loc_7CC1
mov     eax, 1
jmp     short loc_7CC6

loc_7CC1:
mov     eax, 0

loc_7CC6:
mov     [rbp+state], al

loc_7CC9:
cmp     [rbp+state], 0
jz      short loc_7CE6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_7CE6:
cmp     [rbp+state], 0
jnz     loc_871D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_7F2D
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_9], 0
jmp     loc_7EC4

loc_7D2F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_17], rax
cmp     [rbp+state], 0
jz      short loc_7D5D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7D5D:
cmp     [rbp+state], 0
jz      loc_7EA7
mov     [rbp+i_10], 0
jmp     loc_7E82

loc_7D73:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_18], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_7E06
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_19], rax
cmp     [rbp+state], 0
jz      short loc_7DCF
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7DCF:
cmp     [rbp+state], 0
jz      short loc_7DEC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7DEC:
cmp     [rbp+state], 0
jnz     short loc_7E05
mov     rax, [rbp+c]
mov     rdx, [rbp+save_19]
mov     [rax], rdx
jmp     short loc_7E06

loc_7E05:
nop

loc_7E06:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7E65
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_18]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7E65:
cmp     [rbp+state], 0
jnz     short loc_7E7E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_18]
mov     [rax], rdx
jmp     short loc_7E8C

loc_7E7E:
add     [rbp+i_10], 1

loc_7E82:
cmp     [rbp+i_10], 2
jle     loc_7D73

loc_7E8C:
cmp     [rbp+i_10], 0
js      short loc_7E9F
cmp     [rbp+i_10], 3
jg      short loc_7E9F
mov     eax, 1
jmp     short loc_7EA4

loc_7E9F:
mov     eax, 0

loc_7EA4:
mov     [rbp+state], al

loc_7EA7:
cmp     [rbp+state], 0
jnz     short loc_7EC0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_17]
mov     [rax], rdx
jmp     short loc_7ECE

loc_7EC0:
add     [rbp+i_9], 1

loc_7EC4:
cmp     [rbp+i_9], 0
jle     loc_7D2F

loc_7ECE:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_7F2D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_9]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_7F2D:
cmp     [rbp+state], 0
jz      short loc_7F4C
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_7F4C:
cmp     [rbp+state], 0
jz      short loc_7F69
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_7F69:
cmp     [rbp+state], 0
jz      short loc_7F86
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_7F86:
cmp     [rbp+state], 0
jz      short loc_7FA3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_7FA3:
cmp     [rbp+state], 0
jnz     loc_8720
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_81EA
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_11], 0
jmp     loc_8181

loc_7FEC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_20], rax
cmp     [rbp+state], 0
jz      short loc_801A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_801A:
cmp     [rbp+state], 0
jz      loc_8164
mov     [rbp+i_12], 0
jmp     loc_813F

loc_8030:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_21], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_80C3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_22], rax
cmp     [rbp+state], 0
jz      short loc_808C
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_808C:
cmp     [rbp+state], 0
jz      short loc_80A9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_80A9:
cmp     [rbp+state], 0
jnz     short loc_80C2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_22]
mov     [rax], rdx
jmp     short loc_80C3

loc_80C2:
nop

loc_80C3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8122
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_21]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8122:
cmp     [rbp+state], 0
jnz     short loc_813B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_21]
mov     [rax], rdx
jmp     short loc_8149

loc_813B:
add     [rbp+i_12], 1

loc_813F:
cmp     [rbp+i_12], 3
jle     loc_8030

loc_8149:
cmp     [rbp+i_12], 0
js      short loc_815C
cmp     [rbp+i_12], 4
jg      short loc_815C
mov     eax, 1
jmp     short loc_8161

loc_815C:
mov     eax, 0

loc_8161:
mov     [rbp+state], al

loc_8164:
cmp     [rbp+state], 0
jnz     short loc_817D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_20]
mov     [rax], rdx
jmp     short loc_818B

loc_817D:
add     [rbp+i_11], 1

loc_8181:
cmp     [rbp+i_11], 0
jle     loc_7FEC

loc_818B:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_81EA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_11]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_81EA:
cmp     [rbp+state], 0
jz      short loc_8209
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_8209:
cmp     [rbp+state], 0
jz      short loc_8226
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ls32
mov     [rbp+state], al

loc_8226:
cmp     [rbp+state], 0
jnz     loc_8723
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_846D
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_13], 0
jmp     loc_8404

loc_826F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_23], rax
cmp     [rbp+state], 0
jz      short loc_829D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_829D:
cmp     [rbp+state], 0
jz      loc_83E7
mov     [rbp+i_14], 0
jmp     loc_83C2

loc_82B3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_24], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_8346
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_25], rax
cmp     [rbp+state], 0
jz      short loc_830F
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_830F:
cmp     [rbp+state], 0
jz      short loc_832C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_832C:
cmp     [rbp+state], 0
jnz     short loc_8345
mov     rax, [rbp+c]
mov     rdx, [rbp+save_25]
mov     [rax], rdx
jmp     short loc_8346

loc_8345:
nop

loc_8346:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_83A5
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_24]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_83A5:
cmp     [rbp+state], 0
jnz     short loc_83BE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_24]
mov     [rax], rdx
jmp     short loc_83CC

loc_83BE:
add     [rbp+i_14], 1

loc_83C2:
cmp     [rbp+i_14], 4
jle     loc_82B3

loc_83CC:
cmp     [rbp+i_14], 0
js      short loc_83DF
cmp     [rbp+i_14], 5
jg      short loc_83DF
mov     eax, 1
jmp     short loc_83E4

loc_83DF:
mov     eax, 0

loc_83E4:
mov     [rbp+state], al

loc_83E7:
cmp     [rbp+state], 0
jnz     short loc_8400
mov     rax, [rbp+c]
mov     rdx, [rbp+save_23]
mov     [rax], rdx
jmp     short loc_840E

loc_8400:
add     [rbp+i_13], 1

loc_8404:
cmp     [rbp+i_13], 0
jle     loc_826F

loc_840E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_846D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_13]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_846D:
cmp     [rbp+state], 0
jz      short loc_848C
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_848C:
cmp     [rbp+state], 0
jz      short loc_84A9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_84A9:
cmp     [rbp+state], 0
jnz     loc_8726
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_86F0
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_15], 0
jmp     loc_8687

loc_84F2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_26], rax
cmp     [rbp+state], 0
jz      short loc_8520
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_8520:
cmp     [rbp+state], 0
jz      loc_866A
mov     [rbp+i_16], 0
jmp     loc_8645

loc_8536:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_27], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_85C9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_28], rax
cmp     [rbp+state], 0
jz      short loc_8592
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8592:
cmp     [rbp+state], 0
jz      short loc_85AF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    h16
mov     [rbp+state], al

loc_85AF:
cmp     [rbp+state], 0
jnz     short loc_85C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_28]
mov     [rax], rdx
jmp     short loc_85C9

loc_85C8:
nop

loc_85C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8628
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_27]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8628:
cmp     [rbp+state], 0
jnz     short loc_8641
mov     rax, [rbp+c]
mov     rdx, [rbp+save_27]
mov     [rax], rdx
jmp     short loc_864F

loc_8641:
add     [rbp+i_16], 1

loc_8645:
cmp     [rbp+i_16], 5
jle     loc_8536

loc_864F:
cmp     [rbp+i_16], 0
js      short loc_8662
cmp     [rbp+i_16], 6
jg      short loc_8662
mov     eax, 1
jmp     short loc_8667

loc_8662:
mov     eax, 0

loc_8667:
mov     [rbp+state], al

loc_866A:
cmp     [rbp+state], 0
jnz     short loc_8683
mov     rax, [rbp+c]
mov     rdx, [rbp+save_26]
mov     [rax], rdx
jmp     short loc_8691

loc_8683:
add     [rbp+i_15], 1

loc_8687:
cmp     [rbp+i_15], 0
jle     loc_84F2

loc_8691:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_86F0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_15]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_86F0:
cmp     [rbp+state], 0
jz      short loc_8727
mov     rax, [rbp+c]
lea     rsi, asc_24014  ; "::"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al
jmp     short loc_8727

loc_8711:
nop
jmp     short loc_8727

loc_8714:
nop
jmp     short loc_8727

loc_8717:
nop
jmp     short loc_8727

loc_871A:
nop
jmp     short loc_8727

loc_871D:
nop
jmp     short loc_8727

loc_8720:
nop
jmp     short loc_8727

loc_8723:
nop
jmp     short loc_8727

loc_8726:
nop

loc_8727:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8791
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3035 ; "IPv6address"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8791:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 6FB0
IPv6address endp



; Attributes: bp-based frame

; int __cdecl h16(ctx *c)
public h16
h16 proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_882A
mov     [rbp+i], 0
jmp     short loc_8809

loc_87D2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_87F2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __hexdig
mov     [rbp+state], al

loc_87F2:
cmp     [rbp+state], 0
jnz     short loc_8805
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_880F

loc_8805:
add     [rbp+i], 1

loc_8809:
cmp     [rbp+i], 3
jle     short loc_87D2

loc_880F:
cmp     [rbp+i], 0
jle     short loc_8822
cmp     [rbp+i], 4
jg      short loc_8822
mov     eax, 1
jmp     short loc_8827

loc_8822:
mov     eax, 0

loc_8827:
mov     [rbp+state], al

loc_882A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8882
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3046 ; "h16"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8882:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8797
h16 endp



; Attributes: bp-based frame

; int __cdecl ls32(ctx *c)
public ls32
ls32 proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_892E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_88EB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    h16
mov     [rbp+state], al

loc_88EB:
cmp     [rbp+state], 0
jz      short loc_8905
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8905:
cmp     [rbp+state], 0
jz      short loc_891A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    h16
mov     [rbp+state], al

loc_891A:
cmp     [rbp+state], 0
jnz     short loc_892D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_892E

loc_892D:
nop

loc_892E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_897B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_897B:
cmp     [rbp+state], 0
jnz     short loc_89AC
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_89AD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IPv4address
mov     [rbp+state], al
jmp     short loc_89AD

loc_89AC:
nop

loc_89AD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8A05
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3056 ; "ls32"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8A05:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8888
ls32 endp



; Attributes: bp-based frame

; int __cdecl IPv4address(ctx *c)
public IPv4address
IPv4address proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_8A51
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    dec_octet
mov     [rbp+state], al

loc_8A51:
cmp     [rbp+state], 0
jz      short loc_8A6B
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8A6B:
cmp     [rbp+state], 0
jz      short loc_8A85
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    dec_octet
mov     [rbp+state], al

loc_8A85:
cmp     [rbp+state], 0
jz      short loc_8A9F
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8A9F:
cmp     [rbp+state], 0
jz      short loc_8AB9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    dec_octet
mov     [rbp+state], al

loc_8AB9:
cmp     [rbp+state], 0
jz      short loc_8AD3
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8AD3:
cmp     [rbp+state], 0
jz      short loc_8AED
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    dec_octet
mov     [rbp+state], al

loc_8AED:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8B45
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3067 ; "IPv4address"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8B45:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8A0B
IPv4address endp



; Attributes: bp-based frame

; int __cdecl dec_octet(ctx *c)
public dec_octet
dec_octet proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_8B93
mov     rax, [rbp+c]
lea     rsi, a25        ; "25"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_8B93:
cmp     [rbp+state], 0
jz      short loc_8BB2
mov     rax, [rbp+c]
mov     edx, 35h ; '5'  ; y
mov     esi, 30h ; '0'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_8BB2:
cmp     [rbp+state], 0
jnz     loc_8D28
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8BE5
mov     rax, [rbp+c]
mov     esi, 32h ; '2'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8BE5:
cmp     [rbp+state], 0
jz      short loc_8C04
mov     rax, [rbp+c]
mov     edx, 34h ; '4'  ; y
mov     esi, 30h ; '0'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_8C04:
cmp     [rbp+state], 0
jz      short loc_8C19
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_8C19:
cmp     [rbp+state], 0
jnz     loc_8D2B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8C4C
mov     rax, [rbp+c]
mov     esi, 31h ; '1'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_8C4C:
cmp     [rbp+state], 0
jz      short loc_8CB3
mov     [rbp+i], 0
jmp     short loc_8C92

loc_8C5B:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_8C7B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_8C7B:
cmp     [rbp+state], 0
jnz     short loc_8C8E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_8C98

loc_8C8E:
add     [rbp+i], 1

loc_8C92:
cmp     [rbp+i], 1
jle     short loc_8C5B

loc_8C98:
cmp     [rbp+i], 1
jle     short loc_8CAB
cmp     [rbp+i], 2
jg      short loc_8CAB
mov     eax, 1
jmp     short loc_8CB0

loc_8CAB:
mov     eax, 0

loc_8CB0:
mov     [rbp+state], al

loc_8CB3:
cmp     [rbp+state], 0
jnz     short loc_8D2E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8CE7
mov     rax, [rbp+c]
mov     edx, 39h ; '9'  ; y
mov     esi, 31h ; '1'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_8CE7:
cmp     [rbp+state], 0
jz      short loc_8CFC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_8CFC:
cmp     [rbp+state], 0
jnz     short loc_8D31
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8D32
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al
jmp     short loc_8D32

loc_8D28:
nop
jmp     short loc_8D32

loc_8D2B:
nop
jmp     short loc_8D32

loc_8D2E:
nop
jmp     short loc_8D32

loc_8D31:
nop

loc_8D32:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8D8A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3079 ; "dec_octet"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8D8A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8B4B
dec_octet endp



; Attributes: bp-based frame

; int __cdecl reg_name(ctx *c)
public reg_name
reg_name proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_8EFF
mov     [rbp+i], 0

loc_8DCD:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_8E8A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_8E18
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unreserved
mov     [rbp+state], al

loc_8E18:
cmp     [rbp+state], 0
jnz     short loc_8E89
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8E47
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pct_encoded
mov     [rbp+state], al

loc_8E47:
cmp     [rbp+state], 0
jnz     short loc_8E89
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8E76
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al

loc_8E76:
cmp     [rbp+state], 0
jnz     short loc_8E89
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_8E8A

loc_8E89:
nop

loc_8E8A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8ED7
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8ED7:
cmp     [rbp+state], 0
jnz     short loc_8EF6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_8EFF

loc_8EF6:
add     [rbp+i], 1
jmp     loc_8DCD

loc_8EFF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_8F57
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3094 ; "reg_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_8F57:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8D90
reg_name endp



; Attributes: bp-based frame

; int __cdecl path(ctx *c)
public path
path proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_8FA3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_abempty
mov     [rbp+state], al

loc_8FA3:
cmp     [rbp+state], 0
jnz     loc_9069
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_8FD6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_absolute
mov     [rbp+state], al

loc_8FD6:
cmp     [rbp+state], 0
jnz     loc_906C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9009
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_noscheme
mov     [rbp+state], al

loc_9009:
cmp     [rbp+state], 0
jnz     short loc_906F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9038
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_rootless
mov     [rbp+state], al

loc_9038:
cmp     [rbp+state], 0
jnz     short loc_9072
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9073
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    path_empty
mov     [rbp+state], al
jmp     short loc_9073

loc_9069:
nop
jmp     short loc_9073

loc_906C:
nop
jmp     short loc_9073

loc_906F:
nop
jmp     short loc_9073

loc_9072:
nop

loc_9073:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_90CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3106 ; "path"
mov     rdi, rax
mov     eax, 0
call    r9

loc_90CB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 8F5D
path endp



; Attributes: bp-based frame

; int __cdecl path_abempty(ctx *c)
public path_abempty
path_abempty proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_91F8
mov     [rbp+i], 0

loc_910E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_9183
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_9155
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9155:
cmp     [rbp+state], 0
jz      short loc_916F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment
mov     [rbp+state], al

loc_916F:
cmp     [rbp+state], 0
jnz     short loc_9182
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_9183

loc_9182:
nop

loc_9183:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_91D0
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_91D0:
cmp     [rbp+state], 0
jnz     short loc_91EF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_91F8

loc_91EF:
add     [rbp+i], 1
jmp     loc_910E

loc_91F8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9250
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3120 ; "path_abempty"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9250:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 90D1
path_abempty endp



; Attributes: bp-based frame

; int __cdecl path_absolute(ctx *c)
public path_absolute
path_absolute proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_929C
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_929C:
cmp     [rbp+state], 0
jz      loc_9454
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_93FA

loc_92C3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_92E8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment_nz
mov     [rbp+state], al

loc_92E8:
cmp     [rbp+state], 0
jz      loc_93E3
mov     [rbp+i_0], 0

loc_92F9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_936E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_9340
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9340:
cmp     [rbp+state], 0
jz      short loc_935A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment
mov     [rbp+state], al

loc_935A:
cmp     [rbp+state], 0
jnz     short loc_936D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_936E

loc_936D:
nop

loc_936E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_93BB
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_93BB:
cmp     [rbp+state], 0
jnz     short loc_93DA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_93E3

loc_93DA:
add     [rbp+i_0], 1
jmp     loc_92F9

loc_93E3:
cmp     [rbp+state], 0
jnz     short loc_93F6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_9404

loc_93F6:
add     [rbp+i], 1

loc_93FA:
cmp     [rbp+i], 0
jle     loc_92C3

loc_9404:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9454
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9454:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_94AC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3140 ; "path_absolute"
mov     rdi, rax
mov     eax, 0
call    r9

loc_94AC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9256
path_absolute endp



; Attributes: bp-based frame

; int __cdecl path_noscheme(ctx *c)
public path_noscheme
path_noscheme proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_94F8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment_nz_nc
mov     [rbp+state], al

loc_94F8:
cmp     [rbp+state], 0
jz      loc_95F3
mov     [rbp+i], 0

loc_9509:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_957E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_9550
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9550:
cmp     [rbp+state], 0
jz      short loc_956A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment
mov     [rbp+state], al

loc_956A:
cmp     [rbp+state], 0
jnz     short loc_957D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_957E

loc_957D:
nop

loc_957E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_95CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_95CB:
cmp     [rbp+state], 0
jnz     short loc_95EA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_95F3

loc_95EA:
add     [rbp+i], 1
jmp     loc_9509

loc_95F3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_964B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3155 ; "path_noscheme"
mov     rdi, rax
mov     eax, 0
call    r9

loc_964B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 94B2
path_noscheme endp



; Attributes: bp-based frame

; int __cdecl path_rootless(ctx *c)
public path_rootless
path_rootless proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_9697
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment_nz
mov     [rbp+state], al

loc_9697:
cmp     [rbp+state], 0
jz      loc_9792
mov     [rbp+i], 0

loc_96A8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_971D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_96EF
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_96EF:
cmp     [rbp+state], 0
jz      short loc_9709
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    segment
mov     [rbp+state], al

loc_9709:
cmp     [rbp+state], 0
jnz     short loc_971C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_971D

loc_971C:
nop

loc_971D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_976A
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_976A:
cmp     [rbp+state], 0
jnz     short loc_9789
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_9792

loc_9789:
add     [rbp+i], 1
jmp     loc_96A8

loc_9792:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_97EA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3169 ; "path_rootless"
mov     rdi, rax
mov     eax, 0
call    r9

loc_97EA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9651
path_rootless endp



; Attributes: bp-based frame

; int __cdecl path_empty(ctx *c)
public path_empty
path_empty proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_9838
mov     rax, [rbp+c]
lea     rsi, byte_2401A ; s
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_9838:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9890
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3175 ; "path_empty"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9890:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 97F0
path_empty endp



; Attributes: bp-based frame

; int __cdecl segment(ctx *c)
public segment
segment proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_9919
mov     [rbp+i], 0

loc_98CF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_98F4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pchar
mov     [rbp+state], al

loc_98F4:
cmp     [rbp+state], 0
jnz     short loc_9913
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_9919

loc_9913:
add     [rbp+i], 1
jmp     short loc_98CF

loc_9919:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9971
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3187 ; "segment"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9971:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9896
segment endp



; Attributes: bp-based frame

; int __cdecl segment_nz(ctx *c)
public segment_nz
segment_nz proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_99F9
mov     [rbp+i], 0

loc_99B0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_99D5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pchar
mov     [rbp+state], al

loc_99D5:
cmp     [rbp+state], 0
jnz     short loc_99F3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_99F9

loc_99F3:
add     [rbp+i], 1
jmp     short loc_99B0

loc_99F9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9A51
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3198 ; "segment_nz"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9A51:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9977
segment_nz endp



; Attributes: bp-based frame

; int __cdecl segment_nz_nc(ctx *c)
public segment_nz_nc
segment_nz_nc proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_9BF8
mov     [rbp+i], 0

loc_9A94:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_9B84
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_9ADF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unreserved
mov     [rbp+state], al

loc_9ADF:
cmp     [rbp+state], 0
jnz     loc_9B83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9B12
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pct_encoded
mov     [rbp+state], al

loc_9B12:
cmp     [rbp+state], 0
jnz     short loc_9B83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9B41
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al

loc_9B41:
cmp     [rbp+state], 0
jnz     short loc_9B83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9B70
mov     rax, [rbp+c]
mov     esi, 40h ; '@'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9B70:
cmp     [rbp+state], 0
jnz     short loc_9B83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_9B84

loc_9B83:
nop

loc_9B84:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9BD1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9BD1:
cmp     [rbp+state], 0
jnz     short loc_9BEF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_9BF8

loc_9BEF:
add     [rbp+i], 1
jmp     loc_9A94

loc_9BF8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9C50
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3213 ; "segment_nz_nc"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9C50:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9A57
segment_nz_nc endp



; Attributes: bp-based frame

; int __cdecl pchar(ctx *c)
public pchar
pchar proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_9C9C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unreserved
mov     [rbp+state], al

loc_9C9C:
cmp     [rbp+state], 0
jnz     loc_9D62
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9CCF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pct_encoded
mov     [rbp+state], al

loc_9CCF:
cmp     [rbp+state], 0
jnz     loc_9D65
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9D02
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al

loc_9D02:
cmp     [rbp+state], 0
jnz     short loc_9D68
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9D31
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9D31:
cmp     [rbp+state], 0
jnz     short loc_9D6B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9D6C
mov     rax, [rbp+c]
mov     esi, 40h ; '@'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_9D6C

loc_9D62:
nop
jmp     short loc_9D6C

loc_9D65:
nop
jmp     short loc_9D6C

loc_9D68:
nop
jmp     short loc_9D6C

loc_9D6B:
nop

loc_9D6C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9DC4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3223 ; "pchar"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9DC4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9C56
pchar endp



; Attributes: bp-based frame

; int __cdecl query(ctx *c)
public query
query proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_9F34
mov     [rbp+i], 0

loc_9E07:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_9EBF
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_9E4D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    pchar
mov     [rbp+state], al

loc_9E4D:
cmp     [rbp+state], 0
jnz     short loc_9EBE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9E7C
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9E7C:
cmp     [rbp+state], 0
jnz     short loc_9EBE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_9EAB
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_9EAB:
cmp     [rbp+state], 0
jnz     short loc_9EBE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_9EBF

loc_9EBE:
nop

loc_9EBF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9F0C
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9F0C:
cmp     [rbp+state], 0
jnz     short loc_9F2B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_9F34

loc_9F2B:
add     [rbp+i], 1
jmp     loc_9E07

loc_9F34:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_9F8C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3235 ; "query"
mov     rdi, rax
mov     eax, 0
call    r9

loc_9F8C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9DCA
query endp



; Attributes: bp-based frame

; int __cdecl fragment(ctx *c)
public fragment
fragment proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_A0FC
mov     [rbp+i], 0

loc_9FCF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_A087
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_A015
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    pchar
mov     [rbp+state], al

loc_A015:
cmp     [rbp+state], 0
jnz     short loc_A086
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A044
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A044:
cmp     [rbp+state], 0
jnz     short loc_A086
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A073
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A073:
cmp     [rbp+state], 0
jnz     short loc_A086
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_A087

loc_A086:
nop

loc_A087:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A0D4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A0D4:
cmp     [rbp+state], 0
jnz     short loc_A0F3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_A0FC

loc_A0F3:
add     [rbp+i], 1
jmp     loc_9FCF

loc_A0FC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A154
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3247 ; "fragment"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A154:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 9F92
fragment endp



; Attributes: bp-based frame

; int __cdecl pct_encoded(ctx *c)
public pct_encoded
pct_encoded proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_A1A0
mov     rax, [rbp+c]
mov     esi, 25h ; '%'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A1A0:
cmp     [rbp+state], 0
jz      short loc_A1B5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __hexdig
mov     [rbp+state], al

loc_A1B5:
cmp     [rbp+state], 0
jz      short loc_A1CA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __hexdig
mov     [rbp+state], al

loc_A1CA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A222
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3253 ; "pct_encoded"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A222:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A15A
pct_encoded endp



; Attributes: bp-based frame

; int __cdecl unreserved(ctx *c)
public unreserved
unreserved proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_A269
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_A269:
cmp     [rbp+state], 0
jnz     loc_A35D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A297
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_A297:
cmp     [rbp+state], 0
jnz     loc_A360
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A2CA
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A2CA:
cmp     [rbp+state], 0
jnz     loc_A363
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A2FD
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A2FD:
cmp     [rbp+state], 0
jnz     short loc_A366
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A32C
mov     rax, [rbp+c]
mov     esi, 5Fh ; '_'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A32C:
cmp     [rbp+state], 0
jnz     short loc_A369
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A36A
mov     rax, [rbp+c]
mov     esi, 7Eh ; '~'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_A36A

loc_A35D:
nop
jmp     short loc_A36A

loc_A360:
nop
jmp     short loc_A36A

loc_A363:
nop
jmp     short loc_A36A

loc_A366:
nop
jmp     short loc_A36A

loc_A369:
nop

loc_A36A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A3C2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3260 ; "unreserved"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A3C2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A228
unreserved endp



; Attributes: bp-based frame

; int __cdecl reserved(ctx *c)
public reserved
reserved proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_A40E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    gen_delims
mov     [rbp+state], al

loc_A40E:
cmp     [rbp+state], 0
jnz     short loc_A43F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A440
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _sub_delims
mov     [rbp+state], al
jmp     short loc_A440

loc_A43F:
nop

loc_A440:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A498
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3270 ; "reserved"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A498:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A3C8
reserved endp



; Attributes: bp-based frame

; int __cdecl gen_delims(ctx *c)
public gen_delims
gen_delims proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_A4E4
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A4E4:
cmp     [rbp+state], 0
jnz     loc_A610
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A517
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A517:
cmp     [rbp+state], 0
jnz     loc_A613
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A54A
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A54A:
cmp     [rbp+state], 0
jnz     loc_A616
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A57D
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A57D:
cmp     [rbp+state], 0
jnz     loc_A619
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A5B0
mov     rax, [rbp+c]
mov     esi, 5Bh ; '['  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A5B0:
cmp     [rbp+state], 0
jnz     short loc_A61C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A5DF
mov     rax, [rbp+c]
mov     esi, 5Dh ; ']'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A5DF:
cmp     [rbp+state], 0
jnz     short loc_A61F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A620
mov     rax, [rbp+c]
mov     esi, 40h ; '@'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_A620

loc_A610:
nop
jmp     short loc_A620

loc_A613:
nop
jmp     short loc_A620

loc_A616:
nop
jmp     short loc_A620

loc_A619:
nop
jmp     short loc_A620

loc_A61C:
nop
jmp     short loc_A620

loc_A61F:
nop

loc_A620:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A678
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3277 ; "gen_delims"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A678:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A49E
gen_delims endp



; Attributes: bp-based frame

; int __cdecl sub_delims(ctx *c)
public _sub_delims
_sub_delims proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_A6C4
mov     rax, [rbp+c]
mov     esi, 21h ; '!'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A6C4:
cmp     [rbp+state], 0
jnz     loc_A8BC
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A6F7
mov     rax, [rbp+c]
mov     esi, 24h ; '$'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A6F7:
cmp     [rbp+state], 0
jnz     loc_A8BF
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A72A
mov     rax, [rbp+c]
mov     esi, 26h ; '&'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A72A:
cmp     [rbp+state], 0
jnz     loc_A8C2
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A75D
mov     rax, [rbp+c]
mov     esi, 27h ; '''  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A75D:
cmp     [rbp+state], 0
jnz     loc_A8C5
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A790
mov     rax, [rbp+c]
mov     esi, 28h ; '('  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A790:
cmp     [rbp+state], 0
jnz     loc_A8C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A7C3
mov     rax, [rbp+c]
mov     esi, 29h ; ')'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A7C3:
cmp     [rbp+state], 0
jnz     loc_A8CB
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A7F6
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A7F6:
cmp     [rbp+state], 0
jnz     loc_A8CE
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A829
mov     rax, [rbp+c]
mov     esi, 2Bh ; '+'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A829:
cmp     [rbp+state], 0
jnz     loc_A8D1
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A85C
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A85C:
cmp     [rbp+state], 0
jnz     short loc_A8D4
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A88B
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_A88B:
cmp     [rbp+state], 0
jnz     short loc_A8D7
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_A8D8
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_A8D8

loc_A8BC:
nop
jmp     short loc_A8D8

loc_A8BF:
nop
jmp     short loc_A8D8

loc_A8C2:
nop
jmp     short loc_A8D8

loc_A8C5:
nop
jmp     short loc_A8D8

loc_A8C8:
nop
jmp     short loc_A8D8

loc_A8CB:
nop
jmp     short loc_A8D8

loc_A8CE:
nop
jmp     short loc_A8D8

loc_A8D1:
nop
jmp     short loc_A8D8

loc_A8D4:
nop
jmp     short loc_A8D8

loc_A8D7:
nop

loc_A8D8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_A930
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3284 ; "sub_delims"
mov     rdi, rax
mov     eax, 0
call    r9

loc_A930:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A67E
_sub_delims endp



; Attributes: bp-based frame

; int __cdecl language_range(ctx *c)
public language_range
language_range proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_AB54
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_A9EF
mov     [rbp+i], 0
jmp     short loc_A9CE

loc_A997:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_A9B7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_A9B7:
cmp     [rbp+state], 0
jnz     short loc_A9CA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_A9D4

loc_A9CA:
add     [rbp+i], 1

loc_A9CE:
cmp     [rbp+i], 7
jle     short loc_A997

loc_A9D4:
cmp     [rbp+i], 0
jle     short loc_A9E7
cmp     [rbp+i], 8
jg      short loc_A9E7
mov     eax, 1
jmp     short loc_A9EC

loc_A9E7:
mov     eax, 0

loc_A9EC:
mov     [rbp+state], al

loc_A9EF:
cmp     [rbp+state], 0
jz      loc_AB40
mov     [rbp+i_0], 0

loc_AA00:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_AACB
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_AA4B
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_AA4B:
cmp     [rbp+state], 0
jz      short loc_AAB7
mov     [rbp+i_1], 0
jmp     short loc_AA96

loc_AA5A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_AA7F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    alphanum
mov     [rbp+state], al

loc_AA7F:
cmp     [rbp+state], 0
jnz     short loc_AA92
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_AA9C

loc_AA92:
add     [rbp+i_1], 1

loc_AA96:
cmp     [rbp+i_1], 7
jle     short loc_AA5A

loc_AA9C:
cmp     [rbp+i_1], 0
jle     short loc_AAAF
cmp     [rbp+i_1], 8
jg      short loc_AAAF
mov     eax, 1
jmp     short loc_AAB4

loc_AAAF:
mov     eax, 0

loc_AAB4:
mov     [rbp+state], al

loc_AAB7:
cmp     [rbp+state], 0
jnz     short loc_AACA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_AACB

loc_AACA:
nop

loc_AACB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_AB18
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_AB18:
cmp     [rbp+state], 0
jnz     short loc_AB37
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_AB40

loc_AB37:
add     [rbp+i_0], 1
jmp     loc_AA00

loc_AB40:
cmp     [rbp+state], 0
jnz     short loc_AB53
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_AB54

loc_AB53:
nop

loc_AB54:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_ABA1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_ABA1:
cmp     [rbp+state], 0
jnz     short loc_ABD2
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_ABD3
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_ABD3

loc_ABD2:
nop

loc_ABD3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_AC2B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3311 ; "language_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_AC2B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at A936
language_range endp



; Attributes: bp-based frame

; int __cdecl alphanum(ctx *c)
public alphanum
alphanum proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_AC72
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_AC72:
cmp     [rbp+state], 0
jnz     short loc_AC9E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_AC9F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al
jmp     short loc_AC9F

loc_AC9E:
nop

loc_AC9F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_ACF7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3318 ; "alphanum"
mov     rdi, rax
mov     eax, 0
call    r9

loc_ACF7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at AC31
alphanum endp



; Attributes: bp-based frame

; int __cdecl Language_Tag(ctx *c)
public Language_Tag
Language_Tag proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_AD43
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    langtag
mov     [rbp+state], al

loc_AD43:
cmp     [rbp+state], 0
jnz     short loc_ADA3
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_AD72
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    privateuse
mov     [rbp+state], al

loc_AD72:
cmp     [rbp+state], 0
jnz     short loc_ADA6
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_ADA7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    grandfathered
mov     [rbp+state], al
jmp     short loc_ADA7

loc_ADA3:
nop
jmp     short loc_ADA7

loc_ADA6:
nop

loc_ADA7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_ADFF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3331 ; "Language_Tag"
mov     rdi, rax
mov     eax, 0
call    r9

loc_ADFF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at ACFD
Language_Tag endp



; Attributes: bp-based frame

; int __cdecl langtag(ctx *c)
public langtag
langtag proc near

c= qword ptr -68h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 70h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_AE4B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    language
mov     [rbp+state], al

loc_AE4B:
cmp     [rbp+state], 0
jz      loc_AF1B
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_AEC5

loc_AE6F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_AE94
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_AE94:
cmp     [rbp+state], 0
jz      short loc_AEAE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    script
mov     [rbp+state], al

loc_AEAE:
cmp     [rbp+state], 0
jnz     short loc_AEC1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_AECB

loc_AEC1:
add     [rbp+i], 1

loc_AEC5:
cmp     [rbp+i], 0
jle     short loc_AE6F

loc_AECB:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_AF1B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_AF1B:
cmp     [rbp+state], 0
jz      loc_AFEB
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_AF95

loc_AF3F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_AF64
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_AF64:
cmp     [rbp+state], 0
jz      short loc_AF7E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    region
mov     [rbp+state], al

loc_AF7E:
cmp     [rbp+state], 0
jnz     short loc_AF91
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_AF9B

loc_AF91:
add     [rbp+i_0], 1

loc_AF95:
cmp     [rbp+i_0], 0
jle     short loc_AF3F

loc_AF9B:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_AFEB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_AFEB:
cmp     [rbp+state], 0
jz      loc_B0E6
mov     [rbp+i_1], 0

loc_AFFC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_B071
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_B043
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_B043:
cmp     [rbp+state], 0
jz      short loc_B05D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    variant
mov     [rbp+state], al

loc_B05D:
cmp     [rbp+state], 0
jnz     short loc_B070
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_B071

loc_B070:
nop

loc_B071:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B0BE
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B0BE:
cmp     [rbp+state], 0
jnz     short loc_B0DD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_B0E6

loc_B0DD:
add     [rbp+i_1], 1
jmp     loc_AFFC

loc_B0E6:
cmp     [rbp+state], 0
jz      loc_B1E1
mov     [rbp+i_2], 0

loc_B0F7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_B16C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_B13E
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_B13E:
cmp     [rbp+state], 0
jz      short loc_B158
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    extension
mov     [rbp+state], al

loc_B158:
cmp     [rbp+state], 0
jnz     short loc_B16B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_B16C

loc_B16B:
nop

loc_B16C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B1B9
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_4]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B1B9:
cmp     [rbp+state], 0
jnz     short loc_B1D8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
nop
mov     eax, [rbp+i_2]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_B1E1

loc_B1D8:
add     [rbp+i_2], 1
jmp     loc_B0F7

loc_B1E1:
cmp     [rbp+state], 0
jz      loc_B2B1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_B25B

loc_B205:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_B22A
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_B22A:
cmp     [rbp+state], 0
jz      short loc_B244
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    privateuse
mov     [rbp+state], al

loc_B244:
cmp     [rbp+state], 0
jnz     short loc_B257
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_B261

loc_B257:
add     [rbp+i_3], 1

loc_B25B:
cmp     [rbp+i_3], 0
jle     short loc_B205

loc_B261:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B2B1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B2B1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B309
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3375 ; "langtag"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B309:
movsx   eax, [rbp+state]
leave
retn
; } // starts at AE05
langtag endp



; Attributes: bp-based frame

; int __cdecl language(ctx *c)
public language
language proc near

c= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_B3A2
mov     [rbp+i], 0
jmp     short loc_B381

loc_B34A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_B36A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B36A:
cmp     [rbp+state], 0
jnz     short loc_B37D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_B387

loc_B37D:
add     [rbp+i], 1

loc_B381:
cmp     [rbp+i], 2
jle     short loc_B34A

loc_B387:
cmp     [rbp+i], 1
jle     short loc_B39A
cmp     [rbp+i], 3
jg      short loc_B39A
mov     eax, 1
jmp     short loc_B39F

loc_B39A:
mov     eax, 0

loc_B39F:
mov     [rbp+state], al

loc_B3A2:
cmp     [rbp+state], 0
jz      loc_B472
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_B41C

loc_B3C6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_B3EB
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_B3EB:
cmp     [rbp+state], 0
jz      short loc_B405
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    extlang
mov     [rbp+state], al

loc_B405:
cmp     [rbp+state], 0
jnz     short loc_B418
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_B422

loc_B418:
add     [rbp+i_0], 1

loc_B41C:
cmp     [rbp+i_0], 0
jle     short loc_B3C6

loc_B422:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B472
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B472:
cmp     [rbp+state], 0
jnz     loc_B570
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_B4F2
mov     [rbp+i_1], 0
jmp     short loc_B4D1

loc_B49A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_B4BA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B4BA:
cmp     [rbp+state], 0
jnz     short loc_B4CD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_B4D7

loc_B4CD:
add     [rbp+i_1], 1

loc_B4D1:
cmp     [rbp+i_1], 3
jle     short loc_B49A

loc_B4D7:
cmp     [rbp+i_1], 3
jle     short loc_B4EA
cmp     [rbp+i_1], 4
jg      short loc_B4EA
mov     eax, 1
jmp     short loc_B4EF

loc_B4EA:
mov     eax, 0

loc_B4EF:
mov     [rbp+state], al

loc_B4F2:
cmp     [rbp+state], 0
jnz     short loc_B573
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_B574
mov     [rbp+i_2], 0
jmp     short loc_B54D

loc_B516:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_B536
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B536:
cmp     [rbp+state], 0
jnz     short loc_B549
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_B553

loc_B549:
add     [rbp+i_2], 1

loc_B54D:
cmp     [rbp+i_2], 7
jle     short loc_B516

loc_B553:
cmp     [rbp+i_2], 4
jle     short loc_B566
cmp     [rbp+i_2], 8
jg      short loc_B566
mov     eax, 1
jmp     short loc_B56B

loc_B566:
mov     eax, 0

loc_B56B:
mov     [rbp+state], al
jmp     short loc_B574

loc_B570:
nop
jmp     short loc_B574

loc_B573:
nop

loc_B574:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B5CC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3404 ; "language"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B5CC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at B30F
language endp



; Attributes: bp-based frame

; int __cdecl extlang(ctx *c)
public extlang
extlang proc near

c= qword ptr -48h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_B665
mov     [rbp+i], 0
jmp     short loc_B644

loc_B60D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_B62D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B62D:
cmp     [rbp+state], 0
jnz     short loc_B640
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_B64A

loc_B640:
add     [rbp+i], 1

loc_B644:
cmp     [rbp+i], 2
jle     short loc_B60D

loc_B64A:
cmp     [rbp+i], 2
jle     short loc_B65D
cmp     [rbp+i], 3
jg      short loc_B65D
mov     eax, 1
jmp     short loc_B662

loc_B65D:
mov     eax, 0

loc_B662:
mov     [rbp+state], al

loc_B665:
cmp     [rbp+state], 0
jz      loc_B7CA
mov     [rbp+i_0], 0
jmp     loc_B7A5

loc_B67B:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_B741
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_B6C6
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_B6C6:
cmp     [rbp+state], 0
jz      short loc_B72D
mov     [rbp+i_1], 0
jmp     short loc_B70C

loc_B6D5:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_B6F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B6F5:
cmp     [rbp+state], 0
jnz     short loc_B708
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_B712

loc_B708:
add     [rbp+i_1], 1

loc_B70C:
cmp     [rbp+i_1], 2
jle     short loc_B6D5

loc_B712:
cmp     [rbp+i_1], 2
jle     short loc_B725
cmp     [rbp+i_1], 3
jg      short loc_B725
mov     eax, 1
jmp     short loc_B72A

loc_B725:
mov     eax, 0

loc_B72A:
mov     [rbp+state], al

loc_B72D:
cmp     [rbp+state], 0
jnz     short loc_B740
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_B741

loc_B740:
nop

loc_B741:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B78E
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B78E:
cmp     [rbp+state], 0
jnz     short loc_B7A1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_B7AF

loc_B7A1:
add     [rbp+i_0], 1

loc_B7A5:
cmp     [rbp+i_0], 1
jle     loc_B67B

loc_B7AF:
cmp     [rbp+i_0], 0
js      short loc_B7C2
cmp     [rbp+i_0], 2
jg      short loc_B7C2
mov     eax, 1
jmp     short loc_B7C7

loc_B7C2:
mov     eax, 0

loc_B7C7:
mov     [rbp+state], al

loc_B7CA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B822
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3427 ; "extlang"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B822:
movsx   eax, [rbp+state]
leave
retn
; } // starts at B5D2
extlang endp



; Attributes: bp-based frame

; int __cdecl script(ctx *c)
public script
script proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_B8BB
mov     [rbp+i], 0
jmp     short loc_B89A

loc_B863:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_B883
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B883:
cmp     [rbp+state], 0
jnz     short loc_B896
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_B8A0

loc_B896:
add     [rbp+i], 1

loc_B89A:
cmp     [rbp+i], 3
jle     short loc_B863

loc_B8A0:
cmp     [rbp+i], 3
jle     short loc_B8B3
cmp     [rbp+i], 4
jg      short loc_B8B3
mov     eax, 1
jmp     short loc_B8B8

loc_B8B3:
mov     eax, 0

loc_B8B8:
mov     [rbp+state], al

loc_B8BB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_B913
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3438 ; "script"
mov     rdi, rax
mov     eax, 0
call    r9

loc_B913:
movsx   eax, [rbp+state]
leave
retn
; } // starts at B828
script endp



; Attributes: bp-based frame

; int __cdecl region(ctx *c)
public region
region proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_B9AC
mov     [rbp+i], 0
jmp     short loc_B98B

loc_B954:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_B974
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_B974:
cmp     [rbp+state], 0
jnz     short loc_B987
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_B991

loc_B987:
add     [rbp+i], 1

loc_B98B:
cmp     [rbp+i], 1
jle     short loc_B954

loc_B991:
cmp     [rbp+i], 1
jle     short loc_B9A4
cmp     [rbp+i], 2
jg      short loc_B9A4
mov     eax, 1
jmp     short loc_B9A9

loc_B9A4:
mov     eax, 0

loc_B9A9:
mov     [rbp+state], al

loc_B9AC:
cmp     [rbp+state], 0
jnz     short loc_BA2A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_BA2B
mov     [rbp+i_0], 0
jmp     short loc_BA07

loc_B9D0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_B9F0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_B9F0:
cmp     [rbp+state], 0
jnz     short loc_BA03
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_BA0D

loc_BA03:
add     [rbp+i_0], 1

loc_BA07:
cmp     [rbp+i_0], 2
jle     short loc_B9D0

loc_BA0D:
cmp     [rbp+i_0], 2
jle     short loc_BA20
cmp     [rbp+i_0], 3
jg      short loc_BA20
mov     eax, 1
jmp     short loc_BA25

loc_BA20:
mov     eax, 0

loc_BA25:
mov     [rbp+state], al
jmp     short loc_BA2B

loc_BA2A:
nop

loc_BA2B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BA83
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3455 ; "region"
mov     rdi, rax
mov     eax, 0
call    r9

loc_BA83:
movsx   eax, [rbp+state]
leave
retn
; } // starts at B919
region endp



; Attributes: bp-based frame

; int __cdecl variant(ctx *c)
public variant
variant proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_BB1C
mov     [rbp+i], 0
jmp     short loc_BAFB

loc_BAC4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_BAE4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    alphanum
mov     [rbp+state], al

loc_BAE4:
cmp     [rbp+state], 0
jnz     short loc_BAF7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_BB01

loc_BAF7:
add     [rbp+i], 1

loc_BAFB:
cmp     [rbp+i], 7
jle     short loc_BAC4

loc_BB01:
cmp     [rbp+i], 4
jle     short loc_BB14
cmp     [rbp+i], 8
jg      short loc_BB14
mov     eax, 1
jmp     short loc_BB19

loc_BB14:
mov     eax, 0

loc_BB19:
mov     [rbp+state], al

loc_BB1C:
cmp     [rbp+state], 0
jnz     loc_BC3A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_BBEB
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_BB70
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_BB70:
cmp     [rbp+state], 0
jz      short loc_BBD7
mov     [rbp+i_0], 0
jmp     short loc_BBB6

loc_BB7F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_BB9F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    alphanum
mov     [rbp+state], al

loc_BB9F:
cmp     [rbp+state], 0
jnz     short loc_BBB2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_BBBC

loc_BBB2:
add     [rbp+i_0], 1

loc_BBB6:
cmp     [rbp+i_0], 2
jle     short loc_BB7F

loc_BBBC:
cmp     [rbp+i_0], 2
jle     short loc_BBCF
cmp     [rbp+i_0], 3
jg      short loc_BBCF
mov     eax, 1
jmp     short loc_BBD4

loc_BBCF:
mov     eax, 0

loc_BBD4:
mov     [rbp+state], al

loc_BBD7:
cmp     [rbp+state], 0
jnz     short loc_BBEA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_BBEB

loc_BBEA:
nop

loc_BBEB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BC3B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_BC3B

loc_BC3A:
nop

loc_BC3B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BC93
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3474 ; "variant"
mov     rdi, rax
mov     eax, 0
call    r9

loc_BC93:
movsx   eax, [rbp+state]
leave
retn
; } // starts at BA89
variant endp



; Attributes: bp-based frame

; int __cdecl extension(ctx *c)
public extension
extension proc near

c= qword ptr -48h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_BCDF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    singleton
mov     [rbp+state], al

loc_BCDF:
cmp     [rbp+state], 0
jz      loc_BEB1
mov     [rbp+i], 0

loc_BCF0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_BE3D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_BD3B
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_BD3B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_BDDC
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_BDC8
mov     [rbp+i_0], 0
jmp     short loc_BDA7

loc_BD70:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_BD90
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    alphanum
mov     [rbp+state], al

loc_BD90:
cmp     [rbp+state], 0
jnz     short loc_BDA3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_BDAD

loc_BDA3:
add     [rbp+i_0], 1

loc_BDA7:
cmp     [rbp+i_0], 7
jle     short loc_BD70

loc_BDAD:
cmp     [rbp+i_0], 1
jle     short loc_BDC0
cmp     [rbp+i_0], 8
jg      short loc_BDC0
mov     eax, 1
jmp     short loc_BDC5

loc_BDC0:
mov     eax, 0

loc_BDC5:
mov     [rbp+state], al

loc_BDC8:
cmp     [rbp+state], 0
jnz     short loc_BDDB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_BDDC

loc_BDDB:
nop

loc_BDDC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BE29
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_BE29:
cmp     [rbp+state], 0
jnz     short loc_BE3C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_BE3D

loc_BE3C:
nop

loc_BE3D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BE8A
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_BE8A:
cmp     [rbp+state], 0
jnz     short loc_BEA8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_BEB1

loc_BEA8:
add     [rbp+i], 1
jmp     loc_BCF0

loc_BEB1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_BF09
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3495 ; "extension"
mov     rdi, rax
mov     eax, 0
call    r9

loc_BF09:
movsx   eax, [rbp+state]
leave
retn
; } // starts at BC99
extension endp



; Attributes: bp-based frame

; int __cdecl singleton(ctx *c)
public singleton
singleton proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_BF50
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_BF50:
cmp     [rbp+state], 0
jnz     loc_C02A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_BF88
mov     rax, [rbp+c]
mov     edx, 57h ; 'W'  ; y
mov     esi, 41h ; 'A'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_BF88:
cmp     [rbp+state], 0
jnz     loc_C02D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_BFC0
mov     rax, [rbp+c]
mov     edx, 5Ah ; 'Z'  ; y
mov     esi, 59h ; 'Y'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_BFC0:
cmp     [rbp+state], 0
jnz     short loc_C030
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_BFF4
mov     rax, [rbp+c]
mov     edx, 77h ; 'w'  ; y
mov     esi, 61h ; 'a'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_BFF4:
cmp     [rbp+state], 0
jnz     short loc_C033
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C034
mov     rax, [rbp+c]
mov     edx, 7Ah ; 'z'  ; y
mov     esi, 79h ; 'y'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al
jmp     short loc_C034

loc_C02A:
nop
jmp     short loc_C034

loc_C02D:
nop
jmp     short loc_C034

loc_C030:
nop
jmp     short loc_C034

loc_C033:
nop

loc_C034:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C08C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3502 ; "singleton"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C08C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at BF0F
singleton endp



; Attributes: bp-based frame

; int __cdecl privateuse(ctx *c)
public privateuse
privateuse proc near

c= qword ptr -48h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_C0D8
mov     rax, [rbp+c]
mov     esi, 58h ; 'X'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_C0D8:
cmp     [rbp+state], 0
jz      loc_C2AA
mov     [rbp+i], 0

loc_C0E9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_C236
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_C134
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_C134:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_C1D5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_C1C1
mov     [rbp+i_0], 0
jmp     short loc_C1A0

loc_C169:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_C189
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    alphanum
mov     [rbp+state], al

loc_C189:
cmp     [rbp+state], 0
jnz     short loc_C19C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_C1A6

loc_C19C:
add     [rbp+i_0], 1

loc_C1A0:
cmp     [rbp+i_0], 7
jle     short loc_C169

loc_C1A6:
cmp     [rbp+i_0], 0
jle     short loc_C1B9
cmp     [rbp+i_0], 8
jg      short loc_C1B9
mov     eax, 1
jmp     short loc_C1BE

loc_C1B9:
mov     eax, 0

loc_C1BE:
mov     [rbp+state], al

loc_C1C1:
cmp     [rbp+state], 0
jnz     short loc_C1D4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_C1D5

loc_C1D4:
nop

loc_C1D5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C222
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C222:
cmp     [rbp+state], 0
jnz     short loc_C235
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_C236

loc_C235:
nop

loc_C236:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C283
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C283:
cmp     [rbp+state], 0
jnz     short loc_C2A1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_C2AA

loc_C2A1:
add     [rbp+i], 1
jmp     loc_C0E9

loc_C2AA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C302
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3521 ; "privateuse"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C302:
movsx   eax, [rbp+state]
leave
retn
; } // starts at C092
privateuse endp



; Attributes: bp-based frame

; int __cdecl grandfathered(ctx *c)
public grandfathered
grandfathered proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_C34E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    irregular
mov     [rbp+state], al

loc_C34E:
cmp     [rbp+state], 0
jnz     short loc_C37F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C380
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    regular
mov     [rbp+state], al
jmp     short loc_C380

loc_C37F:
nop

loc_C380:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C3D8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3532 ; "grandfathered"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C3D8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at C308
grandfathered endp



; Attributes: bp-based frame

; int __cdecl irregular(ctx *c)
public irregular
irregular proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_C426
mov     rax, [rbp+c]
lea     rsi, aEnGbOed   ; "EN-GB-OED"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C426:
cmp     [rbp+state], 0
jnz     loc_C774
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C45B
mov     rax, [rbp+c]
lea     rsi, aIAmi      ; "I-AMI"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C45B:
cmp     [rbp+state], 0
jnz     loc_C777
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C490
mov     rax, [rbp+c]
lea     rsi, aIBnn      ; "I-BNN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C490:
cmp     [rbp+state], 0
jnz     loc_C77A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C4C5
mov     rax, [rbp+c]
lea     rsi, aIDefault  ; "I-DEFAULT"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C4C5:
cmp     [rbp+state], 0
jnz     loc_C77D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C4FA
mov     rax, [rbp+c]
lea     rsi, aIEnochian ; "I-ENOCHIAN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C4FA:
cmp     [rbp+state], 0
jnz     loc_C780
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C52F
mov     rax, [rbp+c]
lea     rsi, aIHak      ; "I-HAK"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C52F:
cmp     [rbp+state], 0
jnz     loc_C783
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C564
mov     rax, [rbp+c]
lea     rsi, aIKlingon  ; "I-KLINGON"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C564:
cmp     [rbp+state], 0
jnz     loc_C786
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C599
mov     rax, [rbp+c]
lea     rsi, aILux      ; "I-LUX"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C599:
cmp     [rbp+state], 0
jnz     loc_C789
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C5CE
mov     rax, [rbp+c]
lea     rsi, aIMingo    ; "I-MINGO"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C5CE:
cmp     [rbp+state], 0
jnz     loc_C78C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C603
mov     rax, [rbp+c]
lea     rsi, aINavajo   ; "I-NAVAJO"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C603:
cmp     [rbp+state], 0
jnz     loc_C78F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C638
mov     rax, [rbp+c]
lea     rsi, aIPwn      ; "I-PWN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C638:
cmp     [rbp+state], 0
jnz     loc_C792
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C66D
mov     rax, [rbp+c]
lea     rsi, aITao      ; "I-TAO"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C66D:
cmp     [rbp+state], 0
jnz     loc_C795
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C6A2
mov     rax, [rbp+c]
lea     rsi, aITay      ; "I-TAY"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C6A2:
cmp     [rbp+state], 0
jnz     loc_C798
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C6D7
mov     rax, [rbp+c]
lea     rsi, aITsu      ; "I-TSU"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C6D7:
cmp     [rbp+state], 0
jnz     loc_C79B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C70C
mov     rax, [rbp+c]
lea     rsi, aSgnBeFr   ; "SGN-BE-FR"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C70C:
cmp     [rbp+state], 0
jnz     loc_C79E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C741
mov     rax, [rbp+c]
lea     rsi, aSgnBeNl   ; "SGN-BE-NL"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C741:
cmp     [rbp+state], 0
jnz     short loc_C7A1
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C7A2
mov     rax, [rbp+c]
lea     rsi, aSgnChDe   ; "SGN-CH-DE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al
jmp     short loc_C7A2

loc_C774:
nop
jmp     short loc_C7A2

loc_C777:
nop
jmp     short loc_C7A2

loc_C77A:
nop
jmp     short loc_C7A2

loc_C77D:
nop
jmp     short loc_C7A2

loc_C780:
nop
jmp     short loc_C7A2

loc_C783:
nop
jmp     short loc_C7A2

loc_C786:
nop
jmp     short loc_C7A2

loc_C789:
nop
jmp     short loc_C7A2

loc_C78C:
nop
jmp     short loc_C7A2

loc_C78F:
nop
jmp     short loc_C7A2

loc_C792:
nop
jmp     short loc_C7A2

loc_C795:
nop
jmp     short loc_C7A2

loc_C798:
nop
jmp     short loc_C7A2

loc_C79B:
nop
jmp     short loc_C7A2

loc_C79E:
nop
jmp     short loc_C7A2

loc_C7A1:
nop

loc_C7A2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_C7FA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3539 ; "irregular"
mov     rdi, rax
mov     eax, 0
call    r9

loc_C7FA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at C3DE
irregular endp



; Attributes: bp-based frame

; int __cdecl regular(ctx *c)
public regular
regular proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_C848
mov     rax, [rbp+c]
lea     rsi, aArtLojban ; "ART-LOJBAN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C848:
cmp     [rbp+state], 0
jnz     loc_C9EA
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C87D
mov     rax, [rbp+c]
lea     rsi, aCelGaulish ; "CEL-GAULISH"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C87D:
cmp     [rbp+state], 0
jnz     loc_C9ED
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C8B2
mov     rax, [rbp+c]
lea     rsi, aNoBok     ; "NO-BOK"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C8B2:
cmp     [rbp+state], 0
jnz     loc_C9F0
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C8E7
mov     rax, [rbp+c]
lea     rsi, aNoNyn     ; "NO-NYN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C8E7:
cmp     [rbp+state], 0
jnz     loc_C9F3
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C91C
mov     rax, [rbp+c]
lea     rsi, aZhGuoyu   ; "ZH-GUOYU"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C91C:
cmp     [rbp+state], 0
jnz     loc_C9F6
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C951
mov     rax, [rbp+c]
lea     rsi, aZhHakka   ; "ZH-HAKKA"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C951:
cmp     [rbp+state], 0
jnz     loc_C9F9
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C986
mov     rax, [rbp+c]
lea     rsi, aZhMin     ; "ZH-MIN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C986:
cmp     [rbp+state], 0
jnz     short loc_C9FC
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_C9B7
mov     rax, [rbp+c]
lea     rsi, aZhMinNan  ; "ZH-MIN-NAN"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_C9B7:
cmp     [rbp+state], 0
jnz     short loc_C9FF
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_CA00
mov     rax, [rbp+c]
lea     rsi, aZhXiang   ; "ZH-XIANG"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al
jmp     short loc_CA00

loc_C9EA:
nop
jmp     short loc_CA00

loc_C9ED:
nop
jmp     short loc_CA00

loc_C9F0:
nop
jmp     short loc_CA00

loc_C9F3:
nop
jmp     short loc_CA00

loc_C9F6:
nop
jmp     short loc_CA00

loc_C9F9:
nop
jmp     short loc_CA00

loc_C9FC:
nop
jmp     short loc_CA00

loc_C9FF:
nop

loc_CA00:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CA58
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3546 ; "regular"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CA58:
movsx   eax, [rbp+state]
leave
retn
; } // starts at C800
regular endp



; Attributes: bp-based frame

; int __cdecl BWS(ctx *c)
public BWS
BWS proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_CAA4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    OWS
mov     [rbp+state], al

loc_CAA4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CAFC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3554 ; "BWS"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CAFC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at CA5E
BWS endp



; Attributes: bp-based frame

; int __cdecl Connection(ctx *c)
public Connection
Connection proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_CC29
mov     [rbp+i], 0

loc_CB3F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_CBB4
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_CB86
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_CB86:
cmp     [rbp+state], 0
jz      short loc_CBA0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    OWS
mov     [rbp+state], al

loc_CBA0:
cmp     [rbp+state], 0
jnz     short loc_CBB3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_CBB4

loc_CBB3:
nop

loc_CBB4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CC01
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CC01:
cmp     [rbp+state], 0
jnz     short loc_CC20
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_CC29

loc_CC20:
add     [rbp+i], 1
jmp     loc_CB3F

loc_CC29:
cmp     [rbp+state], 0
jz      short loc_CC43
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    connection_option
mov     [rbp+state], al

loc_CC43:
cmp     [rbp+state], 0
jz      loc_CE12
mov     [rbp+i_0], 0

loc_CC54:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_CD9D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_CC9F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    OWS
mov     [rbp+state], al

loc_CC9F:
cmp     [rbp+state], 0
jz      short loc_CCB9
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_CCB9:
cmp     [rbp+state], 0
jz      loc_CD89
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_CD33

loc_CCDD:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_CD02
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    OWS
mov     [rbp+state], al

loc_CD02:
cmp     [rbp+state], 0
jz      short loc_CD1C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    connection_option
mov     [rbp+state], al

loc_CD1C:
cmp     [rbp+state], 0
jnz     short loc_CD2F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_CD39

loc_CD2F:
add     [rbp+i_1], 1

loc_CD33:
cmp     [rbp+i_1], 0
jle     short loc_CCDD

loc_CD39:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CD89
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CD89:
cmp     [rbp+state], 0
jnz     short loc_CD9C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_CD9D

loc_CD9C:
nop

loc_CD9D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CDEA
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CDEA:
cmp     [rbp+state], 0
jnz     short loc_CE09
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_CE12

loc_CE09:
add     [rbp+i_0], 1
jmp     loc_CC54

loc_CE12:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CE6A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3583 ; "Connection"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CE6A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at CB02
Connection endp



; Attributes: bp-based frame

; int __cdecl Content_Length(ctx *c)
public Content_Length
Content_Length proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_CEED
mov     [rbp+i], 0

loc_CEA9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_CEC9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_CEC9:
cmp     [rbp+state], 0
jnz     short loc_CEE7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_CEED

loc_CEE7:
add     [rbp+i], 1
jmp     short loc_CEA9

loc_CEED:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_CF45
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3593 ; "Content_Length"
mov     rdi, rax
mov     eax, 0
call    r9

loc_CF45:
movsx   eax, [rbp+state]
leave
retn
; } // starts at CE70
Content_Length endp



; Attributes: bp-based frame

; int __cdecl HTTP_message(ctx *c)
public HTTP_message
HTTP_message proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_CF91
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    start_line
mov     [rbp+state], al

loc_CF91:
cmp     [rbp+state], 0
jz      loc_D087
mov     [rbp+i], 0

loc_CFA2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_D012
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_CFE9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    header_field
mov     [rbp+state], al

loc_CFE9:
cmp     [rbp+state], 0
jz      short loc_CFFE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_CFFE:
cmp     [rbp+state], 0
jnz     short loc_D011
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_D012

loc_D011:
nop

loc_D012:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D05F
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D05F:
cmp     [rbp+state], 0
jnz     short loc_D07E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_D087

loc_D07E:
add     [rbp+i], 1
jmp     loc_CFA2

loc_D087:
cmp     [rbp+state], 0
jz      short loc_D09C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_D09C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D0F4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3609 ; "HTTP_message"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D0F4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at CF4B
HTTP_message endp



; Attributes: bp-based frame

; int __cdecl HTTP_name(ctx *c)
public HTTP_name
HTTP_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_D142
mov     rax, [rbp+c]
lea     rsi, aHttp_0    ; "HTTP"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_D142:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D19A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3615 ; "HTTP_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D19A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D0FA
HTTP_name endp



; Attributes: bp-based frame

; int __cdecl HTTP_version(ctx *c)
public HTTP_version
HTTP_version proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_D1E1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_name
mov     [rbp+state], al

loc_D1E1:
cmp     [rbp+state], 0
jz      short loc_D1FB
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_D1FB:
cmp     [rbp+state], 0
jz      short loc_D210
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_D210:
cmp     [rbp+state], 0
jz      short loc_D22A
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_D22A:
cmp     [rbp+state], 0
jz      short loc_D23F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_D23F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D297
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3621 ; "HTTP_version"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D297:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D1A0
HTTP_version endp



; Attributes: bp-based frame

; int __cdecl Host(ctx *c)
public Host
Host proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_D2E3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    uri_host
mov     [rbp+state], al

loc_D2E3:
cmp     [rbp+state], 0
jz      loc_D3AE
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_D358

loc_D307:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_D32C
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_D32C:
cmp     [rbp+state], 0
jz      short loc_D341
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    port
mov     [rbp+state], al

loc_D341:
cmp     [rbp+state], 0
jnz     short loc_D354
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_D35E

loc_D354:
add     [rbp+i], 1

loc_D358:
cmp     [rbp+i], 0
jle     short loc_D307

loc_D35E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D3AE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D3AE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D406
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3634 ; "Host"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D406:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D29D
Host endp



; Attributes: bp-based frame

; int __cdecl OWS(ctx *c)
public OWS
OWS proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_D53E
mov     [rbp+i], 0

loc_D449:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_D4C9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_D48B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_D48B:
cmp     [rbp+state], 0
jnz     short loc_D4C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_D4B5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_D4B5:
cmp     [rbp+state], 0
jnz     short loc_D4C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_D4C9

loc_D4C8:
nop

loc_D4C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D516
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D516:
cmp     [rbp+state], 0
jnz     short loc_D535
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_D53E

loc_D535:
add     [rbp+i], 1
jmp     loc_D449

loc_D53E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D596
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3646 ; "OWS"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D596:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D40C
OWS endp



; Attributes: bp-based frame

; int __cdecl RWS(ctx *c)
public RWS
RWS proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_D6CD
mov     [rbp+i], 0

loc_D5D9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_D659
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_D61B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_D61B:
cmp     [rbp+state], 0
jnz     short loc_D658
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_D645
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_D645:
cmp     [rbp+state], 0
jnz     short loc_D658
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_D659

loc_D658:
nop

loc_D659:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D6A6
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D6A6:
cmp     [rbp+state], 0
jnz     short loc_D6C4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_D6CD

loc_D6C4:
add     [rbp+i], 1
jmp     loc_D5D9

loc_D6CD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D725
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3658 ; "RWS"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D725:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D59C
RWS endp



; Attributes: bp-based frame

; int __cdecl TE(ctx *c)
public TE
TE proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_DA8B
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_DA31

loc_D77E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_D808
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_D7C5
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_D7C5:
cmp     [rbp+state], 0
jnz     short loc_D807
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_D7F4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    t_codings
mov     [rbp+state], al

loc_D7F4:
cmp     [rbp+state], 0
jnz     short loc_D807
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_D808

loc_D807:
nop

loc_D808:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D855
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D855:
cmp     [rbp+state], 0
jz      loc_DA1A
mov     [rbp+i_0], 0

loc_D866:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_D9A5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_D8AC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_D8AC:
cmp     [rbp+state], 0
jz      short loc_D8C6
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_D8C6:
cmp     [rbp+state], 0
jz      loc_D991
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_D93B

loc_D8EA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_D90A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_D90A:
cmp     [rbp+state], 0
jz      short loc_D924
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    t_codings
mov     [rbp+state], al

loc_D924:
cmp     [rbp+state], 0
jnz     short loc_D937
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_D941

loc_D937:
add     [rbp+i_1], 1

loc_D93B:
cmp     [rbp+i_1], 0
jle     short loc_D8EA

loc_D941:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D991
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D991:
cmp     [rbp+state], 0
jnz     short loc_D9A4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_D9A5

loc_D9A4:
nop

loc_D9A5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_D9F2
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_D9F2:
cmp     [rbp+state], 0
jnz     short loc_DA11
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_DA1A

loc_DA11:
add     [rbp+i_0], 1
jmp     loc_D866

loc_DA1A:
cmp     [rbp+state], 0
jnz     short loc_DA2D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_DA3B

loc_DA2D:
add     [rbp+i], 1

loc_DA31:
cmp     [rbp+i], 0
jle     loc_D77E

loc_DA3B:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DA8B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DA8B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DAE3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3685 ; "TE"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DAE3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at D72B
TE endp



; Attributes: bp-based frame

; int __cdecl Trailer(ctx *c)
public Trailer
Trailer proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_DC0B
mov     [rbp+i], 0

loc_DB26:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_DB96
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_DB6D
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_DB6D:
cmp     [rbp+state], 0
jz      short loc_DB82
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_DB82:
cmp     [rbp+state], 0
jnz     short loc_DB95
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_DB96

loc_DB95:
nop

loc_DB96:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DBE3
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DBE3:
cmp     [rbp+state], 0
jnz     short loc_DC02
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_DC0B

loc_DC02:
add     [rbp+i], 1
jmp     loc_DB26

loc_DC0B:
cmp     [rbp+state], 0
jz      short loc_DC25
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    field_name
mov     [rbp+state], al

loc_DC25:
cmp     [rbp+state], 0
jz      loc_DDEA
mov     [rbp+i_0], 0

loc_DC36:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_DD75
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_DC7C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_DC7C:
cmp     [rbp+state], 0
jz      short loc_DC96
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_DC96:
cmp     [rbp+state], 0
jz      loc_DD61
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_DD0B

loc_DCBA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_DCDA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_DCDA:
cmp     [rbp+state], 0
jz      short loc_DCF4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    field_name
mov     [rbp+state], al

loc_DCF4:
cmp     [rbp+state], 0
jnz     short loc_DD07
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_DD11

loc_DD07:
add     [rbp+i_1], 1

loc_DD0B:
cmp     [rbp+i_1], 0
jle     short loc_DCBA

loc_DD11:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DD61
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DD61:
cmp     [rbp+state], 0
jnz     short loc_DD74
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_DD75

loc_DD74:
nop

loc_DD75:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DDC2
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DDC2:
cmp     [rbp+state], 0
jnz     short loc_DDE1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_DDEA

loc_DDE1:
add     [rbp+i_0], 1
jmp     loc_DC36

loc_DDEA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DE42
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3711 ; "Trailer"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DE42:
movsx   eax, [rbp+state]
leave
retn
; } // starts at DAE9
Trailer endp



; Attributes: bp-based frame

; int __cdecl Transfer_Encoding(ctx *c)
public Transfer_Encoding
Transfer_Encoding proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_DF6A
mov     [rbp+i], 0

loc_DE85:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_DEF5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_DECC
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_DECC:
cmp     [rbp+state], 0
jz      short loc_DEE1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_DEE1:
cmp     [rbp+state], 0
jnz     short loc_DEF4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_DEF5

loc_DEF4:
nop

loc_DEF5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_DF42
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_DF42:
cmp     [rbp+state], 0
jnz     short loc_DF61
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_DF6A

loc_DF61:
add     [rbp+i], 1
jmp     loc_DE85

loc_DF6A:
cmp     [rbp+state], 0
jz      short loc_DF84
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    transfer_coding
mov     [rbp+state], al

loc_DF84:
cmp     [rbp+state], 0
jz      loc_E149
mov     [rbp+i_0], 0

loc_DF95:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_E0D4
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_DFDB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_DFDB:
cmp     [rbp+state], 0
jz      short loc_DFF5
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_DFF5:
cmp     [rbp+state], 0
jz      loc_E0C0
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_E06A

loc_E019:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_E039
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E039:
cmp     [rbp+state], 0
jz      short loc_E053
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    transfer_coding
mov     [rbp+state], al

loc_E053:
cmp     [rbp+state], 0
jnz     short loc_E066
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_E070

loc_E066:
add     [rbp+i_1], 1

loc_E06A:
cmp     [rbp+i_1], 0
jle     short loc_E019

loc_E070:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E0C0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E0C0:
cmp     [rbp+state], 0
jnz     short loc_E0D3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_E0D4

loc_E0D3:
nop

loc_E0D4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E121
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E121:
cmp     [rbp+state], 0
jnz     short loc_E140
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_E149

loc_E140:
add     [rbp+i_0], 1
jmp     loc_DF95

loc_E149:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E1A1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3737 ; "Transfer_Encoding"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E1A1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at DE48
Transfer_Encoding endp



; Attributes: bp-based frame

; int __cdecl Upgrade(ctx *c)
public Upgrade
Upgrade proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_E2C9
mov     [rbp+i], 0

loc_E1E4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_E254
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_E22B
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_E22B:
cmp     [rbp+state], 0
jz      short loc_E240
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E240:
cmp     [rbp+state], 0
jnz     short loc_E253
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_E254

loc_E253:
nop

loc_E254:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E2A1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E2A1:
cmp     [rbp+state], 0
jnz     short loc_E2C0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_E2C9

loc_E2C0:
add     [rbp+i], 1
jmp     loc_E1E4

loc_E2C9:
cmp     [rbp+state], 0
jz      short loc_E2E3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    protocol
mov     [rbp+state], al

loc_E2E3:
cmp     [rbp+state], 0
jz      loc_E4A8
mov     [rbp+i_0], 0

loc_E2F4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_E433
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_E33A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E33A:
cmp     [rbp+state], 0
jz      short loc_E354
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_E354:
cmp     [rbp+state], 0
jz      loc_E41F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_E3C9

loc_E378:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_E398
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E398:
cmp     [rbp+state], 0
jz      short loc_E3B2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    protocol
mov     [rbp+state], al

loc_E3B2:
cmp     [rbp+state], 0
jnz     short loc_E3C5
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_E3CF

loc_E3C5:
add     [rbp+i_1], 1

loc_E3C9:
cmp     [rbp+i_1], 0
jle     short loc_E378

loc_E3CF:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E41F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E41F:
cmp     [rbp+state], 0
jnz     short loc_E432
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_E433

loc_E432:
nop

loc_E433:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E480
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E480:
cmp     [rbp+state], 0
jnz     short loc_E49F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_E4A8

loc_E49F:
add     [rbp+i_0], 1
jmp     loc_E2F4

loc_E4A8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E500
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3763 ; "Upgrade"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E500:
movsx   eax, [rbp+state]
leave
retn
; } // starts at E1A7
Upgrade endp



; Attributes: bp-based frame

; int __cdecl Via(ctx *c)
public Via
Via proc near

c= qword ptr -78h
save_8= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
add     rsp, 0FFFFFFFFFFFFFF80h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_E628
mov     [rbp+i], 0

loc_E543:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_E5B3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_E58A
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_E58A:
cmp     [rbp+state], 0
jz      short loc_E59F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E59F:
cmp     [rbp+state], 0
jnz     short loc_E5B2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_E5B3

loc_E5B2:
nop

loc_E5B3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E600
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E600:
cmp     [rbp+state], 0
jnz     short loc_E61F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_E628

loc_E61F:
add     [rbp+i], 1
jmp     loc_E543

loc_E628:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_E776
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_E668
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    received_protocol
mov     [rbp+state], al

loc_E668:
cmp     [rbp+state], 0
jz      short loc_E67D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_E67D:
cmp     [rbp+state], 0
jz      short loc_E697
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    received_by
mov     [rbp+state], al

loc_E697:
cmp     [rbp+state], 0
jz      loc_E762
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_E70C

loc_E6BB:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_E6DB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_E6DB:
cmp     [rbp+state], 0
jz      short loc_E6F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    comment
mov     [rbp+state], al

loc_E6F5:
cmp     [rbp+state], 0
jnz     short loc_E708
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_E712

loc_E708:
add     [rbp+i_0], 1

loc_E70C:
cmp     [rbp+i_0], 0
jle     short loc_E6BB

loc_E712:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E762
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E762:
cmp     [rbp+state], 0
jnz     short loc_E775
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_E776

loc_E775:
nop

loc_E776:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E7C3
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E7C3:
cmp     [rbp+state], 0
jz      loc_EB10
mov     [rbp+i_1], 0

loc_E7D4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_EA9B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_E81A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E81A:
cmp     [rbp+state], 0
jz      short loc_E834
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_E834:
cmp     [rbp+state], 0
jz      loc_EA87
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_2], 0
jmp     loc_EA2D

loc_E85B:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_E87B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_E87B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_E9C9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_E8BB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    received_protocol
mov     [rbp+state], al

loc_E8BB:
cmp     [rbp+state], 0
jz      short loc_E8D0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_E8D0:
cmp     [rbp+state], 0
jz      short loc_E8EA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    received_by
mov     [rbp+state], al

loc_E8EA:
cmp     [rbp+state], 0
jz      loc_E9B5
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_E95F

loc_E90E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
cmp     [rbp+state], 0
jz      short loc_E92E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_E92E:
cmp     [rbp+state], 0
jz      short loc_E948
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    comment
mov     [rbp+state], al

loc_E948:
cmp     [rbp+state], 0
jnz     short loc_E95B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_E965

loc_E95B:
add     [rbp+i_3], 1

loc_E95F:
cmp     [rbp+i_3], 0
jle     short loc_E90E

loc_E965:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_E9B5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_7]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_E9B5:
cmp     [rbp+state], 0
jnz     short loc_E9C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_E9C9

loc_E9C8:
nop

loc_E9C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EA16
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_6]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EA16:
cmp     [rbp+state], 0
jnz     short loc_EA29
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_EA37

loc_EA29:
add     [rbp+i_2], 1

loc_EA2D:
cmp     [rbp+i_2], 0
jle     loc_E85B

loc_EA37:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EA87
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_5]
mov     esi, [rbp+i_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EA87:
cmp     [rbp+state], 0
jnz     short loc_EA9A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_EA9B

loc_EA9A:
nop

loc_EA9B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EAE8
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_4]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EAE8:
cmp     [rbp+state], 0
jnz     short loc_EB07
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_EB10

loc_EB07:
add     [rbp+i_1], 1
jmp     loc_E7D4

loc_EB10:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EB68
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3809 ; "Via"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EB68:
movsx   eax, [rbp+state]
leave
retn
; } // starts at E506
Via endp



; Attributes: bp-based frame

; int __cdecl absolute_form(ctx *c)
public absolute_form
absolute_form proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_EBAF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    absolute_URI
mov     [rbp+state], al

loc_EBAF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EC07
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3815 ; "absolute_form"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EC07:
movsx   eax, [rbp+state]
leave
retn
; } // starts at EB6E
absolute_form endp



; Attributes: bp-based frame

; int __cdecl absolute_path(ctx *c)
public absolute_path
absolute_path proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_ED2E
mov     [rbp+i], 0

loc_EC4A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_ECBA
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_EC91
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_EC91:
cmp     [rbp+state], 0
jz      short loc_ECA6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    segment
mov     [rbp+state], al

loc_ECA6:
cmp     [rbp+state], 0
jnz     short loc_ECB9
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_ECBA

loc_ECB9:
nop

loc_ECBA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_ED07
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_ED07:
cmp     [rbp+state], 0
jnz     short loc_ED25
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_ED2E

loc_ED25:
add     [rbp+i], 1
jmp     loc_EC4A

loc_ED2E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_ED86
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3827 ; "absolute_path"
mov     rdi, rax
mov     eax, 0
call    r9

loc_ED86:
movsx   eax, [rbp+state]
leave
retn
; } // starts at EC0D
absolute_path endp



; Attributes: bp-based frame

; int __cdecl asterisk_form(ctx *c)
public asterisk_form
asterisk_form proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_EDD2
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_EDD2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EE2A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3833 ; "asterisk_form"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EE2A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at ED8C
asterisk_form endp



; Attributes: bp-based frame

; int __cdecl authority_form(ctx *c)
public authority_form
authority_form proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_EE71
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    authority
mov     [rbp+state], al

loc_EE71:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EEC9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3839 ; "authority_form"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EEC9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at EE30
authority_form endp



; Attributes: bp-based frame

; int __cdecl chunk(ctx *c)
public chunk
chunk proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_EF15
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_size
mov     [rbp+state], al

loc_EF15:
cmp     [rbp+state], 0
jz      loc_EFCB
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_EF75

loc_EF39:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_EF5E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_ext
mov     [rbp+state], al

loc_EF5E:
cmp     [rbp+state], 0
jnz     short loc_EF71
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_EF7B

loc_EF71:
add     [rbp+i], 1

loc_EF75:
cmp     [rbp+i], 0
jle     short loc_EF39

loc_EF7B:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_EFCB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_EFCB:
cmp     [rbp+state], 0
jz      short loc_EFE0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_EFE0:
cmp     [rbp+state], 0
jz      short loc_EFFA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_data
mov     [rbp+state], al

loc_EFFA:
cmp     [rbp+state], 0
jz      short loc_F00F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_F00F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F067
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3856 ; "chunk"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F067:
movsx   eax, [rbp+state]
leave
retn
; } // starts at EECF
chunk endp



; Attributes: bp-based frame

; int __cdecl chunk_data(ctx *c)
public chunk_data
chunk_data proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F0EA
mov     [rbp+i], 0

loc_F0A6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_F0C6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __octet
mov     [rbp+state], al

loc_F0C6:
cmp     [rbp+state], 0
jnz     short loc_F0E4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_F0EA

loc_F0E4:
add     [rbp+i], 1
jmp     short loc_F0A6

loc_F0EA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F142
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3866 ; "chunk_data"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F142:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F06D
chunk_data endp



; Attributes: bp-based frame

; int __cdecl chunk_ext(ctx *c)
public chunk_ext
chunk_ext proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_F343
mov     [rbp+i], 0

loc_F185:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_F2CE
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_F1D0
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_F1D0:
cmp     [rbp+state], 0
jz      short loc_F1EA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_ext_name
mov     [rbp+state], al

loc_F1EA:
cmp     [rbp+state], 0
jz      loc_F2BA
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_F264

loc_F20E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_F233
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_F233:
cmp     [rbp+state], 0
jz      short loc_F24D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_ext_val
mov     [rbp+state], al

loc_F24D:
cmp     [rbp+state], 0
jnz     short loc_F260
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_F26A

loc_F260:
add     [rbp+i_0], 1

loc_F264:
cmp     [rbp+i_0], 0
jle     short loc_F20E

loc_F26A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F2BA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_1]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F2BA:
cmp     [rbp+state], 0
jnz     short loc_F2CD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_F2CE

loc_F2CD:
nop

loc_F2CE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F31B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F31B:
cmp     [rbp+state], 0
jnz     short loc_F33A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_F343

loc_F33A:
add     [rbp+i], 1
jmp     loc_F185

loc_F343:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F39B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3887 ; "chunk_ext"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F39B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F148
chunk_ext endp



; Attributes: bp-based frame

; int __cdecl chunk_ext_name(ctx *c)
public chunk_ext_name
chunk_ext_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F3E7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_F3E7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F43F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3895 ; "chunk_ext_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F43F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F3A1
chunk_ext_name endp



; Attributes: bp-based frame

; int __cdecl chunk_ext_val(ctx *c)
public chunk_ext_val
chunk_ext_val proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F48B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_F48B:
cmp     [rbp+state], 0
jnz     short loc_F4BC
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_F4BD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    quoted_string
mov     [rbp+state], al
jmp     short loc_F4BD

loc_F4BC:
nop

loc_F4BD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F515
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3905 ; "chunk_ext_val"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F515:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F445
chunk_ext_val endp



; Attributes: bp-based frame

; int __cdecl chunk_size(ctx *c)
public chunk_size
chunk_size proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F598
mov     [rbp+i], 0

loc_F554:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_F574
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __hexdig
mov     [rbp+state], al

loc_F574:
cmp     [rbp+state], 0
jnz     short loc_F592
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_F598

loc_F592:
add     [rbp+i], 1
jmp     short loc_F554

loc_F598:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F5F0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3915 ; "chunk_size"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F5F0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F51B
chunk_size endp



; Attributes: bp-based frame

; int __cdecl chunked_body(ctx *c)
public chunked_body
chunked_body proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F674
mov     [rbp+i], 0

loc_F62F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_F64F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    chunk
mov     [rbp+state], al

loc_F64F:
cmp     [rbp+state], 0
jnz     short loc_F66E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_F674

loc_F66E:
add     [rbp+i], 1
jmp     short loc_F62F

loc_F674:
cmp     [rbp+state], 0
jz      short loc_F68E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    last_chunk
mov     [rbp+state], al

loc_F68E:
cmp     [rbp+state], 0
jz      short loc_F6A8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    trailer_part
mov     [rbp+state], al

loc_F6A8:
cmp     [rbp+state], 0
jz      short loc_F6BD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_F6BD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F715
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3929 ; "chunked_body"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F715:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F5F6
chunked_body endp



; Attributes: bp-based frame

; int __cdecl comment(ctx *c)
comment proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp             ; Alternative name is 'comment'
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F761
mov     rax, [rbp+c]
mov     esi, 28h ; '('  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_F761:
cmp     [rbp+state], 0
jz      loc_F89F
mov     [rbp+i], 0

loc_F772:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_F82A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_F7BD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    ctext
mov     [rbp+state], al

loc_F7BD:
cmp     [rbp+state], 0
jnz     short loc_F829
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_F7EC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    quoted_pair
mov     [rbp+state], al

loc_F7EC:
cmp     [rbp+state], 0
jnz     short loc_F829
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_F816
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    comment
mov     [rbp+state], al

loc_F816:
cmp     [rbp+state], 0
jnz     short loc_F829
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_F82A

loc_F829:
nop

loc_F82A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F877
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F877:
cmp     [rbp+state], 0
jnz     short loc_F896
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_F89F

loc_F896:
add     [rbp+i], 1
jmp     loc_F772

loc_F89F:
cmp     [rbp+state], 0
jz      short loc_F8B9
mov     rax, [rbp+c]
mov     esi, 29h ; ')'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_F8B9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F911
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3945 ; "comment"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F911:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F71B
comment endp



; Attributes: bp-based frame

; int __cdecl connection_option(ctx *c)
public connection_option
connection_option proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F95D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_F95D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_F9B5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3952 ; "connection_option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_F9B5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F917
connection_option endp



; Attributes: bp-based frame

; int __cdecl ctext(ctx *c)
public ctext
ctext proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_F9FC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_F9FC:
cmp     [rbp+state], 0
jnz     loc_FAFF
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FA2A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_FA2A:
cmp     [rbp+state], 0
jnz     loc_FB02
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FA62
mov     rax, [rbp+c]
mov     edx, 27h ; '''  ; y
mov     esi, 21h ; '!'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_FA62:
cmp     [rbp+state], 0
jnz     loc_FB05
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FA9A
mov     rax, [rbp+c]
mov     edx, 5Bh ; '['  ; y
mov     esi, 2Ah ; '*'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_FA9A:
cmp     [rbp+state], 0
jnz     short loc_FB08
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FACE
mov     rax, [rbp+c]
mov     edx, 7Eh ; '~'  ; y
mov     esi, 5Dh ; ']'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_FACE:
cmp     [rbp+state], 0
jnz     short loc_FB0B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FB0C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    obs_text
mov     [rbp+state], al
jmp     short loc_FB0C

loc_FAFF:
nop
jmp     short loc_FB0C

loc_FB02:
nop
jmp     short loc_FB0C

loc_FB05:
nop
jmp     short loc_FB0C

loc_FB08:
nop
jmp     short loc_FB0C

loc_FB0B:
nop

loc_FB0C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FB64
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3961 ; "ctext"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FB64:
movsx   eax, [rbp+state]
leave
retn
; } // starts at F9BB
ctext endp



; Attributes: bp-based frame

; int __cdecl field_content(ctx *c)
public field_content
field_content proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_FBB0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    field_vchar
mov     [rbp+state], al

loc_FBB0:
cmp     [rbp+state], 0
jnz     short loc_FC06
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FBDA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_FBDA:
cmp     [rbp+state], 0
jnz     short loc_FC09
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FC0A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al
jmp     short loc_FC0A

loc_FC06:
nop
jmp     short loc_FC0A

loc_FC09:
nop

loc_FC0A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FC62
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3970 ; "field_content"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FC62:
movsx   eax, [rbp+state]
leave
retn
; } // starts at FB6A
field_content endp



; Attributes: bp-based frame

; int __cdecl field_name(ctx *c)
public field_name
field_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_FCAE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_FCAE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FD06
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3977 ; "field_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FD06:
movsx   eax, [rbp+state]
leave
retn
; } // starts at FC68
field_name endp



; Attributes: bp-based frame

; int __cdecl field_value(ctx *c)
public field_value
field_value proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_FE43
mov     [rbp+i], 0

loc_FD49:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_FDCE
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_FD8B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    field_content
mov     [rbp+state], al

loc_FD8B:
cmp     [rbp+state], 0
jnz     short loc_FDCD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FDBA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    obs_fold
mov     [rbp+state], al

loc_FDBA:
cmp     [rbp+state], 0
jnz     short loc_FDCD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_FDCE

loc_FDCD:
nop

loc_FDCE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FE1B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FE1B:
cmp     [rbp+state], 0
jnz     short loc_FE3A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_FE43

loc_FE3A:
add     [rbp+i], 1
jmp     loc_FD49

loc_FE43:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FE9B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3991 ; "field_value"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FE9B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at FD0C
field_value endp



; Attributes: bp-based frame

; int __cdecl field_vchar(ctx *c)
public field_vchar
field_vchar proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_FEE2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __vchar
mov     [rbp+state], al

loc_FEE2:
cmp     [rbp+state], 0
jnz     short loc_FF13
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_FF14
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    obs_text
mov     [rbp+state], al
jmp     short loc_FF14

loc_FF13:
nop

loc_FF14:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_FF6C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___3999 ; "field_vchar"
mov     rdi, rax
mov     eax, 0
call    r9

loc_FF6C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at FEA1
field_vchar endp



; Attributes: bp-based frame

; int __cdecl http_URI(ctx *c)
public http_URI
http_URI proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_FFBA
mov     rax, [rbp+c]
lea     rsi, aHttp      ; "HTTP://"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_FFBA:
cmp     [rbp+state], 0
jz      short loc_FFCF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    authority
mov     [rbp+state], al

loc_FFCF:
cmp     [rbp+state], 0
jz      short loc_FFE4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    path_abempty
mov     [rbp+state], al

loc_FFE4:
cmp     [rbp+state], 0
jz      loc_100AF
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_10059

loc_10008:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1002D
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1002D:
cmp     [rbp+state], 0
jz      short loc_10042
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    query
mov     [rbp+state], al

loc_10042:
cmp     [rbp+state], 0
jnz     short loc_10055
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1005F

loc_10055:
add     [rbp+i], 1

loc_10059:
cmp     [rbp+i], 0
jle     short loc_10008

loc_1005F:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_100AF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_100AF:
cmp     [rbp+state], 0
jz      loc_1017A
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_10124

loc_100D3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_100F8
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_100F8:
cmp     [rbp+state], 0
jz      short loc_1010D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    fragment
mov     [rbp+state], al

loc_1010D:
cmp     [rbp+state], 0
jnz     short loc_10120
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1012A

loc_10120:
add     [rbp+i_0], 1

loc_10124:
cmp     [rbp+i_0], 0
jle     short loc_100D3

loc_1012A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1017A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1017A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_101D2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4015 ; "http_URI"
mov     rdi, rax
mov     eax, 0
call    r9

loc_101D2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at FF72
http_URI endp



; Attributes: bp-based frame

; int __cdecl https_URI(ctx *c)
public https_URI
https_URI proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10220
mov     rax, [rbp+c]
lea     rsi, aHttps     ; "HTTPS://"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_10220:
cmp     [rbp+state], 0
jz      short loc_10235
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    authority
mov     [rbp+state], al

loc_10235:
cmp     [rbp+state], 0
jz      short loc_1024A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    path_abempty
mov     [rbp+state], al

loc_1024A:
cmp     [rbp+state], 0
jz      loc_10315
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_102BF

loc_1026E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_10293
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_10293:
cmp     [rbp+state], 0
jz      short loc_102A8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    query
mov     [rbp+state], al

loc_102A8:
cmp     [rbp+state], 0
jnz     short loc_102BB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_102C5

loc_102BB:
add     [rbp+i], 1

loc_102BF:
cmp     [rbp+i], 0
jle     short loc_1026E

loc_102C5:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10315
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10315:
cmp     [rbp+state], 0
jz      loc_103E0
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_1038A

loc_10339:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1035E
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1035E:
cmp     [rbp+state], 0
jz      short loc_10373
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    fragment
mov     [rbp+state], al

loc_10373:
cmp     [rbp+state], 0
jnz     short loc_10386
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_10390

loc_10386:
add     [rbp+i_0], 1

loc_1038A:
cmp     [rbp+i_0], 0
jle     short loc_10339

loc_10390:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_103E0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_103E0:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10438
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4031 ; "https_URI"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10438:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 101D8
https_URI endp



; Attributes: bp-based frame

; int __cdecl last_chunk(ctx *c)
public last_chunk
last_chunk proc near

c= qword ptr -38h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_104C0
mov     [rbp+i], 0

loc_10477:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1049C
mov     rax, [rbp+c]
mov     esi, 30h ; '0'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1049C:
cmp     [rbp+state], 0
jnz     short loc_104BA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_104C0

loc_104BA:
add     [rbp+i], 1
jmp     short loc_10477

loc_104C0:
cmp     [rbp+state], 0
jz      loc_10571
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_1051B

loc_104E4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_10504
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    chunk_ext
mov     [rbp+state], al

loc_10504:
cmp     [rbp+state], 0
jnz     short loc_10517
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_10521

loc_10517:
add     [rbp+i_0], 1

loc_1051B:
cmp     [rbp+i_0], 0
jle     short loc_104E4

loc_10521:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10571
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10571:
cmp     [rbp+state], 0
jz      short loc_10586
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_10586:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_105DE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4046 ; "last_chunk"
mov     rdi, rax
mov     eax, 0
call    r9

loc_105DE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1043E
last_chunk endp



; Attributes: bp-based frame

; int __cdecl message_body(ctx *c)
public message_body
message_body proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10662
mov     [rbp+i], 0

loc_1061D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1063D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __octet
mov     [rbp+state], al

loc_1063D:
cmp     [rbp+state], 0
jnz     short loc_1065C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_10662

loc_1065C:
add     [rbp+i], 1
jmp     short loc_1061D

loc_10662:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_106BA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4056 ; "message_body"
mov     rdi, rax
mov     eax, 0
call    r9

loc_106BA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 105E4
message_body endp



; Attributes: bp-based frame

; int __cdecl method(ctx *c)
public method
method proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10706
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_10706:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1075E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4063 ; "method"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1075E:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 106C0
method endp



; Attributes: bp-based frame

; int __cdecl obs_fold(ctx *c)
public obs_fold
obs_fold proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_107A5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_107A5:
cmp     [rbp+state], 0
jz      loc_108AA
mov     [rbp+i], 0

loc_107B6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_10836
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_107F8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_107F8:
cmp     [rbp+state], 0
jnz     short loc_10835
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_10822
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_10822:
cmp     [rbp+state], 0
jnz     short loc_10835
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_10836

loc_10835:
nop

loc_10836:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10883
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10883:
cmp     [rbp+state], 0
jnz     short loc_108A1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_108AA

loc_108A1:
add     [rbp+i], 1
jmp     loc_107B6

loc_108AA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10902
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4075 ; "obs_fold"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10902:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10764
obs_fold endp



; Attributes: bp-based frame

; int __cdecl obs_text(ctx *c)
public obs_text
obs_text proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10953
mov     rax, [rbp+c]
mov     edx, 0FFFFFFFFh ; y
mov     esi, 0FFFFFF80h ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_10953:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_109AB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4081 ; "obs_text"
mov     rdi, rax
mov     eax, 0
call    r9

loc_109AB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10908
obs_text endp



; Attributes: bp-based frame

; int __cdecl origin_form(ctx *c)
public origin_form
origin_form proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_109F2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    absolute_path
mov     [rbp+state], al

loc_109F2:
cmp     [rbp+state], 0
jz      loc_10ABD
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_10A67

loc_10A16:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_10A3B
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_10A3B:
cmp     [rbp+state], 0
jz      short loc_10A50
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    query
mov     [rbp+state], al

loc_10A50:
cmp     [rbp+state], 0
jnz     short loc_10A63
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_10A6D

loc_10A63:
add     [rbp+i], 1

loc_10A67:
cmp     [rbp+i], 0
jle     short loc_10A16

loc_10A6D:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10ABD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10ABD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10B15
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4092 ; "origin_form"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10B15:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 109B1
origin_form endp



; Attributes: bp-based frame

; int __cdecl partial_URI(ctx *c)
public partial_URI
partial_URI proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10B5C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    relative_part
mov     [rbp+state], al

loc_10B5C:
cmp     [rbp+state], 0
jz      loc_10C27
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_10BD1

loc_10B80:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_10BA5
mov     rax, [rbp+c]
mov     esi, 3Fh ; '?'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_10BA5:
cmp     [rbp+state], 0
jz      short loc_10BBA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    query
mov     [rbp+state], al

loc_10BBA:
cmp     [rbp+state], 0
jnz     short loc_10BCD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_10BD7

loc_10BCD:
add     [rbp+i], 1

loc_10BD1:
cmp     [rbp+i], 0
jle     short loc_10B80

loc_10BD7:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10C27
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10C27:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10C7F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4103 ; "partial_URI"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10C7F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10B1B
partial_URI endp



; Attributes: bp-based frame

; int __cdecl protocol(ctx *c)
public protocol
protocol proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10CCB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    protocol_name
mov     [rbp+state], al

loc_10CCB:
cmp     [rbp+state], 0
jz      loc_10D9B
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_10D45

loc_10CEF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_10D14
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_10D14:
cmp     [rbp+state], 0
jz      short loc_10D2E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    protocol_version
mov     [rbp+state], al

loc_10D2E:
cmp     [rbp+state], 0
jnz     short loc_10D41
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_10D4B

loc_10D41:
add     [rbp+i], 1

loc_10D45:
cmp     [rbp+i], 0
jle     short loc_10CEF

loc_10D4B:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10D9B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10D9B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10DF3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4118 ; "protocol"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10DF3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10C85
protocol endp



; Attributes: bp-based frame

; int __cdecl protocol_name(ctx *c)
public protocol_name
protocol_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10E3F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_10E3F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10E97
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4125 ; "protocol_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10E97:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10DF9
protocol_name endp



; Attributes: bp-based frame

; int __cdecl protocol_version(ctx *c)
public protocol_version
protocol_version proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10EE3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_10EE3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10F3B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4132 ; "protocol_version"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10F3B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10E9D
protocol_version endp



; Attributes: bp-based frame

; int __cdecl pseudonym(ctx *c)
public pseudonym
pseudonym proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_10F87
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token
mov     [rbp+state], al

loc_10F87:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_10FDF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4139 ; "pseudonym"
mov     rdi, rax
mov     eax, 0
call    r9

loc_10FDF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10F41
pseudonym endp



; Attributes: bp-based frame

; int __cdecl qdtext(ctx *c)
public qdtext
qdtext proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_11026
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_11026:
cmp     [rbp+state], 0
jnz     loc_1111F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11054
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_11054:
cmp     [rbp+state], 0
jnz     loc_11122
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11087
mov     rax, [rbp+c]
mov     esi, 21h ; '!'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_11087:
cmp     [rbp+state], 0
jnz     loc_11125
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_110BF
mov     rax, [rbp+c]
mov     edx, 5Bh ; '['  ; y
mov     esi, 23h ; '#'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_110BF:
cmp     [rbp+state], 0
jnz     short loc_11128
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_110F3
mov     rax, [rbp+c]
mov     edx, 7Eh ; '~'  ; y
mov     esi, 5Dh ; ']'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_110F3:
cmp     [rbp+state], 0
jnz     short loc_1112B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1112C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    obs_text
mov     [rbp+state], al
jmp     short loc_1112C

loc_1111F:
nop
jmp     short loc_1112C

loc_11122:
nop
jmp     short loc_1112C

loc_11125:
nop
jmp     short loc_1112C

loc_11128:
nop
jmp     short loc_1112C

loc_1112B:
nop

loc_1112C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11184
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4146 ; "qdtext"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11184:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 10FE5
qdtext endp



; Attributes: bp-based frame

; int __cdecl quoted_pair(ctx *c)
public quoted_pair
quoted_pair proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_111D0
mov     rax, [rbp+c]
mov     esi, 5Ch ; '\'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_111D0:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_112AA
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1120B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_1120B:
cmp     [rbp+state], 0
jnz     loc_112A0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11239
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_11239:
cmp     [rbp+state], 0
jnz     short loc_112A3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11263
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __vchar
mov     [rbp+state], al

loc_11263:
cmp     [rbp+state], 0
jnz     short loc_112A6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1128D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    obs_text
mov     [rbp+state], al

loc_1128D:
cmp     [rbp+state], 0
jnz     short loc_112A9
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_112AA

loc_112A0:
nop
jmp     short loc_112AA

loc_112A3:
nop
jmp     short loc_112AA

loc_112A6:
nop
jmp     short loc_112AA

loc_112A9:
nop

loc_112AA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_112F7
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_112F7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1134F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4154 ; "quoted_pair"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1134F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1118A
quoted_pair endp



; Attributes: bp-based frame

; int __cdecl quoted_string(ctx *c)
public quoted_string
quoted_string proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_11396
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_11396:
cmp     [rbp+state], 0
jz      loc_1149C
mov     [rbp+i], 0

loc_113A7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_11427
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_113E9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    qdtext
mov     [rbp+state], al

loc_113E9:
cmp     [rbp+state], 0
jnz     short loc_11426
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11413
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_pair
mov     [rbp+state], al

loc_11413:
cmp     [rbp+state], 0
jnz     short loc_11426
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_11427

loc_11426:
nop

loc_11427:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11474
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11474:
cmp     [rbp+state], 0
jnz     short loc_11493
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1149C

loc_11493:
add     [rbp+i], 1
jmp     loc_113A7

loc_1149C:
cmp     [rbp+state], 0
jz      short loc_114B1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_114B1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11509
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4166 ; "quoted_string"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11509:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11355
quoted_string endp



; Attributes: bp-based frame

; int __cdecl rank(ctx *c)
public rank
rank proc near

c= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_116B3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1157B
mov     rax, [rbp+c]
mov     esi, 30h ; '0'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1157B:
cmp     [rbp+state], 0
jz      loc_1169F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_11645

loc_115A2:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_115C7
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_115C7:
cmp     [rbp+state], 0
jz      short loc_1162E
mov     [rbp+i_0], 0
jmp     short loc_1160D

loc_115D6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_115F6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_115F6:
cmp     [rbp+state], 0
jnz     short loc_11609
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_11613

loc_11609:
add     [rbp+i_0], 1

loc_1160D:
cmp     [rbp+i_0], 2
jle     short loc_115D6

loc_11613:
cmp     [rbp+i_0], 0
js      short loc_11626
cmp     [rbp+i_0], 3
jg      short loc_11626
mov     eax, 1
jmp     short loc_1162B

loc_11626:
mov     eax, 0

loc_1162B:
mov     [rbp+state], al

loc_1162E:
cmp     [rbp+state], 0
jnz     short loc_11641
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1164F

loc_11641:
add     [rbp+i], 1

loc_11645:
cmp     [rbp+i], 0
jle     loc_115A2

loc_1164F:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1169F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_0]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1169F:
cmp     [rbp+state], 0
jnz     short loc_116B2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_116B3

loc_116B2:
nop

loc_116B3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11700
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11700:
cmp     [rbp+state], 0
jnz     loc_118E5
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_11896
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_11759
mov     rax, [rbp+c]
mov     esi, 31h ; '1'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_11759:
cmp     [rbp+state], 0
jz      loc_11882
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     loc_11828

loc_11780:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_117A5
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_117A5:
cmp     [rbp+state], 0
jz      short loc_11811
mov     [rbp+i_2], 0
jmp     short loc_117F0

loc_117B4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_117D9
mov     rax, [rbp+c]
mov     esi, 30h ; '0'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_117D9:
cmp     [rbp+state], 0
jnz     short loc_117EC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_117F6

loc_117EC:
add     [rbp+i_2], 1

loc_117F0:
cmp     [rbp+i_2], 2
jle     short loc_117B4

loc_117F6:
cmp     [rbp+i_2], 0
js      short loc_11809
cmp     [rbp+i_2], 3
jg      short loc_11809
mov     eax, 1
jmp     short loc_1180E

loc_11809:
mov     eax, 0

loc_1180E:
mov     [rbp+state], al

loc_11811:
cmp     [rbp+state], 0
jnz     short loc_11824
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_11832

loc_11824:
add     [rbp+i_1], 1

loc_11828:
cmp     [rbp+i_1], 0
jle     loc_11780

loc_11832:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11882
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11882:
cmp     [rbp+state], 0
jnz     short loc_11895
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_11896

loc_11895:
nop

loc_11896:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_118E6
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_118E6

loc_118E5:
nop

loc_118E6:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1193E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4197 ; "rank"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1193E:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1150F
rank endp



; Attributes: bp-based frame

; int __cdecl reason_phrase(ctx *c)
public reason_phrase
reason_phrase proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_11AD2
mov     [rbp+i], 0

loc_11981:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_11A5D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_119C7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __htab
mov     [rbp+state], al

loc_119C7:
cmp     [rbp+state], 0
jnz     loc_11A5C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_119F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_119F5:
cmp     [rbp+state], 0
jnz     short loc_11A5C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11A1F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __vchar
mov     [rbp+state], al

loc_11A1F:
cmp     [rbp+state], 0
jnz     short loc_11A5C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11A49
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    obs_text
mov     [rbp+state], al

loc_11A49:
cmp     [rbp+state], 0
jnz     short loc_11A5C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_11A5D

loc_11A5C:
nop

loc_11A5D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11AAA
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11AAA:
cmp     [rbp+state], 0
jnz     short loc_11AC9
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_11AD2

loc_11AC9:
add     [rbp+i], 1
jmp     loc_11981

loc_11AD2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11B2A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4209 ; "reason_phrase"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11B2A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11944
reason_phrase endp



; Attributes: bp-based frame

; int __cdecl received_by(ctx *c)
public received_by
received_by proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_11C7B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_11B9C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    uri_host
mov     [rbp+state], al

loc_11B9C:
cmp     [rbp+state], 0
jz      loc_11C67
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_11C11

loc_11BC0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_11BE5
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_11BE5:
cmp     [rbp+state], 0
jz      short loc_11BFA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    port
mov     [rbp+state], al

loc_11BFA:
cmp     [rbp+state], 0
jnz     short loc_11C0D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_11C17

loc_11C0D:
add     [rbp+i], 1

loc_11C11:
cmp     [rbp+i], 0
jle     short loc_11BC0

loc_11C17:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11C67
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_0]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11C67:
cmp     [rbp+state], 0
jnz     short loc_11C7A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_11C7B

loc_11C7A:
nop

loc_11C7B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11CC8
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11CC8:
cmp     [rbp+state], 0
jnz     short loc_11CF4
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_11CF5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    pseudonym
mov     [rbp+state], al
jmp     short loc_11CF5

loc_11CF4:
nop

loc_11CF5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11D4D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4224 ; "received_by"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11D4D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11B30
received_by endp



; Attributes: bp-based frame

; int __cdecl received_protocol(ctx *c)
public received_protocol
received_protocol proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_11E4A
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_11DF4

loc_11DA3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_11DC3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    protocol_name
mov     [rbp+state], al

loc_11DC3:
cmp     [rbp+state], 0
jz      short loc_11DDD
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_11DDD:
cmp     [rbp+state], 0
jnz     short loc_11DF0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_11DFA

loc_11DF0:
add     [rbp+i], 1

loc_11DF4:
cmp     [rbp+i], 0
jle     short loc_11DA3

loc_11DFA:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11E4A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11E4A:
cmp     [rbp+state], 0
jz      short loc_11E5F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    protocol_version
mov     [rbp+state], al

loc_11E5F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11EB7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4235 ; "received_protocol"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11EB7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11D53
received_protocol endp



; Attributes: bp-based frame

; int __cdecl request_line(ctx *c)
public request_line
request_line proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_11EFE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    method
mov     [rbp+state], al

loc_11EFE:
cmp     [rbp+state], 0
jz      short loc_11F13
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_11F13:
cmp     [rbp+state], 0
jz      short loc_11F2D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    request_target
mov     [rbp+state], al

loc_11F2D:
cmp     [rbp+state], 0
jz      short loc_11F42
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_11F42:
cmp     [rbp+state], 0
jz      short loc_11F57
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_version
mov     [rbp+state], al

loc_11F57:
cmp     [rbp+state], 0
jz      short loc_11F6C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_11F6C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_11FC4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4243 ; "request_line"
mov     rdi, rax
mov     eax, 0
call    r9

loc_11FC4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11EBD
request_line endp



; Attributes: bp-based frame

; int __cdecl request_target(ctx *c)
public request_target
request_target proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1200B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    origin_form
mov     [rbp+state], al

loc_1200B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12063
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4249 ; "request_target"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12063:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 11FCA
request_target endp



; Attributes: bp-based frame

; int __cdecl start_line(ctx *c)
public start_line
start_line proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_120AA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    request_line
mov     [rbp+state], al

loc_120AA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12102
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4255 ; "start_line"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12102:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12069
start_line endp



; Attributes: bp-based frame

; int __cdecl status_code(ctx *c)
public status_code
status_code proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1219B
mov     [rbp+i], 0
jmp     short loc_1217A

loc_12143:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_12163
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_12163:
cmp     [rbp+state], 0
jnz     short loc_12176
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_12180

loc_12176:
add     [rbp+i], 1

loc_1217A:
cmp     [rbp+i], 2
jle     short loc_12143

loc_12180:
cmp     [rbp+i], 2
jle     short loc_12193
cmp     [rbp+i], 3
jg      short loc_12193
mov     eax, 1
jmp     short loc_12198

loc_12193:
mov     eax, 0

loc_12198:
mov     [rbp+state], al

loc_1219B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_121F3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4266 ; "status_code"
mov     rdi, rax
mov     eax, 0
call    r9

loc_121F3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12108
status_code endp



; Attributes: bp-based frame

; int __cdecl status_line(ctx *c)
public status_line
status_line proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1223A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_version
mov     [rbp+state], al

loc_1223A:
cmp     [rbp+state], 0
jz      short loc_1224F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1224F:
cmp     [rbp+state], 0
jz      short loc_12264
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    status_code
mov     [rbp+state], al

loc_12264:
cmp     [rbp+state], 0
jz      short loc_12279
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_12279:
cmp     [rbp+state], 0
jz      short loc_1228E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    reason_phrase
mov     [rbp+state], al

loc_1228E:
cmp     [rbp+state], 0
jz      short loc_122A3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_122A3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_122FB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4272 ; "status_line"
mov     rdi, rax
mov     eax, 0
call    r9

loc_122FB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 121F9
status_line endp



; Attributes: bp-based frame

; int __cdecl t_codings(ctx *c)
public t_codings
t_codings proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_12349
mov     rax, [rbp+c]
lea     rsi, aTrailers  ; "TRAILERS"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_12349:
cmp     [rbp+state], 0
jnz     loc_124BB
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1246C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_123A2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    transfer_coding
mov     [rbp+state], al

loc_123A2:
cmp     [rbp+state], 0
jz      loc_12458
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_12402

loc_123C6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_123EB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    t_ranking
mov     [rbp+state], al

loc_123EB:
cmp     [rbp+state], 0
jnz     short loc_123FE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_12408

loc_123FE:
add     [rbp+i], 1

loc_12402:
cmp     [rbp+i], 0
jle     short loc_123C6

loc_12408:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12458
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_0]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12458:
cmp     [rbp+state], 0
jnz     short loc_1246B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1246C

loc_1246B:
nop

loc_1246C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_124BC
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_124BC

loc_124BB:
nop

loc_124BC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12514
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4289 ; "t_codings"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12514:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12301
t_codings endp



; Attributes: bp-based frame

; int __cdecl t_ranking(ctx *c)
public t_ranking
t_ranking proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1255B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1255B:
cmp     [rbp+state], 0
jz      short loc_12575
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12575:
cmp     [rbp+state], 0
jz      short loc_1258A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1258A:
cmp     [rbp+state], 0
jz      short loc_125A6
mov     rax, [rbp+c]
lea     rsi, aQ         ; "Q="
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_125A6:
cmp     [rbp+state], 0
jz      short loc_125BB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    rank
mov     [rbp+state], al

loc_125BB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12613
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4295 ; "t_ranking"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12613:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1251A
t_ranking endp



; Attributes: bp-based frame

; int __cdecl tchar(ctx *c)
public tchar
tchar proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1265F
mov     rax, [rbp+c]
mov     esi, 21h ; '!'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1265F:
cmp     [rbp+state], 0
jnz     loc_1297F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12692
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12692:
cmp     [rbp+state], 0
jnz     loc_12982
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_126C5
mov     rax, [rbp+c]
mov     esi, 24h ; '$'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_126C5:
cmp     [rbp+state], 0
jnz     loc_12985
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_126F8
mov     rax, [rbp+c]
mov     esi, 25h ; '%'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_126F8:
cmp     [rbp+state], 0
jnz     loc_12988
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1272B
mov     rax, [rbp+c]
mov     esi, 26h ; '&'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1272B:
cmp     [rbp+state], 0
jnz     loc_1298B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1275E
mov     rax, [rbp+c]
mov     esi, 27h ; '''  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1275E:
cmp     [rbp+state], 0
jnz     loc_1298E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12791
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12791:
cmp     [rbp+state], 0
jnz     loc_12991
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_127C4
mov     rax, [rbp+c]
mov     esi, 2Bh ; '+'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_127C4:
cmp     [rbp+state], 0
jnz     loc_12994
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_127F7
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_127F7:
cmp     [rbp+state], 0
jnz     loc_12997
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1282A
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1282A:
cmp     [rbp+state], 0
jnz     loc_1299A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1285D
mov     rax, [rbp+c]
mov     esi, 5Eh ; '^'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1285D:
cmp     [rbp+state], 0
jnz     loc_1299D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12890
mov     rax, [rbp+c]
mov     esi, 5Fh ; '_'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12890:
cmp     [rbp+state], 0
jnz     loc_129A0
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_128C3
mov     rax, [rbp+c]
mov     esi, 60h ; '`'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_128C3:
cmp     [rbp+state], 0
jnz     loc_129A3
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_128F6
mov     rax, [rbp+c]
mov     esi, 7Ch ; '|'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_128F6:
cmp     [rbp+state], 0
jnz     loc_129A6
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12929
mov     rax, [rbp+c]
mov     esi, 7Eh ; '~'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12929:
cmp     [rbp+state], 0
jnz     short loc_129A9
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12953
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_12953:
cmp     [rbp+state], 0
jnz     short loc_129AC
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_129AD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al
jmp     short loc_129AD

loc_1297F:
nop
jmp     short loc_129AD

loc_12982:
nop
jmp     short loc_129AD

loc_12985:
nop
jmp     short loc_129AD

loc_12988:
nop
jmp     short loc_129AD

loc_1298B:
nop
jmp     short loc_129AD

loc_1298E:
nop
jmp     short loc_129AD

loc_12991:
nop
jmp     short loc_129AD

loc_12994:
nop
jmp     short loc_129AD

loc_12997:
nop
jmp     short loc_129AD

loc_1299A:
nop
jmp     short loc_129AD

loc_1299D:
nop
jmp     short loc_129AD

loc_129A0:
nop
jmp     short loc_129AD

loc_129A3:
nop
jmp     short loc_129AD

loc_129A6:
nop
jmp     short loc_129AD

loc_129A9:
nop
jmp     short loc_129AD

loc_129AC:
nop

loc_129AD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12A05
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4302 ; "tchar"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12A05:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12619
tchar endp



; Attributes: bp-based frame

; int __cdecl token(ctx *c)
public token
token proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_12A88
mov     [rbp+i], 0

loc_12A44:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_12A64
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    tchar
mov     [rbp+state], al

loc_12A64:
cmp     [rbp+state], 0
jnz     short loc_12A82
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_12A88

loc_12A82:
add     [rbp+i], 1
jmp     short loc_12A44

loc_12A88:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12AE0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4312 ; "token"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12AE0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12A0B
token endp



; Attributes: bp-based frame

; int __cdecl notq(ctx *c)
public notq
notq proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_12B31
mov     rax, [rbp+c]
mov     edx, 5Ah ; 'Z'  ; y
mov     esi, 41h ; 'A'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_12B31:
cmp     [rbp+state], 0
jnz     short loc_12B9B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12B65
mov     rax, [rbp+c]
mov     edx, 70h ; 'p'  ; y
mov     esi, 61h ; 'a'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_12B65:
cmp     [rbp+state], 0
jnz     short loc_12B9E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12B9F
mov     rax, [rbp+c]
mov     edx, 7Ah ; 'z'  ; y
mov     esi, 72h ; 'r'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al
jmp     short loc_12B9F

loc_12B9B:
nop
jmp     short loc_12B9F

loc_12B9E:
nop

loc_12B9F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_12BF7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4319 ; "notq"
mov     rdi, rax
mov     eax, 0
call    r9

loc_12BF7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12AE6
notq endp



; Attributes: bp-based frame

; int __cdecl notqtoken(ctx *c)
public notqtoken
notqtoken proc near

c= qword ptr -48h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_130A8
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_12FF5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_12C8F
mov     rax, [rbp+c]
mov     esi, 21h ; '!'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12C8F:
cmp     [rbp+state], 0
jnz     loc_12FC4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12CC2
mov     rax, [rbp+c]
mov     esi, 23h ; '#'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12CC2:
cmp     [rbp+state], 0
jnz     loc_12FC7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12CF5
mov     rax, [rbp+c]
mov     esi, 24h ; '$'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12CF5:
cmp     [rbp+state], 0
jnz     loc_12FCA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12D28
mov     rax, [rbp+c]
mov     esi, 25h ; '%'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12D28:
cmp     [rbp+state], 0
jnz     loc_12FCD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12D5B
mov     rax, [rbp+c]
mov     esi, 26h ; '&'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12D5B:
cmp     [rbp+state], 0
jnz     loc_12FD0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12D8E
mov     rax, [rbp+c]
mov     esi, 27h ; '''  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12D8E:
cmp     [rbp+state], 0
jnz     loc_12FD3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12DC1
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12DC1:
cmp     [rbp+state], 0
jnz     loc_12FD6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12DF4
mov     rax, [rbp+c]
mov     esi, 2Bh ; '+'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12DF4:
cmp     [rbp+state], 0
jnz     loc_12FD9
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12E27
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12E27:
cmp     [rbp+state], 0
jnz     loc_12FDC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12E5A
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12E5A:
cmp     [rbp+state], 0
jnz     loc_12FDF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12E8D
mov     rax, [rbp+c]
mov     esi, 5Eh ; '^'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12E8D:
cmp     [rbp+state], 0
jnz     loc_12FE2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12EC0
mov     rax, [rbp+c]
mov     esi, 5Fh ; '_'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12EC0:
cmp     [rbp+state], 0
jnz     loc_12FE5
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12EF3
mov     rax, [rbp+c]
mov     esi, 60h ; '`'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12EF3:
cmp     [rbp+state], 0
jnz     loc_12FE8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12F26
mov     rax, [rbp+c]
mov     esi, 7Ch ; '|'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12F26:
cmp     [rbp+state], 0
jnz     loc_12FEB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12F59
mov     rax, [rbp+c]
mov     esi, 7Eh ; '~'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_12F59:
cmp     [rbp+state], 0
jnz     loc_12FEE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12F87
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_12F87:
cmp     [rbp+state], 0
jnz     short loc_12FF1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_12FB1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    notq
mov     [rbp+state], al

loc_12FB1:
cmp     [rbp+state], 0
jnz     short loc_12FF4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_12FF5

loc_12FC4:
nop
jmp     short loc_12FF5

loc_12FC7:
nop
jmp     short loc_12FF5

loc_12FCA:
nop
jmp     short loc_12FF5

loc_12FCD:
nop
jmp     short loc_12FF5

loc_12FD0:
nop
jmp     short loc_12FF5

loc_12FD3:
nop
jmp     short loc_12FF5

loc_12FD6:
nop
jmp     short loc_12FF5

loc_12FD9:
nop
jmp     short loc_12FF5

loc_12FDC:
nop
jmp     short loc_12FF5

loc_12FDF:
nop
jmp     short loc_12FF5

loc_12FE2:
nop
jmp     short loc_12FF5

loc_12FE5:
nop
jmp     short loc_12FF5

loc_12FE8:
nop
jmp     short loc_12FF5

loc_12FEB:
nop
jmp     short loc_12FF5

loc_12FEE:
nop
jmp     short loc_12FF5

loc_12FF1:
nop
jmp     short loc_12FF5

loc_12FF4:
nop

loc_12FF5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13042
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13042:
cmp     [rbp+state], 0
jz      short loc_13094
mov     [rbp+i], 0

loc_1304F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1306F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    tchar
mov     [rbp+state], al

loc_1306F:
cmp     [rbp+state], 0
jnz     short loc_1308E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_13094

loc_1308E:
add     [rbp+i], 1
jmp     short loc_1304F

loc_13094:
cmp     [rbp+state], 0
jnz     short loc_130A7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_130A8

loc_130A7:
nop

loc_130A8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_130F5
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_130F5:
cmp     [rbp+state], 0
jnz     short loc_1315B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1315C
mov     [rbp+i_0], 0

loc_13117:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_13137
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    tchar
mov     [rbp+state], al

loc_13137:
cmp     [rbp+state], 0
jnz     short loc_13155
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
cmp     [rbp+i_0], 1
setnle  al
mov     [rbp+state], al
jmp     short loc_1315C

loc_13155:
add     [rbp+i_0], 1
jmp     short loc_13117

loc_1315B:
nop

loc_1315C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_131B4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4338 ; "notqtoken"
mov     rdi, rax
mov     eax, 0
call    r9

loc_131B4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 12BFD
notqtoken endp



; Attributes: bp-based frame

; int __cdecl trailer_part(ctx *c)
public trailer_part
trailer_part proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_132DC
mov     [rbp+i], 0

loc_131F7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_13267
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1323E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    header_field
mov     [rbp+state], al

loc_1323E:
cmp     [rbp+state], 0
jz      short loc_13253
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __crlf
mov     [rbp+state], al

loc_13253:
cmp     [rbp+state], 0
jnz     short loc_13266
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_13267

loc_13266:
nop

loc_13267:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_132B4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_132B4:
cmp     [rbp+state], 0
jnz     short loc_132D3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_132DC

loc_132D3:
add     [rbp+i], 1
jmp     loc_131F7

loc_132DC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13334
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4351 ; "trailer_part"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13334:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 131BA
trailer_part endp



; Attributes: bp-based frame

; int __cdecl transfer_coding(ctx *c)
public transfer_coding
transfer_coding proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_13382
mov     rax, [rbp+c]
lea     rsi, aChunked   ; "CHUNKED"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_13382:
cmp     [rbp+state], 0
jnz     loc_1344E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_133B7
mov     rax, [rbp+c]
lea     rsi, aCompress  ; "COMPRESS"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_133B7:
cmp     [rbp+state], 0
jnz     loc_13451
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_133EC
mov     rax, [rbp+c]
lea     rsi, aDeflate   ; "DEFLATE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_133EC:
cmp     [rbp+state], 0
jnz     short loc_13454
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1341D
mov     rax, [rbp+c]
lea     rsi, aGzip      ; "GZIP"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1341D:
cmp     [rbp+state], 0
jnz     short loc_13457
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_13458
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    transfer_extension
mov     [rbp+state], al
jmp     short loc_13458

loc_1344E:
nop
jmp     short loc_13458

loc_13451:
nop
jmp     short loc_13458

loc_13454:
nop
jmp     short loc_13458

loc_13457:
nop

loc_13458:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_134B0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4360 ; "transfer_coding"
mov     rdi, rax
mov     eax, 0
call    r9

loc_134B0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1333A
transfer_coding endp



; Attributes: bp-based frame

; int __cdecl transfer_extension(ctx *c)
public transfer_extension
transfer_extension proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_134F7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_134F7:
cmp     [rbp+state], 0
jz      loc_1361C
mov     [rbp+i], 0

loc_13508:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_135A7
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1354A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1354A:
cmp     [rbp+state], 0
jz      short loc_13564
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_13564:
cmp     [rbp+state], 0
jz      short loc_13579
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_13579:
cmp     [rbp+state], 0
jz      short loc_13593
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    transfer_parameter
mov     [rbp+state], al

loc_13593:
cmp     [rbp+state], 0
jnz     short loc_135A6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_135A7

loc_135A6:
nop

loc_135A7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_135F4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_135F4:
cmp     [rbp+state], 0
jnz     short loc_13613
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1361C

loc_13613:
add     [rbp+i], 1
jmp     loc_13508

loc_1361C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13674
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4374 ; "transfer_extension"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13674:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 134B6
transfer_extension endp



; Attributes: bp-based frame

; int __cdecl transfer_parameter(ctx *c)
public transfer_parameter
transfer_parameter proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_136BB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_136BB:
cmp     [rbp+state], 0
jz      short loc_136D0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    BWS
mov     [rbp+state], al

loc_136D0:
cmp     [rbp+state], 0
jz      short loc_136EA
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_136EA:
cmp     [rbp+state], 0
jz      short loc_136FF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    BWS
mov     [rbp+state], al

loc_136FF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_13777
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_13736
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_13736:
cmp     [rbp+state], 0
jnz     short loc_13773
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_13760
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_13760:
cmp     [rbp+state], 0
jnz     short loc_13776
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_13777

loc_13773:
nop
jmp     short loc_13777

loc_13776:
nop

loc_13777:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_137C4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_137C4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1381C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4382 ; "transfer_parameter"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1381C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1367A
transfer_parameter endp



; Attributes: bp-based frame

; int __cdecl uri_host(ctx *c)
public uri_host
uri_host proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_13863
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    host
mov     [rbp+state], al

loc_13863:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_138BB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4388 ; "uri_host"
mov     rdi, rax
mov     eax, 0
call    r9

loc_138BB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 13822
uri_host endp



; Attributes: bp-based frame

; int __cdecl Accept(ctx *c)
public Accept
Accept proc near

c= qword ptr -78h
save_8= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
add     rsp, 0FFFFFFFFFFFFFF80h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_13EAA
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_13E50

loc_13914:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_13AE3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1395F
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1395F:
cmp     [rbp+state], 0
jnz     loc_13AE2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_13A82
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_139B8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    media_range
mov     [rbp+state], al

loc_139B8:
cmp     [rbp+state], 0
jz      loc_13A6E
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_13A18

loc_139DC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_13A01
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    accept_params
mov     [rbp+state], al

loc_13A01:
cmp     [rbp+state], 0
jnz     short loc_13A14
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_13A1E

loc_13A14:
add     [rbp+i_0], 1

loc_13A18:
cmp     [rbp+i_0], 0
jle     short loc_139DC

loc_13A1E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13A6E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13A6E:
cmp     [rbp+state], 0
jnz     short loc_13A81
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_13A82

loc_13A81:
nop

loc_13A82:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13ACF
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13ACF:
cmp     [rbp+state], 0
jnz     short loc_13AE2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_13AE3

loc_13AE2:
nop

loc_13AE3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13B30
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13B30:
cmp     [rbp+state], 0
jz      loc_13E39
mov     [rbp+i_1], 0

loc_13B41:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_13DC4
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_13B87
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_13B87:
cmp     [rbp+state], 0
jz      short loc_13BA1
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_13BA1:
cmp     [rbp+state], 0
jz      loc_13DB0
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_2], 0
jmp     loc_13D56

loc_13BC8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_13BE8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_13BE8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_13CF2
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_13C28
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    media_range
mov     [rbp+state], al

loc_13C28:
cmp     [rbp+state], 0
jz      loc_13CDE
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_13C88

loc_13C4C:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
cmp     [rbp+state], 0
jz      short loc_13C71
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    accept_params
mov     [rbp+state], al

loc_13C71:
cmp     [rbp+state], 0
jnz     short loc_13C84
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_13C8E

loc_13C84:
add     [rbp+i_3], 1

loc_13C88:
cmp     [rbp+i_3], 0
jle     short loc_13C4C

loc_13C8E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13CDE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_7]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13CDE:
cmp     [rbp+state], 0
jnz     short loc_13CF1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_13CF2

loc_13CF1:
nop

loc_13CF2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13D3F
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_6]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13D3F:
cmp     [rbp+state], 0
jnz     short loc_13D52
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_13D60

loc_13D52:
add     [rbp+i_2], 1

loc_13D56:
cmp     [rbp+i_2], 0
jle     loc_13BC8

loc_13D60:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13DB0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_5]
mov     esi, [rbp+i_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13DB0:
cmp     [rbp+state], 0
jnz     short loc_13DC3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_13DC4

loc_13DC3:
nop

loc_13DC4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13E11
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_4]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13E11:
cmp     [rbp+state], 0
jnz     short loc_13E30
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_13E39

loc_13E30:
add     [rbp+i_1], 1
jmp     loc_13B41

loc_13E39:
cmp     [rbp+state], 0
jnz     short loc_13E4C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_13E5A

loc_13E4C:
add     [rbp+i], 1

loc_13E50:
cmp     [rbp+i], 0
jle     loc_13914

loc_13E5A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13EAA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13EAA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_13F02
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4432 ; "Accept"
mov     rdi, rax
mov     eax, 0
call    r9

loc_13F02:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 138C1
Accept endp



; Attributes: bp-based frame

; int __cdecl Accept_Charset(ctx *c)
public Accept_Charset
Accept_Charset proc near

c= qword ptr -88h
save_10= qword ptr -78h
save_9= qword ptr -70h
save_8= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 90h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_14060
mov     [rbp+i], 0

loc_13F54:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_13FD9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_13FAA
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_13FAA:
cmp     [rbp+state], 0
jz      short loc_13FC2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_13FC2:
cmp     [rbp+state], 0
jnz     short loc_13FD8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_13FD9

loc_13FD8:
nop

loc_13FD9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14035
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14035:
cmp     [rbp+state], 0
jnz     short loc_14057
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_14060

loc_14057:
add     [rbp+i], 1
jmp     loc_13F54

loc_14060:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1426D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_14126
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_140D7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    charset
mov     [rbp+state], al

loc_140D7:
cmp     [rbp+state], 0
jnz     short loc_14122
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1410C
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1410C:
cmp     [rbp+state], 0
jnz     short loc_14125
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_14126

loc_14122:
nop
jmp     short loc_14126

loc_14125:
nop

loc_14126:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14182
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14182:
cmp     [rbp+state], 0
jz      loc_14256
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_141F1

loc_141AC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_141D7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_141D7:
cmp     [rbp+state], 0
jnz     short loc_141ED
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_141F7

loc_141ED:
add     [rbp+i_0], 1

loc_141F1:
cmp     [rbp+i_0], 0
jle     short loc_141AC

loc_141F7:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14256
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14256:
cmp     [rbp+state], 0
jnz     short loc_1426C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1426D

loc_1426C:
nop

loc_1426D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_142C9
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_142C9:
cmp     [rbp+state], 0
jz      loc_14726
mov     [rbp+i_1], 0

loc_142DA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1469F
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_1432F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1432F:
cmp     [rbp+state], 0
jz      short loc_1434C
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1434C:
cmp     [rbp+state], 0
jz      loc_14688
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_2], 0
jmp     loc_1461F

loc_14379:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_1439F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1439F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_145A9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_14462
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_9], rax
cmp     [rbp+state], 0
jz      short loc_14416
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    charset
mov     [rbp+state], al

loc_14416:
cmp     [rbp+state], 0
jnz     short loc_14461
mov     rax, [rbp+c]
mov     rdx, [rbp+save_9]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1444B
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1444B:
cmp     [rbp+state], 0
jnz     short loc_14461
mov     rax, [rbp+c]
mov     rdx, [rbp+save_9]
mov     [rax], rdx
jmp     short loc_14462

loc_14461:
nop

loc_14462:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_144BE
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_8]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_144BE:
cmp     [rbp+state], 0
jz      loc_14592
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_1452D

loc_144E8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_10], rax
cmp     [rbp+state], 0
jz      short loc_14513
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_14513:
cmp     [rbp+state], 0
jnz     short loc_14529
mov     rax, [rbp+c]
mov     rdx, [rbp+save_10]
mov     [rax], rdx
jmp     short loc_14533

loc_14529:
add     [rbp+i_3], 1

loc_1452D:
cmp     [rbp+i_3], 0
jle     short loc_144E8

loc_14533:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14592
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_8]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14592:
cmp     [rbp+state], 0
jnz     short loc_145A8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_145A9

loc_145A8:
nop

loc_145A9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14605
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_7]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14605:
cmp     [rbp+state], 0
jnz     short loc_1461B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_14629

loc_1461B:
add     [rbp+i_2], 1

loc_1461F:
cmp     [rbp+i_2], 0
jle     loc_14379

loc_14629:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14688
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_6]
mov     esi, [rbp+i_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14688:
cmp     [rbp+state], 0
jnz     short loc_1469E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_1469F

loc_1469E:
nop

loc_1469F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_146FB
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_5]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_146FB:
cmp     [rbp+state], 0
jnz     short loc_1471D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_14726

loc_1471D:
add     [rbp+i_1], 1
jmp     loc_142DA

loc_14726:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14790
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4479 ; "Accept_Charset"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14790:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 13F08
Accept_Charset endp



; Attributes: bp-based frame

; int __cdecl Accept_Encoding(ctx *c)
public Accept_Encoding
Accept_Encoding proc near

c= qword ptr -78h
save_8= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
add     rsp, 0FFFFFFFFFFFFFF80h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_14D7F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_14D25

loc_147E9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_149B8
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_14834
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_14834:
cmp     [rbp+state], 0
jnz     loc_149B7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_14957
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1488D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    codings
mov     [rbp+state], al

loc_1488D:
cmp     [rbp+state], 0
jz      loc_14943
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_148ED

loc_148B1:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_148D6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_148D6:
cmp     [rbp+state], 0
jnz     short loc_148E9
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_148F3

loc_148E9:
add     [rbp+i_0], 1

loc_148ED:
cmp     [rbp+i_0], 0
jle     short loc_148B1

loc_148F3:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14943
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14943:
cmp     [rbp+state], 0
jnz     short loc_14956
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_14957

loc_14956:
nop

loc_14957:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_149A4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_149A4:
cmp     [rbp+state], 0
jnz     short loc_149B7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_149B8

loc_149B7:
nop

loc_149B8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14A05
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14A05:
cmp     [rbp+state], 0
jz      loc_14D0E
mov     [rbp+i_1], 0

loc_14A16:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_14C99
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_14A5C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_14A5C:
cmp     [rbp+state], 0
jz      short loc_14A76
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_14A76:
cmp     [rbp+state], 0
jz      loc_14C85
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_2], 0
jmp     loc_14C2B

loc_14A9D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_14ABD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_14ABD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_14BC7
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_14AFD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    codings
mov     [rbp+state], al

loc_14AFD:
cmp     [rbp+state], 0
jz      loc_14BB3
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_14B5D

loc_14B21:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
cmp     [rbp+state], 0
jz      short loc_14B46
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_14B46:
cmp     [rbp+state], 0
jnz     short loc_14B59
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_14B63

loc_14B59:
add     [rbp+i_3], 1

loc_14B5D:
cmp     [rbp+i_3], 0
jle     short loc_14B21

loc_14B63:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14BB3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_7]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14BB3:
cmp     [rbp+state], 0
jnz     short loc_14BC6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_14BC7

loc_14BC6:
nop

loc_14BC7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14C14
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_6]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14C14:
cmp     [rbp+state], 0
jnz     short loc_14C27
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_14C35

loc_14C27:
add     [rbp+i_2], 1

loc_14C2B:
cmp     [rbp+i_2], 0
jle     loc_14A9D

loc_14C35:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14C85
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_5]
mov     esi, [rbp+i_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14C85:
cmp     [rbp+state], 0
jnz     short loc_14C98
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_14C99

loc_14C98:
nop

loc_14C99:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14CE6
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_4]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14CE6:
cmp     [rbp+state], 0
jnz     short loc_14D05
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_14D0E

loc_14D05:
add     [rbp+i_1], 1
jmp     loc_14A16

loc_14D0E:
cmp     [rbp+state], 0
jnz     short loc_14D21
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_14D2F

loc_14D21:
add     [rbp+i], 1

loc_14D25:
cmp     [rbp+i], 0
jle     loc_147E9

loc_14D2F:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14D7F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14D7F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14DD7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4522 ; "Accept_Encoding"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14DD7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 14796
Accept_Encoding endp



; Attributes: bp-based frame

; int __cdecl Accept_Language(ctx *c)
public Accept_Language
Accept_Language proc near

c= qword ptr -78h
save_8= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
add     rsp, 0FFFFFFFFFFFFFF80h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_14EFF
mov     [rbp+i], 0

loc_14E1A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_14E8A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_14E61
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_14E61:
cmp     [rbp+state], 0
jz      short loc_14E76
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_14E76:
cmp     [rbp+state], 0
jnz     short loc_14E89
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_14E8A

loc_14E89:
nop

loc_14E8A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14ED7
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14ED7:
cmp     [rbp+state], 0
jnz     short loc_14EF6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_14EFF

loc_14EF6:
add     [rbp+i], 1
jmp     loc_14E1A

loc_14EFF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_15004
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_14F3A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    language_range
mov     [rbp+state], al

loc_14F3A:
cmp     [rbp+state], 0
jz      loc_14FF0
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_0], 0
jmp     short loc_14F9A

loc_14F5E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_14F83
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_14F83:
cmp     [rbp+state], 0
jnz     short loc_14F96
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_14FA0

loc_14F96:
add     [rbp+i_0], 1

loc_14F9A:
cmp     [rbp+i_0], 0
jle     short loc_14F5E

loc_14FA0:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_14FF0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_14FF0:
cmp     [rbp+state], 0
jnz     short loc_15003
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_15004

loc_15003:
nop

loc_15004:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15051
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15051:
cmp     [rbp+state], 0
jz      loc_15355
mov     [rbp+i_1], 0

loc_15062:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_152E0
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_150A8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_150A8:
cmp     [rbp+state], 0
jz      short loc_150C2
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_150C2:
cmp     [rbp+state], 0
jz      loc_152CC
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_2], 0
jmp     loc_15272

loc_150E9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_15109
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15109:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1520E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_15144
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    language_range
mov     [rbp+state], al

loc_15144:
cmp     [rbp+state], 0
jz      loc_151FA
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_151A4

loc_15168:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_8], rax
cmp     [rbp+state], 0
jz      short loc_1518D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_1518D:
cmp     [rbp+state], 0
jnz     short loc_151A0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_8]
mov     [rax], rdx
jmp     short loc_151AA

loc_151A0:
add     [rbp+i_3], 1

loc_151A4:
cmp     [rbp+i_3], 0
jle     short loc_15168

loc_151AA:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_151FA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_7]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_151FA:
cmp     [rbp+state], 0
jnz     short loc_1520D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_1520E

loc_1520D:
nop

loc_1520E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1525B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_6]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1525B:
cmp     [rbp+state], 0
jnz     short loc_1526E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_1527C

loc_1526E:
add     [rbp+i_2], 1

loc_15272:
cmp     [rbp+i_2], 0
jle     loc_150E9

loc_1527C:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_152CC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_5]
mov     esi, [rbp+i_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_152CC:
cmp     [rbp+state], 0
jnz     short loc_152DF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_152E0

loc_152DF:
nop

loc_152E0:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1532D
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_4]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1532D:
cmp     [rbp+state], 0
jnz     short loc_1534C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
nop
mov     eax, [rbp+i_1]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15355

loc_1534C:
add     [rbp+i_1], 1
jmp     loc_15062

loc_15355:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_153AD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4561 ; "Accept_Language"
mov     rdi, rax
mov     eax, 0
call    r9

loc_153AD:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 14DDD
Accept_Language endp



; Attributes: bp-based frame

; int __cdecl Allow(ctx *c)
public Allow
Allow proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_15709
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_156AF

loc_15406:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1548B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1544D
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1544D:
cmp     [rbp+state], 0
jnz     short loc_1548A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_15477
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    method
mov     [rbp+state], al

loc_15477:
cmp     [rbp+state], 0
jnz     short loc_1548A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1548B

loc_1548A:
nop

loc_1548B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_154D8
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_154D8:
cmp     [rbp+state], 0
jz      loc_15698
mov     [rbp+i_0], 0

loc_154E9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_15623
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1552F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1552F:
cmp     [rbp+state], 0
jz      short loc_15549
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_15549:
cmp     [rbp+state], 0
jz      loc_1560F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_155B9

loc_1556D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1558D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1558D:
cmp     [rbp+state], 0
jz      short loc_155A2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    method
mov     [rbp+state], al

loc_155A2:
cmp     [rbp+state], 0
jnz     short loc_155B5
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_155BF

loc_155B5:
add     [rbp+i_1], 1

loc_155B9:
cmp     [rbp+i_1], 0
jle     short loc_1556D

loc_155BF:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1560F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1560F:
cmp     [rbp+state], 0
jnz     short loc_15622
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_15623

loc_15622:
nop

loc_15623:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15670
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15670:
cmp     [rbp+state], 0
jnz     short loc_1568F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15698

loc_1568F:
add     [rbp+i_0], 1
jmp     loc_154E9

loc_15698:
cmp     [rbp+state], 0
jnz     short loc_156AB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_156B9

loc_156AB:
add     [rbp+i], 1

loc_156AF:
cmp     [rbp+i], 0
jle     loc_15406

loc_156B9:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15709
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15709:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15761
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4585 ; "Allow"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15761:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 153B3
Allow endp



; Attributes: bp-based frame

; int __cdecl Content_Encoding(ctx *c)
public Content_Encoding
Content_Encoding proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_15889
mov     [rbp+i], 0

loc_157A4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_15814
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_157EB
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_157EB:
cmp     [rbp+state], 0
jz      short loc_15800
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15800:
cmp     [rbp+state], 0
jnz     short loc_15813
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_15814

loc_15813:
nop

loc_15814:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15861
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15861:
cmp     [rbp+state], 0
jnz     short loc_15880
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15889

loc_15880:
add     [rbp+i], 1
jmp     loc_157A4

loc_15889:
cmp     [rbp+state], 0
jz      short loc_158A3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    content_coding
mov     [rbp+state], al

loc_158A3:
cmp     [rbp+state], 0
jz      loc_15A68
mov     [rbp+i_0], 0

loc_158B4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_159F3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_158FA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_158FA:
cmp     [rbp+state], 0
jz      short loc_15914
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_15914:
cmp     [rbp+state], 0
jz      loc_159DF
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_15989

loc_15938:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_15958
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15958:
cmp     [rbp+state], 0
jz      short loc_15972
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    content_coding
mov     [rbp+state], al

loc_15972:
cmp     [rbp+state], 0
jnz     short loc_15985
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1598F

loc_15985:
add     [rbp+i_1], 1

loc_15989:
cmp     [rbp+i_1], 0
jle     short loc_15938

loc_1598F:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_159DF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_159DF:
cmp     [rbp+state], 0
jnz     short loc_159F2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_159F3

loc_159F2:
nop

loc_159F3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15A40
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15A40:
cmp     [rbp+state], 0
jnz     short loc_15A5F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15A68

loc_15A5F:
add     [rbp+i_0], 1
jmp     loc_158B4

loc_15A68:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15AC0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4611 ; "Content_Encoding"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15AC0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 15767
Content_Encoding endp



; Attributes: bp-based frame

; int __cdecl Content_Language(ctx *c)
public Content_Language
Content_Language proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_15BE8
mov     [rbp+i], 0

loc_15B03:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_15B73
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_15B4A
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_15B4A:
cmp     [rbp+state], 0
jz      short loc_15B5F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15B5F:
cmp     [rbp+state], 0
jnz     short loc_15B72
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_15B73

loc_15B72:
nop

loc_15B73:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15BC0
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15BC0:
cmp     [rbp+state], 0
jnz     short loc_15BDF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15BE8

loc_15BDF:
add     [rbp+i], 1
jmp     loc_15B03

loc_15BE8:
cmp     [rbp+state], 0
jz      short loc_15BFD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Language_Tag
mov     [rbp+state], al

loc_15BFD:
cmp     [rbp+state], 0
jz      loc_15DBD
mov     [rbp+i_0], 0

loc_15C0E:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_15D48
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_15C54
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15C54:
cmp     [rbp+state], 0
jz      short loc_15C6E
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_15C6E:
cmp     [rbp+state], 0
jz      loc_15D34
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_15CDE

loc_15C92:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_15CB2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_15CB2:
cmp     [rbp+state], 0
jz      short loc_15CC7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Language_Tag
mov     [rbp+state], al

loc_15CC7:
cmp     [rbp+state], 0
jnz     short loc_15CDA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_15CE4

loc_15CDA:
add     [rbp+i_1], 1

loc_15CDE:
cmp     [rbp+i_1], 0
jle     short loc_15C92

loc_15CE4:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15D34
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15D34:
cmp     [rbp+state], 0
jnz     short loc_15D47
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_15D48

loc_15D47:
nop

loc_15D48:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15D95
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15D95:
cmp     [rbp+state], 0
jnz     short loc_15DB4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_15DBD

loc_15DB4:
add     [rbp+i_0], 1
jmp     loc_15C0E

loc_15DBD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15E15
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4634 ; "Content_Language"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15E15:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 15AC6
Content_Language endp



; Attributes: bp-based frame

; int __cdecl Content_Location(ctx *c)
public Content_Location
Content_Location proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_15E5C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    absolute_URI
mov     [rbp+state], al

loc_15E5C:
cmp     [rbp+state], 0
jnz     short loc_15E88
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_15E89
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    partial_URI
mov     [rbp+state], al
jmp     short loc_15E89

loc_15E88:
nop

loc_15E89:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15EE1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4641 ; "Content_Location"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15EE1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 15E1B
Content_Location endp



; Attributes: bp-based frame

; int __cdecl Content_Type(ctx *c)
public Content_Type
Content_Type proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_15F2D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    media_type
mov     [rbp+state], al

loc_15F2D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_15F85
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4649 ; "Content_Type"
mov     rdi, rax
mov     eax, 0
call    r9

loc_15F85:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 15EE7
Content_Type endp



; Attributes: bp-based frame

; int __cdecl Date(ctx *c)
public Date
Date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_15FD1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    HTTP_date
mov     [rbp+state], al

loc_15FD1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16029
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4657 ; "Date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16029:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 15F8B
Date endp



; Attributes: bp-based frame

; int __cdecl Expect(ctx *c)
public Expect
Expect proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_16077
mov     rax, [rbp+c]
lea     rsi, a100Continue ; "100-CONTINUE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_16077:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_160CF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4663 ; "Expect"
mov     rdi, rax
mov     eax, 0
call    r9

loc_160CF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1602F
Expect endp



; Attributes: bp-based frame

; int __cdecl GMT(ctx *c)
public GMT
GMT proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1611D
mov     rax, [rbp+c]
lea     rsi, aGmt_0     ; "GMT"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_1611D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16175
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4669 ; "GMT"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16175:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 160D5
GMT endp



; Attributes: bp-based frame

; int __cdecl HTTP_date(ctx *c)
public HTTP_date
HTTP_date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_161C1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    IMF_fixdate
mov     [rbp+state], al

loc_161C1:
cmp     [rbp+state], 0
jnz     short loc_161F2
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_161F3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    obs_date
mov     [rbp+state], al
jmp     short loc_161F3

loc_161F2:
nop

loc_161F3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1624B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4680 ; "HTTP_date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1624B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1617B
HTTP_date endp



; Attributes: bp-based frame

; int __cdecl IMF_fixdate(ctx *c)
public IMF_fixdate
IMF_fixdate proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_16297
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    day_name
mov     [rbp+state], al

loc_16297:
cmp     [rbp+state], 0
jz      short loc_162B1
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_162B1:
cmp     [rbp+state], 0
jz      short loc_162C6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_162C6:
cmp     [rbp+state], 0
jz      short loc_162E0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    date1
mov     [rbp+state], al

loc_162E0:
cmp     [rbp+state], 0
jz      short loc_162F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_162F5:
cmp     [rbp+state], 0
jz      short loc_1630F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    time_of_day
mov     [rbp+state], al

loc_1630F:
cmp     [rbp+state], 0
jz      short loc_16324
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_16324:
cmp     [rbp+state], 0
jz      short loc_16339
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    GMT
mov     [rbp+state], al

loc_16339:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16391
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4692 ; "IMF_fixdate"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16391:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16251
IMF_fixdate endp



; Attributes: bp-based frame

; int __cdecl Location(ctx *c)
public Location
Location proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_163D8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    URI_reference
mov     [rbp+state], al

loc_163D8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16430
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4698 ; "Location"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16430:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16397
Location endp



; Attributes: bp-based frame

; int __cdecl Max_Forwards(ctx *c)
public Max_Forwards
Max_Forwards proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_164B3
mov     [rbp+i], 0

loc_1646F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1648F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1648F:
cmp     [rbp+state], 0
jnz     short loc_164AD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_164B3

loc_164AD:
add     [rbp+i], 1
jmp     short loc_1646F

loc_164B3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1650B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4708 ; "Max_Forwards"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1650B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16436
Max_Forwards endp



; Attributes: bp-based frame

; int __cdecl Referer(ctx *c)
public Referer
Referer proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_16552
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    absolute_URI
mov     [rbp+state], al

loc_16552:
cmp     [rbp+state], 0
jnz     short loc_1657E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1657F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    partial_URI
mov     [rbp+state], al
jmp     short loc_1657F

loc_1657E:
nop

loc_1657F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_165D7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4715 ; "Referer"
mov     rdi, rax
mov     eax, 0
call    r9

loc_165D7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16511
Referer endp



; Attributes: bp-based frame

; int __cdecl Retry_After(ctx *c)
public Retry_After
Retry_After proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1661E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1661E:
cmp     [rbp+state], 0
jnz     short loc_1664F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_16650
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    delay_seconds
mov     [rbp+state], al
jmp     short loc_16650

loc_1664F:
nop

loc_16650:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_166A8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4724 ; "Retry_After"
mov     rdi, rax
mov     eax, 0
call    r9

loc_166A8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 165DD
Retry_After endp



; Attributes: bp-based frame

; int __cdecl Server(ctx *c)
public Server
Server proc near

c= qword ptr -38h
save_2= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_166F4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    product
mov     [rbp+state], al

loc_166F4:
cmp     [rbp+state], 0
jz      loc_1689B
mov     [rbp+i], 0

loc_16705:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_16826
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1674B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_1674B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_167C5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_16787
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    product
mov     [rbp+state], al

loc_16787:
cmp     [rbp+state], 0
jnz     short loc_167C4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_167B1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    comment
mov     [rbp+state], al

loc_167B1:
cmp     [rbp+state], 0
jnz     short loc_167C4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_167C5

loc_167C4:
nop

loc_167C5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16812
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16812:
cmp     [rbp+state], 0
jnz     short loc_16825
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_16826

loc_16825:
nop

loc_16826:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16873
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16873:
cmp     [rbp+state], 0
jnz     short loc_16892
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1689B

loc_16892:
add     [rbp+i], 1
jmp     loc_16705

loc_1689B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_168F3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4741 ; "Server"
mov     rdi, rax
mov     eax, 0
call    r9

loc_168F3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 166AE
Server endp



; Attributes: bp-based frame

; int __cdecl User_Agent(ctx *c)
public User_Agent
User_Agent proc near

c= qword ptr -38h
save_2= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1693F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    product
mov     [rbp+state], al

loc_1693F:
cmp     [rbp+state], 0
jz      loc_16AE6
mov     [rbp+i], 0

loc_16950:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_16A71
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_16996
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    RWS
mov     [rbp+state], al

loc_16996:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_16A10
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_169D2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    product
mov     [rbp+state], al

loc_169D2:
cmp     [rbp+state], 0
jnz     short loc_16A0F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_169FC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    comment
mov     [rbp+state], al

loc_169FC:
cmp     [rbp+state], 0
jnz     short loc_16A0F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_16A10

loc_16A0F:
nop

loc_16A10:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16A5D
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16A5D:
cmp     [rbp+state], 0
jnz     short loc_16A70
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_16A71

loc_16A70:
nop

loc_16A71:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16ABE
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16ABE:
cmp     [rbp+state], 0
jnz     short loc_16ADD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_16AE6

loc_16ADD:
add     [rbp+i], 1
jmp     loc_16950

loc_16AE6:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16B3E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4757 ; "User_Agent"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16B3E:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 168F9
User_Agent endp



; Attributes: bp-based frame

; int __cdecl Vary(ctx *c)
public Vary
Vary proc near

c= qword ptr -58h
save_5= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_16B8A
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_16B8A:
cmp     [rbp+state], 0
jnz     loc_16EF7
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_16EA8
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      loc_16CBF
mov     [rbp+i], 0

loc_16BDA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_16C4A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_16C21
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_16C21:
cmp     [rbp+state], 0
jz      short loc_16C36
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_16C36:
cmp     [rbp+state], 0
jnz     short loc_16C49
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_16C4A

loc_16C49:
nop

loc_16C4A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16C97
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16C97:
cmp     [rbp+state], 0
jnz     short loc_16CB6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_16CBF

loc_16CB6:
add     [rbp+i], 1
jmp     loc_16BDA

loc_16CBF:
cmp     [rbp+state], 0
jz      short loc_16CD4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    field_name
mov     [rbp+state], al

loc_16CD4:
cmp     [rbp+state], 0
jz      loc_16E94
mov     [rbp+i_0], 0

loc_16CE5:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_16E1F
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_16D2B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_16D2B:
cmp     [rbp+state], 0
jz      short loc_16D45
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_16D45:
cmp     [rbp+state], 0
jz      loc_16E0B
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_16DB5

loc_16D69:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_16D89
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_16D89:
cmp     [rbp+state], 0
jz      short loc_16D9E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    field_name
mov     [rbp+state], al

loc_16D9E:
cmp     [rbp+state], 0
jnz     short loc_16DB1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_16DBB

loc_16DB1:
add     [rbp+i_1], 1

loc_16DB5:
cmp     [rbp+i_1], 0
jle     short loc_16D69

loc_16DBB:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16E0B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_4]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16E0B:
cmp     [rbp+state], 0
jnz     short loc_16E1E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_16E1F

loc_16E1E:
nop

loc_16E1F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16E6C
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16E6C:
cmp     [rbp+state], 0
jnz     short loc_16E8B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_16E94

loc_16E8B:
add     [rbp+i_0], 1
jmp     loc_16CE5

loc_16E94:
cmp     [rbp+state], 0
jnz     short loc_16EA7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_16EA8

loc_16EA7:
nop

loc_16EA8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16EF8
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_16EF8

loc_16EF7:
nop

loc_16EF8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_16F50
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4783 ; "Vary"
mov     rdi, rax
mov     eax, 0
call    r9

loc_16F50:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16B44
Vary endp



; Attributes: bp-based frame

; int __cdecl accept_ext(ctx *c)
public accept_ext
accept_ext proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_16F97
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_16F97:
cmp     [rbp+state], 0
jz      short loc_16FB1
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_16FB1:
cmp     [rbp+state], 0
jz      short loc_16FC6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_16FC6:
cmp     [rbp+state], 0
jz      short loc_16FDB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_16FDB:
cmp     [rbp+state], 0
jz      loc_1715A
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_17100

loc_17002:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_17027
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_17027:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1709C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1705E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1705E:
cmp     [rbp+state], 0
jnz     short loc_1709B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17088
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_17088:
cmp     [rbp+state], 0
jnz     short loc_1709B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1709C

loc_1709B:
nop

loc_1709C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_170E9
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_170E9:
cmp     [rbp+state], 0
jnz     short loc_170FC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1710A

loc_170FC:
add     [rbp+i], 1

loc_17100:
cmp     [rbp+i], 0
jle     loc_17002

loc_1710A:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1715A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1715A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_171B2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4796 ; "accept_ext"
mov     rdi, rax
mov     eax, 0
call    r9

loc_171B2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 16F56
accept_ext endp



; Attributes: bp-based frame

; int __cdecl accept_params(ctx *c)
public accept_params
accept_params proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_171FE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weight
mov     [rbp+state], al

loc_171FE:
cmp     [rbp+state], 0
jz      short loc_17250
mov     [rbp+i], 0

loc_1720B:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1722B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    accept_ext
mov     [rbp+state], al

loc_1722B:
cmp     [rbp+state], 0
jnz     short loc_1724A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_17250

loc_1724A:
add     [rbp+i], 1
jmp     short loc_1720B

loc_17250:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_172A8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4807 ; "accept_params"
mov     rdi, rax
mov     eax, 0
call    r9

loc_172A8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 171B8
accept_params endp



; Attributes: bp-based frame

; int __cdecl asctime_date(ctx *c)
public asctime_date
asctime_date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_172F4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    day_name
mov     [rbp+state], al

loc_172F4:
cmp     [rbp+state], 0
jz      short loc_17309
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_17309:
cmp     [rbp+state], 0
jz      short loc_17323
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    date3
mov     [rbp+state], al

loc_17323:
cmp     [rbp+state], 0
jz      short loc_17338
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_17338:
cmp     [rbp+state], 0
jz      short loc_17352
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    time_of_day
mov     [rbp+state], al

loc_17352:
cmp     [rbp+state], 0
jz      short loc_17367
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_17367:
cmp     [rbp+state], 0
jz      short loc_17381
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    year
mov     [rbp+state], al

loc_17381:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_173D9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4819 ; "asctime_date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_173D9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 172AE
asctime_date endp



; Attributes: bp-based frame

; int __cdecl charset(ctx *c)
public charset
charset proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_17420
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_17420:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17478
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4825 ; "charset"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17478:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 173DF
charset endp



; Attributes: bp-based frame

; int __cdecl codings(ctx *c)
public codings
codings proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_174C4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    content_coding
mov     [rbp+state], al

loc_174C4:
cmp     [rbp+state], 0
jnz     short loc_17526
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_174F5
mov     rax, [rbp+c]
lea     rsi, aIdentity  ; "IDENTITY"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_174F5:
cmp     [rbp+state], 0
jnz     short loc_17529
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1752A
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al
jmp     short loc_1752A

loc_17526:
nop
jmp     short loc_1752A

loc_17529:
nop

loc_1752A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17582
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4833 ; "codings"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17582:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1747E
codings endp



; Attributes: bp-based frame

; int __cdecl content_coding(ctx *c)
public content_coding
content_coding proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_175C9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_175C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17621
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4839 ; "content_coding"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17621:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17588
content_coding endp



; Attributes: bp-based frame

; int __cdecl date1(ctx *c)
public date1
date1 proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1766D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    day
mov     [rbp+state], al

loc_1766D:
cmp     [rbp+state], 0
jz      short loc_17682
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_17682:
cmp     [rbp+state], 0
jz      short loc_1769C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    month
mov     [rbp+state], al

loc_1769C:
cmp     [rbp+state], 0
jz      short loc_176B1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_176B1:
cmp     [rbp+state], 0
jz      short loc_176CB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    year
mov     [rbp+state], al

loc_176CB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17723
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4850 ; "date1"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17723:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17627
date1 endp



; Attributes: bp-based frame

; int __cdecl date2(ctx *c)
public date2
date2 proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1776F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    day
mov     [rbp+state], al

loc_1776F:
cmp     [rbp+state], 0
jz      short loc_17789
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_17789:
cmp     [rbp+state], 0
jz      short loc_177A3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    month
mov     [rbp+state], al

loc_177A3:
cmp     [rbp+state], 0
jz      short loc_177BD
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_177BD:
cmp     [rbp+state], 0
jz      short loc_17824
mov     [rbp+i], 0
jmp     short loc_17803

loc_177CC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_177EC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_177EC:
cmp     [rbp+state], 0
jnz     short loc_177FF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_17809

loc_177FF:
add     [rbp+i], 1

loc_17803:
cmp     [rbp+i], 1
jle     short loc_177CC

loc_17809:
cmp     [rbp+i], 1
jle     short loc_1781C
cmp     [rbp+i], 2
jg      short loc_1781C
mov     eax, 1
jmp     short loc_17821

loc_1781C:
mov     eax, 0

loc_17821:
mov     [rbp+state], al

loc_17824:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1787C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4863 ; "date2"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1787C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17729
date2 endp



; Attributes: bp-based frame

; int __cdecl date3(ctx *c)
public date3
date3 proc near

c= qword ptr -38h
save_2= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_178C8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    month
mov     [rbp+state], al

loc_178C8:
cmp     [rbp+state], 0
jz      short loc_178DD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_178DD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_17A47
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1796A
mov     [rbp+i], 0
jmp     short loc_17949

loc_17912:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_17932
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_17932:
cmp     [rbp+state], 0
jnz     short loc_17945
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1794F

loc_17945:
add     [rbp+i], 1

loc_17949:
cmp     [rbp+i], 1
jle     short loc_17912

loc_1794F:
cmp     [rbp+i], 1
jle     short loc_17962
cmp     [rbp+i], 2
jg      short loc_17962
mov     eax, 1
jmp     short loc_17967

loc_17962:
mov     eax, 0

loc_17967:
mov     [rbp+state], al

loc_1796A:
cmp     [rbp+state], 0
jnz     loc_17A43
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_179E3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_179BA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_179BA:
cmp     [rbp+state], 0
jz      short loc_179CF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_179CF:
cmp     [rbp+state], 0
jnz     short loc_179E2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_179E3

loc_179E2:
nop

loc_179E3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17A30
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17A30:
cmp     [rbp+state], 0
jnz     short loc_17A46
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_17A47

loc_17A43:
nop
jmp     short loc_17A47

loc_17A46:
nop

loc_17A47:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17A94
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17A94:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17AEC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4879 ; "date3"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17AEC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17882
date3 endp



; Attributes: bp-based frame

; int __cdecl day(ctx *c)
public day
day proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_17B85
mov     [rbp+i], 0
jmp     short loc_17B64

loc_17B2D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_17B4D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_17B4D:
cmp     [rbp+state], 0
jnz     short loc_17B60
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_17B6A

loc_17B60:
add     [rbp+i], 1

loc_17B64:
cmp     [rbp+i], 1
jle     short loc_17B2D

loc_17B6A:
cmp     [rbp+i], 1
jle     short loc_17B7D
cmp     [rbp+i], 2
jg      short loc_17B7D
mov     eax, 1
jmp     short loc_17B82

loc_17B7D:
mov     eax, 0

loc_17B82:
mov     [rbp+state], al

loc_17B85:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17BDD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4890 ; "day"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17BDD:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17AF2
day endp



; Attributes: bp-based frame

; int __cdecl day_name(ctx *c)
public day_name
day_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_17C2B
mov     rax, [rbp+c]
lea     rsi, aMon       ; "Mon"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17C2B:
cmp     [rbp+state], 0
jnz     loc_17D63
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17C60
mov     rax, [rbp+c]
lea     rsi, aTue       ; "Tue"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17C60:
cmp     [rbp+state], 0
jnz     loc_17D66
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17C95
mov     rax, [rbp+c]
lea     rsi, aWed       ; "Wed"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17C95:
cmp     [rbp+state], 0
jnz     loc_17D69
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17CCA
mov     rax, [rbp+c]
lea     rsi, aThu       ; "Thu"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17CCA:
cmp     [rbp+state], 0
jnz     loc_17D6C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17CFF
mov     rax, [rbp+c]
lea     rsi, aFri       ; "Fri"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17CFF:
cmp     [rbp+state], 0
jnz     short loc_17D6F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17D30
mov     rax, [rbp+c]
lea     rsi, aSat       ; "Sat"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17D30:
cmp     [rbp+state], 0
jnz     short loc_17D72
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17D73
mov     rax, [rbp+c]
lea     rsi, aSun       ; "Sun"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al
jmp     short loc_17D73

loc_17D63:
nop
jmp     short loc_17D73

loc_17D66:
nop
jmp     short loc_17D73

loc_17D69:
nop
jmp     short loc_17D73

loc_17D6C:
nop
jmp     short loc_17D73

loc_17D6F:
nop
jmp     short loc_17D73

loc_17D72:
nop

loc_17D73:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17DCB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4897 ; "day_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17DCB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17BE3
day_name endp



; Attributes: bp-based frame

; int __cdecl day_name_l(ctx *c)
public day_name_l
day_name_l proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_17E19
mov     rax, [rbp+c]
lea     rsi, aMonday    ; "Monday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17E19:
cmp     [rbp+state], 0
jnz     loc_17F51
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17E4E
mov     rax, [rbp+c]
lea     rsi, aTuesday   ; "Tuesday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17E4E:
cmp     [rbp+state], 0
jnz     loc_17F54
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17E83
mov     rax, [rbp+c]
lea     rsi, aWednesday ; "Wednesday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17E83:
cmp     [rbp+state], 0
jnz     loc_17F57
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17EB8
mov     rax, [rbp+c]
lea     rsi, aThursday  ; "Thursday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17EB8:
cmp     [rbp+state], 0
jnz     loc_17F5A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17EED
mov     rax, [rbp+c]
lea     rsi, aFriday    ; "Friday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17EED:
cmp     [rbp+state], 0
jnz     short loc_17F5D
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17F1E
mov     rax, [rbp+c]
lea     rsi, aSaturday  ; "Saturday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_17F1E:
cmp     [rbp+state], 0
jnz     short loc_17F60
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_17F61
mov     rax, [rbp+c]
lea     rsi, aSunday    ; "Sunday"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al
jmp     short loc_17F61

loc_17F51:
nop
jmp     short loc_17F61

loc_17F54:
nop
jmp     short loc_17F61

loc_17F57:
nop
jmp     short loc_17F61

loc_17F5A:
nop
jmp     short loc_17F61

loc_17F5D:
nop
jmp     short loc_17F61

loc_17F60:
nop

loc_17F61:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_17FB9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4904 ; "day_name_l"
mov     rdi, rax
mov     eax, 0
call    r9

loc_17FB9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17DD1
day_name_l endp



; Attributes: bp-based frame

; int __cdecl delay_seconds(ctx *c)
public delay_seconds
delay_seconds proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1803C
mov     [rbp+i], 0

loc_17FF8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_18018
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_18018:
cmp     [rbp+state], 0
jnz     short loc_18036
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1803C

loc_18036:
add     [rbp+i], 1
jmp     short loc_17FF8

loc_1803C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18094
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4914 ; "delay_seconds"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18094:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 17FBF
delay_seconds endp



; Attributes: bp-based frame

; int __cdecl hour(ctx *c)
public hour
hour proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1812D
mov     [rbp+i], 0
jmp     short loc_1810C

loc_180D5:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_180F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_180F5:
cmp     [rbp+state], 0
jnz     short loc_18108
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_18112

loc_18108:
add     [rbp+i], 1

loc_1810C:
cmp     [rbp+i], 1
jle     short loc_180D5

loc_18112:
cmp     [rbp+i], 1
jle     short loc_18125
cmp     [rbp+i], 2
jg      short loc_18125
mov     eax, 1
jmp     short loc_1812A

loc_18125:
mov     eax, 0

loc_1812A:
mov     [rbp+state], al

loc_1812D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18185
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4925 ; "hour"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18185:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1809A
hour endp



; Attributes: bp-based frame

; int __cdecl media_range(ctx *c)
public media_range
media_range proc near

c= qword ptr -48h
save_4= qword ptr -38h
save_3= qword ptr -30h
save_2= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_183CF
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_181F9
mov     rax, [rbp+c]
lea     rsi, asc_241A4  ; "*/*"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_181F9:
cmp     [rbp+state], 0
jnz     loc_183C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1827E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1824E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    type
mov     [rbp+state], al

loc_1824E:
cmp     [rbp+state], 0
jz      short loc_1826A
mov     rax, [rbp+c]
lea     rsi, asc_241A8  ; "/*"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1826A:
cmp     [rbp+state], 0
jnz     short loc_1827D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1827E

loc_1827D:
nop

loc_1827E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_182CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_182CB:
cmp     [rbp+state], 0
jnz     loc_183CB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_18368
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_18320
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    type
mov     [rbp+state], al

loc_18320:
cmp     [rbp+state], 0
jz      short loc_1833A
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1833A:
cmp     [rbp+state], 0
jz      short loc_18354
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    subtype
mov     [rbp+state], al

loc_18354:
cmp     [rbp+state], 0
jnz     short loc_18367
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_18368

loc_18367:
nop

loc_18368:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_183B5
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_183B5:
cmp     [rbp+state], 0
jnz     short loc_183CE
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_183CF

loc_183C8:
nop
jmp     short loc_183CF

loc_183CB:
nop
jmp     short loc_183CF

loc_183CE:
nop

loc_183CF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1841C
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1841C:
cmp     [rbp+state], 0
jz      loc_18541
mov     [rbp+i], 0

loc_1842D:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_184CC
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1846F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1846F:
cmp     [rbp+state], 0
jz      short loc_18489
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_18489:
cmp     [rbp+state], 0
jz      short loc_1849E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1849E:
cmp     [rbp+state], 0
jz      short loc_184B8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    media_parameter
mov     [rbp+state], al

loc_184B8:
cmp     [rbp+state], 0
jnz     short loc_184CB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_184CC

loc_184CB:
nop

loc_184CC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18519
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18519:
cmp     [rbp+state], 0
jnz     short loc_18538
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_18541

loc_18538:
add     [rbp+i], 1
jmp     loc_1842D

loc_18541:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18599
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4950 ; "media_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18599:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1818B
media_range endp



; Attributes: bp-based frame

; int __cdecl media_type(ctx *c)
public media_type
media_type proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_185E5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    type
mov     [rbp+state], al

loc_185E5:
cmp     [rbp+state], 0
jz      short loc_185FF
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_185FF:
cmp     [rbp+state], 0
jz      short loc_18619
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    subtype
mov     [rbp+state], al

loc_18619:
cmp     [rbp+state], 0
jz      loc_1873E
mov     [rbp+i], 0

loc_1862A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_186C9
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1866C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1866C:
cmp     [rbp+state], 0
jz      short loc_18686
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_18686:
cmp     [rbp+state], 0
jz      short loc_1869B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1869B:
cmp     [rbp+state], 0
jz      short loc_186B5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    parameter
mov     [rbp+state], al

loc_186B5:
cmp     [rbp+state], 0
jnz     short loc_186C8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_186C9

loc_186C8:
nop

loc_186C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18716
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18716:
cmp     [rbp+state], 0
jnz     short loc_18735
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1873E

loc_18735:
add     [rbp+i], 1
jmp     loc_1862A

loc_1873E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18796
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4966 ; "media_type"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18796:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1859F
media_type endp



; Attributes: bp-based frame

; int __cdecl minute(ctx *c)
public minute
minute proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1882F
mov     [rbp+i], 0
jmp     short loc_1880E

loc_187D7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_187F7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_187F7:
cmp     [rbp+state], 0
jnz     short loc_1880A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_18814

loc_1880A:
add     [rbp+i], 1

loc_1880E:
cmp     [rbp+i], 1
jle     short loc_187D7

loc_18814:
cmp     [rbp+i], 1
jle     short loc_18827
cmp     [rbp+i], 2
jg      short loc_18827
mov     eax, 1
jmp     short loc_1882C

loc_18827:
mov     eax, 0

loc_1882C:
mov     [rbp+state], al

loc_1882F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18887
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4977 ; "minute"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18887:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1879C
minute endp



; Attributes: bp-based frame

; int __cdecl month(ctx *c)
public month
month proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_188D5
mov     rax, [rbp+c]
lea     rsi, aJan       ; "Jan"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_188D5:
cmp     [rbp+state], 0
jnz     loc_18B16
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1890A
mov     rax, [rbp+c]
lea     rsi, aFeb       ; "Feb"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_1890A:
cmp     [rbp+state], 0
jnz     loc_18B19
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1893F
mov     rax, [rbp+c]
lea     rsi, aMar       ; "Mar"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_1893F:
cmp     [rbp+state], 0
jnz     loc_18B1C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18974
mov     rax, [rbp+c]
lea     rsi, aApr       ; "Apr"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18974:
cmp     [rbp+state], 0
jnz     loc_18B1F
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_189A9
mov     rax, [rbp+c]
lea     rsi, aMay       ; "May"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_189A9:
cmp     [rbp+state], 0
jnz     loc_18B22
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_189DE
mov     rax, [rbp+c]
lea     rsi, aJun       ; "Jun"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_189DE:
cmp     [rbp+state], 0
jnz     loc_18B25
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18A13
mov     rax, [rbp+c]
lea     rsi, aJul       ; "Jul"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18A13:
cmp     [rbp+state], 0
jnz     loc_18B28
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18A48
mov     rax, [rbp+c]
lea     rsi, aAug       ; "Aug"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18A48:
cmp     [rbp+state], 0
jnz     loc_18B2B
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18A7D
mov     rax, [rbp+c]
lea     rsi, aSep       ; "Sep"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18A7D:
cmp     [rbp+state], 0
jnz     loc_18B2E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18AB2
mov     rax, [rbp+c]
lea     rsi, aOct       ; "Oct"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18AB2:
cmp     [rbp+state], 0
jnz     short loc_18B31
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18AE3
mov     rax, [rbp+c]
lea     rsi, aNov       ; "Nov"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_18AE3:
cmp     [rbp+state], 0
jnz     short loc_18B34
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18B35
mov     rax, [rbp+c]
lea     rsi, aDec       ; "Dec"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al
jmp     short loc_18B35

loc_18B16:
nop
jmp     short loc_18B35

loc_18B19:
nop
jmp     short loc_18B35

loc_18B1C:
nop
jmp     short loc_18B35

loc_18B1F:
nop
jmp     short loc_18B35

loc_18B22:
nop
jmp     short loc_18B35

loc_18B25:
nop
jmp     short loc_18B35

loc_18B28:
nop
jmp     short loc_18B35

loc_18B2B:
nop
jmp     short loc_18B35

loc_18B2E:
nop
jmp     short loc_18B35

loc_18B31:
nop
jmp     short loc_18B35

loc_18B34:
nop

loc_18B35:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18B8D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4984 ; "month"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18B8D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1888D
month endp



; Attributes: bp-based frame

; int __cdecl obs_date(ctx *c)
public obs_date
obs_date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_18BD9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    rfc850_date
mov     [rbp+state], al

loc_18BD9:
cmp     [rbp+state], 0
jnz     short loc_18C05
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18C06
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    asctime_date
mov     [rbp+state], al
jmp     short loc_18C06

loc_18C05:
nop

loc_18C06:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18C5E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___4993 ; "obs_date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18C5E:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 18B93
obs_date endp



; Attributes: bp-based frame

; int __cdecl parameter(ctx *c)
public parameter
parameter proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_18CA5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_18CA5:
cmp     [rbp+state], 0
jz      short loc_18CBF
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_18CBF:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_18D37
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_18CF6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_18CF6:
cmp     [rbp+state], 0
jnz     short loc_18D33
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18D20
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_18D20:
cmp     [rbp+state], 0
jnz     short loc_18D36
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_18D37

loc_18D33:
nop
jmp     short loc_18D37

loc_18D36:
nop

loc_18D37:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18D84
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18D84:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18DDC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5001 ; "parameter"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18DDC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 18C64
parameter endp



; Attributes: bp-based frame

; int __cdecl media_parameter(ctx *c)
public media_parameter
media_parameter proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_18E23
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    notqtoken
mov     [rbp+state], al

loc_18E23:
cmp     [rbp+state], 0
jz      short loc_18E3D
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_18E3D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_18EB5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_18E74
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_18E74:
cmp     [rbp+state], 0
jnz     short loc_18EB1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_18E9E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_18E9E:
cmp     [rbp+state], 0
jnz     short loc_18EB4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_18EB5

loc_18EB1:
nop
jmp     short loc_18EB5

loc_18EB4:
nop

loc_18EB5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18F02
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18F02:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_18F5A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5009 ; "media_parameter"
mov     rdi, rax
mov     eax, 0
call    r9

loc_18F5A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 18DE2
media_parameter endp



; Attributes: bp-based frame

; int __cdecl product(ctx *c)
public product
product proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_18FA1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_18FA1:
cmp     [rbp+state], 0
jz      loc_19071
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_1901B

loc_18FC5:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_18FEA
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_18FEA:
cmp     [rbp+state], 0
jz      short loc_19004
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    product_version
mov     [rbp+state], al

loc_19004:
cmp     [rbp+state], 0
jnz     short loc_19017
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_19021

loc_19017:
add     [rbp+i], 1

loc_1901B:
cmp     [rbp+i], 0
jle     short loc_18FC5

loc_19021:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19071
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19071:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_190C9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5022 ; "product"
mov     rdi, rax
mov     eax, 0
call    r9

loc_190C9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 18F60
product endp



; Attributes: bp-based frame

; int __cdecl product_version(ctx *c)
public product_version
product_version proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19110
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_19110:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19168
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5028 ; "product_version"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19168:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 190CF
product_version endp



; Attributes: bp-based frame

; int __cdecl qvalue(ctx *c)
public qvalue
qvalue proc near

c= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_19312
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_191DA
mov     rax, [rbp+c]
mov     esi, 30h ; '0'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_191DA:
cmp     [rbp+state], 0
jz      loc_192FE
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_192A4

loc_19201:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_19226
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19226:
cmp     [rbp+state], 0
jz      short loc_1928D
mov     [rbp+i_0], 0
jmp     short loc_1926C

loc_19235:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_19255
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_19255:
cmp     [rbp+state], 0
jnz     short loc_19268
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_19272

loc_19268:
add     [rbp+i_0], 1

loc_1926C:
cmp     [rbp+i_0], 2
jle     short loc_19235

loc_19272:
cmp     [rbp+i_0], 0
js      short loc_19285
cmp     [rbp+i_0], 3
jg      short loc_19285
mov     eax, 1
jmp     short loc_1928A

loc_19285:
mov     eax, 0

loc_1928A:
mov     [rbp+state], al

loc_1928D:
cmp     [rbp+state], 0
jnz     short loc_192A0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_192AE

loc_192A0:
add     [rbp+i], 1

loc_192A4:
cmp     [rbp+i], 0
jle     loc_19201

loc_192AE:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_192FE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_0]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_192FE:
cmp     [rbp+state], 0
jnz     short loc_19311
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_19312

loc_19311:
nop

loc_19312:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1935F
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1935F:
cmp     [rbp+state], 0
jnz     loc_19544
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_194F5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_193B8
mov     rax, [rbp+c]
mov     esi, 31h ; '1'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_193B8:
cmp     [rbp+state], 0
jz      loc_194E1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     loc_19487

loc_193DF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_19404
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19404:
cmp     [rbp+state], 0
jz      short loc_19470
mov     [rbp+i_2], 0
jmp     short loc_1944F

loc_19413:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_19438
mov     rax, [rbp+c]
mov     esi, 30h ; '0'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19438:
cmp     [rbp+state], 0
jnz     short loc_1944B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_19455

loc_1944B:
add     [rbp+i_2], 1

loc_1944F:
cmp     [rbp+i_2], 2
jle     short loc_19413

loc_19455:
cmp     [rbp+i_2], 0
js      short loc_19468
cmp     [rbp+i_2], 3
jg      short loc_19468
mov     eax, 1
jmp     short loc_1946D

loc_19468:
mov     eax, 0

loc_1946D:
mov     [rbp+state], al

loc_19470:
cmp     [rbp+state], 0
jnz     short loc_19483
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_19491

loc_19483:
add     [rbp+i_1], 1

loc_19487:
cmp     [rbp+i_1], 0
jle     loc_193DF

loc_19491:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_194E1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_194E1:
cmp     [rbp+state], 0
jnz     short loc_194F4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_194F5

loc_194F4:
nop

loc_194F5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19545
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_19545

loc_19544:
nop

loc_19545:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1959D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5059 ; "qvalue"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1959D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1916E
qvalue endp



; Attributes: bp-based frame

; int __cdecl rfc850_date(ctx *c)
public rfc850_date
rfc850_date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_195E4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    day_name_l
mov     [rbp+state], al

loc_195E4:
cmp     [rbp+state], 0
jz      short loc_195FE
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_195FE:
cmp     [rbp+state], 0
jz      short loc_19613
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_19613:
cmp     [rbp+state], 0
jz      short loc_19628
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    date2
mov     [rbp+state], al

loc_19628:
cmp     [rbp+state], 0
jz      short loc_1963D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1963D:
cmp     [rbp+state], 0
jz      short loc_19657
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    time_of_day
mov     [rbp+state], al

loc_19657:
cmp     [rbp+state], 0
jz      short loc_1966C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1966C:
cmp     [rbp+state], 0
jz      short loc_19681
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    GMT
mov     [rbp+state], al

loc_19681:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_196D9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5066 ; "rfc850_date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_196D9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 195A3
rfc850_date endp



; Attributes: bp-based frame

; int __cdecl second(ctx *c)
public second
second proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19772
mov     [rbp+i], 0
jmp     short loc_19751

loc_1971A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1973A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1973A:
cmp     [rbp+state], 0
jnz     short loc_1974D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_19757

loc_1974D:
add     [rbp+i], 1

loc_19751:
cmp     [rbp+i], 1
jle     short loc_1971A

loc_19757:
cmp     [rbp+i], 1
jle     short loc_1976A
cmp     [rbp+i], 2
jg      short loc_1976A
mov     eax, 1
jmp     short loc_1976F

loc_1976A:
mov     eax, 0

loc_1976F:
mov     [rbp+state], al

loc_19772:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_197CA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5077 ; "second"
mov     rdi, rax
mov     eax, 0
call    r9

loc_197CA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 196DF
second endp



; Attributes: bp-based frame

; int __cdecl subtype(ctx *c)
public subtype
subtype proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19811
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_19811:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19869
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5083 ; "subtype"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19869:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 197D0
subtype endp



; Attributes: bp-based frame

; int __cdecl time_of_day(ctx *c)
public time_of_day
time_of_day proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_198B0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    hour
mov     [rbp+state], al

loc_198B0:
cmp     [rbp+state], 0
jz      short loc_198CA
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_198CA:
cmp     [rbp+state], 0
jz      short loc_198DF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    minute
mov     [rbp+state], al

loc_198DF:
cmp     [rbp+state], 0
jz      short loc_198F9
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_198F9:
cmp     [rbp+state], 0
jz      short loc_1990E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    second
mov     [rbp+state], al

loc_1990E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19966
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5089 ; "time_of_day"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19966:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1986F
time_of_day endp



; Attributes: bp-based frame

; int __cdecl type(ctx *c)
public type
type proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_199AD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_199AD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19A05
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5095 ; "type"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19A05:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1996C
type endp



; Attributes: bp-based frame

; int __cdecl weight(ctx *c)
public weight
weight proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19A4C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_19A4C:
cmp     [rbp+state], 0
jz      short loc_19A66
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19A66:
cmp     [rbp+state], 0
jz      short loc_19A7B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_19A7B:
cmp     [rbp+state], 0
jz      short loc_19A97
mov     rax, [rbp+c]
lea     rsi, aQ         ; "Q="
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_19A97:
cmp     [rbp+state], 0
jz      short loc_19AAC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    qvalue
mov     [rbp+state], al

loc_19AAC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19B04
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5101 ; "weight"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19B04:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 19A0B
weight endp



; Attributes: bp-based frame

; int __cdecl year(ctx *c)
public year
year proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19B9D
mov     [rbp+i], 0
jmp     short loc_19B7C

loc_19B45:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_19B65
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_19B65:
cmp     [rbp+state], 0
jnz     short loc_19B78
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_19B82

loc_19B78:
add     [rbp+i], 1

loc_19B7C:
cmp     [rbp+i], 3
jle     short loc_19B45

loc_19B82:
cmp     [rbp+i], 3
jle     short loc_19B95
cmp     [rbp+i], 4
jg      short loc_19B95
mov     eax, 1
jmp     short loc_19B9A

loc_19B95:
mov     eax, 0

loc_19B9A:
mov     [rbp+state], al

loc_19B9D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19BF5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5112 ; "year"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19BF5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 19B0A
year endp



; Attributes: bp-based frame

; int __cdecl ETag(ctx *c)
public ETag
ETag proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19C41
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    entity_tag
mov     [rbp+state], al

loc_19C41:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19C99
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5120 ; "ETag"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19C99:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 19BFB
ETag endp



; Attributes: bp-based frame

; int __cdecl If_Match(ctx *c)
public If_Match
If_Match proc near

c= qword ptr -58h
save_5= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_19CE5
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19CE5:
cmp     [rbp+state], 0
jnz     loc_1A05C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1A00D
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      loc_19E1A
mov     [rbp+i], 0

loc_19D35:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_19DA5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_19D7C
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19D7C:
cmp     [rbp+state], 0
jz      short loc_19D91
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_19D91:
cmp     [rbp+state], 0
jnz     short loc_19DA4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_19DA5

loc_19DA4:
nop

loc_19DA5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19DF2
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19DF2:
cmp     [rbp+state], 0
jnz     short loc_19E11
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_19E1A

loc_19E11:
add     [rbp+i], 1
jmp     loc_19D35

loc_19E1A:
cmp     [rbp+state], 0
jz      short loc_19E34
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    entity_tag
mov     [rbp+state], al

loc_19E34:
cmp     [rbp+state], 0
jz      loc_19FF9
mov     [rbp+i_0], 0

loc_19E45:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_19F84
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_19E8B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_19E8B:
cmp     [rbp+state], 0
jz      short loc_19EA5
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_19EA5:
cmp     [rbp+state], 0
jz      loc_19F70
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_19F1A

loc_19EC9:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_19EE9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_19EE9:
cmp     [rbp+state], 0
jz      short loc_19F03
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    entity_tag
mov     [rbp+state], al

loc_19F03:
cmp     [rbp+state], 0
jnz     short loc_19F16
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_19F20

loc_19F16:
add     [rbp+i_1], 1

loc_19F1A:
cmp     [rbp+i_1], 0
jle     short loc_19EC9

loc_19F20:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19F70
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_4]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19F70:
cmp     [rbp+state], 0
jnz     short loc_19F83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_19F84

loc_19F83:
nop

loc_19F84:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_19FD1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_19FD1:
cmp     [rbp+state], 0
jnz     short loc_19FF0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_19FF9

loc_19FF0:
add     [rbp+i_0], 1
jmp     loc_19E45

loc_19FF9:
cmp     [rbp+state], 0
jnz     short loc_1A00C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1A00D

loc_1A00C:
nop

loc_1A00D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A05D
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_1A05D

loc_1A05C:
nop

loc_1A05D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A0B5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5148 ; "If_Match"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A0B5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 19C9F
If_Match endp



; Attributes: bp-based frame

; int __cdecl If_Modified_Since(ctx *c)
public If_Modified_Since
If_Modified_Since proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A0FC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1A0FC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A154
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5154 ; "If_Modified_Since"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A154:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A0BB
If_Modified_Since endp



; Attributes: bp-based frame

; int __cdecl If_None_Match(ctx *c)
public If_None_Match
If_None_Match proc near

c= qword ptr -58h
save_5= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A1A0
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1A1A0:
cmp     [rbp+state], 0
jnz     loc_1A517
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1A4C8
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      loc_1A2D5
mov     [rbp+i], 0

loc_1A1F0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1A260
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1A237
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1A237:
cmp     [rbp+state], 0
jz      short loc_1A24C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1A24C:
cmp     [rbp+state], 0
jnz     short loc_1A25F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1A260

loc_1A25F:
nop

loc_1A260:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A2AD
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A2AD:
cmp     [rbp+state], 0
jnz     short loc_1A2CC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1A2D5

loc_1A2CC:
add     [rbp+i], 1
jmp     loc_1A1F0

loc_1A2D5:
cmp     [rbp+state], 0
jz      short loc_1A2EF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    entity_tag
mov     [rbp+state], al

loc_1A2EF:
cmp     [rbp+state], 0
jz      loc_1A4B4
mov     [rbp+i_0], 0

loc_1A300:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1A43F
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1A346
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1A346:
cmp     [rbp+state], 0
jz      short loc_1A360
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1A360:
cmp     [rbp+state], 0
jz      loc_1A42B
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1A3D5

loc_1A384:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_1A3A4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1A3A4:
cmp     [rbp+state], 0
jz      short loc_1A3BE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    entity_tag
mov     [rbp+state], al

loc_1A3BE:
cmp     [rbp+state], 0
jnz     short loc_1A3D1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_1A3DB

loc_1A3D1:
add     [rbp+i_1], 1

loc_1A3D5:
cmp     [rbp+i_1], 0
jle     short loc_1A384

loc_1A3DB:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A42B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_4]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A42B:
cmp     [rbp+state], 0
jnz     short loc_1A43E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1A43F

loc_1A43E:
nop

loc_1A43F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A48C
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A48C:
cmp     [rbp+state], 0
jnz     short loc_1A4AB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1A4B4

loc_1A4AB:
add     [rbp+i_0], 1
jmp     loc_1A300

loc_1A4B4:
cmp     [rbp+state], 0
jnz     short loc_1A4C7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1A4C8

loc_1A4C7:
nop

loc_1A4C8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A518
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_1A518

loc_1A517:
nop

loc_1A518:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A570
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5182 ; "If_None_Match"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A570:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A15A
If_None_Match endp



; Attributes: bp-based frame

; int __cdecl If_Unmodified_Since(ctx *c)
public If_Unmodified_Since
If_Unmodified_Since proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A5B7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1A5B7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A60F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5188 ; "If_Unmodified_Since"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A60F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A576
If_Unmodified_Since endp



; Attributes: bp-based frame

; int __cdecl Last_Modified(ctx *c)
public Last_Modified
Last_Modified proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A656
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1A656:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A6AE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5194 ; "Last_Modified"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A6AE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A615
Last_Modified endp



; Attributes: bp-based frame

; int __cdecl entity_tag(ctx *c)
public entity_tag
entity_tag proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1A796
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_1A740

loc_1A704:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1A729
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    weak
mov     [rbp+state], al

loc_1A729:
cmp     [rbp+state], 0
jnz     short loc_1A73C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1A746

loc_1A73C:
add     [rbp+i], 1

loc_1A740:
cmp     [rbp+i], 0
jle     short loc_1A704

loc_1A746:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A796
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A796:
cmp     [rbp+state], 0
jz      short loc_1A7B0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    opaque_tag
mov     [rbp+state], al

loc_1A7B0:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A808
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5209 ; "entity_tag"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A808:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A6B4
entity_tag endp



; Attributes: bp-based frame

; int __cdecl etagc(ctx *c)
public etagc
etagc proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A854
mov     rax, [rbp+c]
mov     esi, 21h ; '!'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1A854:
cmp     [rbp+state], 0
jnz     short loc_1A88A
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1A88B
mov     rax, [rbp+c]
mov     edx, 7Eh ; '~'  ; y
mov     esi, 23h ; '#'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al
jmp     short loc_1A88B

loc_1A88A:
nop

loc_1A88B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A8E3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5216 ; "etagc"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A8E3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A80E
etagc endp



; Attributes: bp-based frame

; int __cdecl opaque_tag(ctx *c)
public opaque_tag
opaque_tag proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1A92A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_1A92A:
cmp     [rbp+state], 0
jz      short loc_1A97C
mov     [rbp+i], 0

loc_1A937:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1A957
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    etagc
mov     [rbp+state], al

loc_1A957:
cmp     [rbp+state], 0
jnz     short loc_1A976
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1A97C

loc_1A976:
add     [rbp+i], 1
jmp     short loc_1A937

loc_1A97C:
cmp     [rbp+state], 0
jz      short loc_1A991
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_1A991:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1A9E9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5226 ; "opaque_tag"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1A9E9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A8E9
opaque_tag endp



; Attributes: bp-based frame

; int __cdecl weak(ctx *c)
public weak
weak proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1AA37
mov     rax, [rbp+c]
lea     rsi, aW         ; "W/"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_1AA37:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1AA8F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5232 ; "weak"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1AA8F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1A9EF
weak endp



; Attributes: bp-based frame

; int __cdecl Accept_Ranges(ctx *c)
public Accept_Ranges
Accept_Ranges proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1AADB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    acceptable_ranges
mov     [rbp+state], al

loc_1AADB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1AB33
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5240 ; "Accept_Ranges"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1AB33:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1AA95
Accept_Ranges endp



; Attributes: bp-based frame

; int __cdecl Content_Range(ctx *c)
public Content_Range
Content_Range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1AB7F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _byte_content_range
mov     [rbp+state], al

loc_1AB7F:
cmp     [rbp+state], 0
jnz     short loc_1ABB0
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1ABB1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    other_content_range
mov     [rbp+state], al
jmp     short loc_1ABB1

loc_1ABB0:
nop

loc_1ABB1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1AC09
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5251 ; "Content_Range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1AC09:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1AB39
Content_Range endp



; Attributes: bp-based frame

; int __cdecl If_Range(ctx *c)
public If_Range
If_Range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1AC50
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    entity_tag
mov     [rbp+state], al

loc_1AC50:
cmp     [rbp+state], 0
jnz     short loc_1AC7C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1AC7D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al
jmp     short loc_1AC7D

loc_1AC7C:
nop

loc_1AC7D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1ACD5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5258 ; "If_Range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1ACD5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1AC0F
If_Range endp



; Attributes: bp-based frame

; int __cdecl Range(ctx *c)
public Range
Range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1AD21
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _byte_ranges_specifier
mov     [rbp+state], al

loc_1AD21:
cmp     [rbp+state], 0
jnz     short loc_1AD52
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1AD53
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    other_ranges_specifier
mov     [rbp+state], al
jmp     short loc_1AD53

loc_1AD52:
nop

loc_1AD53:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1ADAB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5269 ; "Range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1ADAB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1ACDB
Range endp



; Attributes: bp-based frame

; int __cdecl acceptable_ranges(ctx *c)
public acceptable_ranges
acceptable_ranges proc near

c= qword ptr -58h
save_5= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1B0EC
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      loc_1AEF9
mov     [rbp+i], 0

loc_1AE14:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1AE84
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1AE5B
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1AE5B:
cmp     [rbp+state], 0
jz      short loc_1AE70
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1AE70:
cmp     [rbp+state], 0
jnz     short loc_1AE83
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1AE84

loc_1AE83:
nop

loc_1AE84:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1AED1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1AED1:
cmp     [rbp+state], 0
jnz     short loc_1AEF0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1AEF9

loc_1AEF0:
add     [rbp+i], 1
jmp     loc_1AE14

loc_1AEF9:
cmp     [rbp+state], 0
jz      short loc_1AF13
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    range_unit
mov     [rbp+state], al

loc_1AF13:
cmp     [rbp+state], 0
jz      loc_1B0D8
mov     [rbp+i_0], 0

loc_1AF24:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1B063
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1AF6A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1AF6A:
cmp     [rbp+state], 0
jz      short loc_1AF84
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1AF84:
cmp     [rbp+state], 0
jz      loc_1B04F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1AFF9

loc_1AFA8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_1AFC8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1AFC8:
cmp     [rbp+state], 0
jz      short loc_1AFE2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    range_unit
mov     [rbp+state], al

loc_1AFE2:
cmp     [rbp+state], 0
jnz     short loc_1AFF5
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_1AFFF

loc_1AFF5:
add     [rbp+i_1], 1

loc_1AFF9:
cmp     [rbp+i_1], 0
jle     short loc_1AFA8

loc_1AFFF:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B04F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_4]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B04F:
cmp     [rbp+state], 0
jnz     short loc_1B062
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1B063

loc_1B062:
nop

loc_1B063:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B0B0
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B0B0:
cmp     [rbp+state], 0
jnz     short loc_1B0CF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1B0D8

loc_1B0CF:
add     [rbp+i_0], 1
jmp     loc_1AF24

loc_1B0D8:
cmp     [rbp+state], 0
jnz     short loc_1B0EB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1B0EC

loc_1B0EB:
nop

loc_1B0EC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B139
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B139:
cmp     [rbp+state], 0
jnz     short loc_1B16C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1B16D
mov     rax, [rbp+c]
lea     rsi, aNone      ; "NONE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al
jmp     short loc_1B16D

loc_1B16C:
nop

loc_1B16D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B1C5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5298 ; "acceptable_ranges"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B1C5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1ADB1
acceptable_ranges endp



; Attributes: bp-based frame

; int __cdecl byte_content_range(ctx *c)
public _byte_content_range
_byte_content_range proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1B211
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    bytes_unit
mov     [rbp+state], al

loc_1B211:
cmp     [rbp+state], 0
jz      short loc_1B226
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1B226:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1B2A8
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1B262
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _byte_range_resp
mov     [rbp+state], al

loc_1B262:
cmp     [rbp+state], 0
jnz     short loc_1B2A4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1B291
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    unsatisfied_range
mov     [rbp+state], al

loc_1B291:
cmp     [rbp+state], 0
jnz     short loc_1B2A7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1B2A8

loc_1B2A4:
nop
jmp     short loc_1B2A8

loc_1B2A7:
nop

loc_1B2A8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B2F5
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B2F5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B34D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5312 ; "byte_content_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B34D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1B1CB
_byte_content_range endp



; Attributes: bp-based frame

; int __cdecl byte_range(ctx *c)
public _byte_range
_byte_range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1B399
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    first_byte_pos
mov     [rbp+state], al

loc_1B399:
cmp     [rbp+state], 0
jz      short loc_1B3B3
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1B3B3:
cmp     [rbp+state], 0
jz      short loc_1B3CD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    last_byte_pos
mov     [rbp+state], al

loc_1B3CD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B425
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5322 ; "byte_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B425:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1B353
_byte_range endp



; Attributes: bp-based frame

; int __cdecl byte_range_resp(ctx *c)
public _byte_range_resp
_byte_range_resp proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1B46C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    _byte_range
mov     [rbp+state], al

loc_1B46C:
cmp     [rbp+state], 0
jz      short loc_1B486
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1B486:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1B508
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1B4C2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    complete_length
mov     [rbp+state], al

loc_1B4C2:
cmp     [rbp+state], 0
jnz     short loc_1B504
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1B4F1
mov     rax, [rbp+c]
mov     esi, 2Ah ; '*'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1B4F1:
cmp     [rbp+state], 0
jnz     short loc_1B507
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1B508

loc_1B504:
nop
jmp     short loc_1B508

loc_1B507:
nop

loc_1B508:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B555
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B555:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B5AD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5332 ; "byte_range_resp"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B5AD:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1B42B
_byte_range_resp endp



; Attributes: bp-based frame

; int __cdecl byte_range_set(ctx *c)
public _byte_range_set
_byte_range_set proc near

c= qword ptr -58h
save_6= qword ptr -50h
save_5= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 60h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1B6D5
mov     [rbp+i], 0

loc_1B5F0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1B660
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1B637
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1B637:
cmp     [rbp+state], 0
jz      short loc_1B64C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1B64C:
cmp     [rbp+state], 0
jnz     short loc_1B65F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1B660

loc_1B65F:
nop

loc_1B660:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B6AD
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B6AD:
cmp     [rbp+state], 0
jnz     short loc_1B6CC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1B6D5

loc_1B6CC:
add     [rbp+i], 1
jmp     loc_1B5F0

loc_1B6D5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1B757
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1B711
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _byte_range_spec
mov     [rbp+state], al

loc_1B711:
cmp     [rbp+state], 0
jnz     short loc_1B753
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1B740
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    suffix_byte_range_spec
mov     [rbp+state], al

loc_1B740:
cmp     [rbp+state], 0
jnz     short loc_1B756
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1B757

loc_1B753:
nop
jmp     short loc_1B757

loc_1B756:
nop

loc_1B757:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B7A4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B7A4:
cmp     [rbp+state], 0
jz      loc_1BA22
mov     [rbp+i_0], 0

loc_1B7B5:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1B9AD
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1B7FB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1B7FB:
cmp     [rbp+state], 0
jz      short loc_1B815
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1B815:
cmp     [rbp+state], 0
jz      loc_1B999
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     loc_1B93F

loc_1B83C:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
cmp     [rbp+state], 0
jz      short loc_1B85C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1B85C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1B8DB
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_1B898
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    _byte_range_spec
mov     [rbp+state], al

loc_1B898:
cmp     [rbp+state], 0
jnz     short loc_1B8DA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1B8C7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    suffix_byte_range_spec
mov     [rbp+state], al

loc_1B8C7:
cmp     [rbp+state], 0
jnz     short loc_1B8DA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_1B8DB

loc_1B8DA:
nop

loc_1B8DB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B928
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_5]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B928:
cmp     [rbp+state], 0
jnz     short loc_1B93B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
jmp     short loc_1B949

loc_1B93B:
add     [rbp+i_1], 1

loc_1B93F:
cmp     [rbp+i_1], 0
jle     loc_1B83C

loc_1B949:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B999
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_4]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B999:
cmp     [rbp+state], 0
jnz     short loc_1B9AC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1B9AD

loc_1B9AC:
nop

loc_1B9AD:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1B9FA
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1B9FA:
cmp     [rbp+state], 0
jnz     short loc_1BA19
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1BA22

loc_1BA19:
add     [rbp+i_0], 1
jmp     loc_1B7B5

loc_1BA22:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BA7A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5365 ; "byte_range_set"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BA7A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1B5B3
_byte_range_set endp



; Attributes: bp-based frame

; int __cdecl byte_range_spec(ctx *c)
public _byte_range_spec
_byte_range_spec proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BAC6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    first_byte_pos
mov     [rbp+state], al

loc_1BAC6:
cmp     [rbp+state], 0
jz      short loc_1BAE0
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1BAE0:
cmp     [rbp+state], 0
jz      loc_1BB96
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_1BB40

loc_1BB04:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1BB29
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    last_byte_pos
mov     [rbp+state], al

loc_1BB29:
cmp     [rbp+state], 0
jnz     short loc_1BB3C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1BB46

loc_1BB3C:
add     [rbp+i], 1

loc_1BB40:
cmp     [rbp+i], 0
jle     short loc_1BB04

loc_1BB46:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BB96
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BB96:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BBEE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5378 ; "byte_range_spec"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BBEE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BA80
_byte_range_spec endp



; Attributes: bp-based frame

; int __cdecl byte_ranges_specifier(ctx *c)
public _byte_ranges_specifier
_byte_ranges_specifier proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BC3A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    bytes_unit
mov     [rbp+state], al

loc_1BC3A:
cmp     [rbp+state], 0
jz      short loc_1BC54
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1BC54:
cmp     [rbp+state], 0
jz      short loc_1BC69
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    _byte_range_set
mov     [rbp+state], al

loc_1BC69:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BCC1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5385 ; "byte_ranges_specifier"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BCC1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BBF4
_byte_ranges_specifier endp



; Attributes: bp-based frame

; int __cdecl bytes_unit(ctx *c)
public bytes_unit
bytes_unit proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BD0F
mov     rax, [rbp+c]
lea     rsi, aBytes     ; "BYTES"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1BD0F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BD67
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5391 ; "bytes_unit"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BD67:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BCC7
bytes_unit endp



; Attributes: bp-based frame

; int __cdecl complete_length(ctx *c)
public complete_length
complete_length proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BDEA
mov     [rbp+i], 0

loc_1BDA6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1BDC6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1BDC6:
cmp     [rbp+state], 0
jnz     short loc_1BDE4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1BDEA

loc_1BDE4:
add     [rbp+i], 1
jmp     short loc_1BDA6

loc_1BDEA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BE42
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5401 ; "complete_length"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BE42:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BD6D
complete_length endp



; Attributes: bp-based frame

; int __cdecl first_byte_pos(ctx *c)
public first_byte_pos
first_byte_pos proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BEC5
mov     [rbp+i], 0

loc_1BE81:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1BEA1
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1BEA1:
cmp     [rbp+state], 0
jnz     short loc_1BEBF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1BEC5

loc_1BEBF:
add     [rbp+i], 1
jmp     short loc_1BE81

loc_1BEC5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BF1D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5411 ; "first_byte_pos"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BF1D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BE48
first_byte_pos endp



; Attributes: bp-based frame

; int __cdecl last_byte_pos(ctx *c)
public last_byte_pos
last_byte_pos proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1BFA0
mov     [rbp+i], 0

loc_1BF5C:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1BF7C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1BF7C:
cmp     [rbp+state], 0
jnz     short loc_1BF9A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1BFA0

loc_1BF9A:
add     [rbp+i], 1
jmp     short loc_1BF5C

loc_1BFA0:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1BFF8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5421 ; "last_byte_pos"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1BFF8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BF23
last_byte_pos endp



; Attributes: bp-based frame

; int __cdecl other_content_range(ctx *c)
public other_content_range
other_content_range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C044
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    other_range_unit
mov     [rbp+state], al

loc_1C044:
cmp     [rbp+state], 0
jz      short loc_1C059
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1C059:
cmp     [rbp+state], 0
jz      short loc_1C073
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    other_range_resp
mov     [rbp+state], al

loc_1C073:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C0CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5431 ; "other_content_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C0CB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1BFFE
other_content_range endp



; Attributes: bp-based frame

; int __cdecl other_range_resp(ctx *c)
public other_range_resp
other_range_resp proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C14F
mov     [rbp+i], 0

loc_1C10A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1C12A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __char
mov     [rbp+state], al

loc_1C12A:
cmp     [rbp+state], 0
jnz     short loc_1C149
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1C14F

loc_1C149:
add     [rbp+i], 1
jmp     short loc_1C10A

loc_1C14F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C1A7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5441 ; "other_range_resp"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C1A7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C0D1
other_range_resp endp



; Attributes: bp-based frame

; int __cdecl other_range_set(ctx *c)
public other_range_set
other_range_set proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C22A
mov     [rbp+i], 0

loc_1C1E6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1C206
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __vchar
mov     [rbp+state], al

loc_1C206:
cmp     [rbp+state], 0
jnz     short loc_1C224
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1C22A

loc_1C224:
add     [rbp+i], 1
jmp     short loc_1C1E6

loc_1C22A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C282
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5451 ; "other_range_set"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C282:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C1AD
other_range_set endp



; Attributes: bp-based frame

; int __cdecl other_range_unit(ctx *c)
public other_range_unit
other_range_unit proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C2C9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1C2C9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C321
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5457 ; "other_range_unit"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C321:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C288
other_range_unit endp



; Attributes: bp-based frame

; int __cdecl other_ranges_specifier(ctx *c)
public other_ranges_specifier
other_ranges_specifier proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C368
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    other_range_unit
mov     [rbp+state], al

loc_1C368:
cmp     [rbp+state], 0
jz      short loc_1C382
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1C382:
cmp     [rbp+state], 0
jz      short loc_1C397
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    other_range_set
mov     [rbp+state], al

loc_1C397:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C3EF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5463 ; "other_ranges_specifier"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C3EF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C327
other_ranges_specifier endp



; Attributes: bp-based frame

; int __cdecl range_unit(ctx *c)
public range_unit
range_unit proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C436
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    bytes_unit
mov     [rbp+state], al

loc_1C436:
cmp     [rbp+state], 0
jnz     short loc_1C462
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1C463
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    other_range_unit
mov     [rbp+state], al
jmp     short loc_1C463

loc_1C462:
nop

loc_1C463:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C4BB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5470 ; "range_unit"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C4BB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C3F5
range_unit endp



; Attributes: bp-based frame

; int __cdecl suffix_byte_range_spec(ctx *c)
public suffix_byte_range_spec
suffix_byte_range_spec proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C507
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1C507:
cmp     [rbp+state], 0
jz      short loc_1C521
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    suffix_length
mov     [rbp+state], al

loc_1C521:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C579
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5478 ; "suffix_byte_range_spec"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C579:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C4C1
suffix_byte_range_spec endp



; Attributes: bp-based frame

; int __cdecl suffix_length(ctx *c)
public suffix_length
suffix_length proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C5FC
mov     [rbp+i], 0

loc_1C5B8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1C5D8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1C5D8:
cmp     [rbp+state], 0
jnz     short loc_1C5F6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1C5FC

loc_1C5F6:
add     [rbp+i], 1
jmp     short loc_1C5B8

loc_1C5FC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C654
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5488 ; "suffix_length"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C654:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C57F
suffix_length endp



; Attributes: bp-based frame

; int __cdecl unsatisfied_range(ctx *c)
public unsatisfied_range
unsatisfied_range proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C6A2
mov     rax, [rbp+c]
lea     rsi, asc_241E9  ; "*/"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1C6A2:
cmp     [rbp+state], 0
jz      short loc_1C6B7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    complete_length
mov     [rbp+state], al

loc_1C6B7:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C70F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5494 ; "unsatisfied_range"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C70F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C65A
unsatisfied_range endp



; Attributes: bp-based frame

; int __cdecl Age(ctx *c)
public Age
Age proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1C75B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    delta_seconds
mov     [rbp+state], al

loc_1C75B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C7B3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5502 ; "Age"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C7B3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C715
Age endp



; Attributes: bp-based frame

; int __cdecl Cache_Control(ctx *c)
public Cache_Control
Cache_Control proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1C8DB
mov     [rbp+i], 0

loc_1C7F6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1C866
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1C83D
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1C83D:
cmp     [rbp+state], 0
jz      short loc_1C852
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1C852:
cmp     [rbp+state], 0
jnz     short loc_1C865
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1C866

loc_1C865:
nop

loc_1C866:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1C8B3
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1C8B3:
cmp     [rbp+state], 0
jnz     short loc_1C8D2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1C8DB

loc_1C8D2:
add     [rbp+i], 1
jmp     loc_1C7F6

loc_1C8DB:
cmp     [rbp+state], 0
jz      short loc_1C8F5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cache_directive
mov     [rbp+state], al

loc_1C8F5:
cmp     [rbp+state], 0
jz      loc_1CABA
mov     [rbp+i_0], 0

loc_1C906:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1CA45
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1C94C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1C94C:
cmp     [rbp+state], 0
jz      short loc_1C966
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1C966:
cmp     [rbp+state], 0
jz      loc_1CA31
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1C9DB

loc_1C98A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1C9AA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1C9AA:
cmp     [rbp+state], 0
jz      short loc_1C9C4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cache_directive
mov     [rbp+state], al

loc_1C9C4:
cmp     [rbp+state], 0
jnz     short loc_1C9D7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1C9E1

loc_1C9D7:
add     [rbp+i_1], 1

loc_1C9DB:
cmp     [rbp+i_1], 0
jle     short loc_1C98A

loc_1C9E1:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CA31
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CA31:
cmp     [rbp+state], 0
jnz     short loc_1CA44
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1CA45

loc_1CA44:
nop

loc_1CA45:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CA92
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CA92:
cmp     [rbp+state], 0
jnz     short loc_1CAB1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1CABA

loc_1CAB1:
add     [rbp+i_0], 1
jmp     loc_1C906

loc_1CABA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CB12
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5528 ; "Cache_Control"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CB12:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1C7B9
Cache_Control endp



; Attributes: bp-based frame

; int __cdecl Expires(ctx *c)
public Expires
Expires proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1CB59
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1CB59:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CBB1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5534 ; "Expires"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CBB1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1CB18
Expires endp



; Attributes: bp-based frame

; int __cdecl Pragma(ctx *c)
public Pragma
Pragma proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1CCD9
mov     [rbp+i], 0

loc_1CBF4:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1CC64
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1CC3B
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1CC3B:
cmp     [rbp+state], 0
jz      short loc_1CC50
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1CC50:
cmp     [rbp+state], 0
jnz     short loc_1CC63
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1CC64

loc_1CC63:
nop

loc_1CC64:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CCB1
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CCB1:
cmp     [rbp+state], 0
jnz     short loc_1CCD0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1CCD9

loc_1CCD0:
add     [rbp+i], 1
jmp     loc_1CBF4

loc_1CCD9:
cmp     [rbp+state], 0
jz      short loc_1CCF3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pragma_directive
mov     [rbp+state], al

loc_1CCF3:
cmp     [rbp+state], 0
jz      loc_1CEB8
mov     [rbp+i_0], 0

loc_1CD04:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1CE43
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1CD4A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1CD4A:
cmp     [rbp+state], 0
jz      short loc_1CD64
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1CD64:
cmp     [rbp+state], 0
jz      loc_1CE2F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1CDD9

loc_1CD88:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1CDA8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1CDA8:
cmp     [rbp+state], 0
jz      short loc_1CDC2
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    pragma_directive
mov     [rbp+state], al

loc_1CDC2:
cmp     [rbp+state], 0
jnz     short loc_1CDD5
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1CDDF

loc_1CDD5:
add     [rbp+i_1], 1

loc_1CDD9:
cmp     [rbp+i_1], 0
jle     short loc_1CD88

loc_1CDDF:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CE2F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CE2F:
cmp     [rbp+state], 0
jnz     short loc_1CE42
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1CE43

loc_1CE42:
nop

loc_1CE43:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CE90
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CE90:
cmp     [rbp+state], 0
jnz     short loc_1CEAF
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1CEB8

loc_1CEAF:
add     [rbp+i_0], 1
jmp     loc_1CD04

loc_1CEB8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1CF10
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5560 ; "Pragma"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1CF10:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1CBB7
Pragma endp



; Attributes: bp-based frame

; int __cdecl Warning(ctx *c)
public Warning
Warning proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1D038
mov     [rbp+i], 0

loc_1CF53:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1CFC3
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1CF9A
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1CF9A:
cmp     [rbp+state], 0
jz      short loc_1CFAF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1CFAF:
cmp     [rbp+state], 0
jnz     short loc_1CFC2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1CFC3

loc_1CFC2:
nop

loc_1CFC3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D010
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D010:
cmp     [rbp+state], 0
jnz     short loc_1D02F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1D038

loc_1D02F:
add     [rbp+i], 1
jmp     loc_1CF53

loc_1D038:
cmp     [rbp+state], 0
jz      short loc_1D052
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    warning_value
mov     [rbp+state], al

loc_1D052:
cmp     [rbp+state], 0
jz      loc_1D217
mov     [rbp+i_0], 0

loc_1D063:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1D1A2
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1D0A9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1D0A9:
cmp     [rbp+state], 0
jz      short loc_1D0C3
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1D0C3:
cmp     [rbp+state], 0
jz      loc_1D18E
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1D138

loc_1D0E7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1D107
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1D107:
cmp     [rbp+state], 0
jz      short loc_1D121
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    warning_value
mov     [rbp+state], al

loc_1D121:
cmp     [rbp+state], 0
jnz     short loc_1D134
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1D13E

loc_1D134:
add     [rbp+i_1], 1

loc_1D138:
cmp     [rbp+i_1], 0
jle     short loc_1D0E7

loc_1D13E:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D18E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D18E:
cmp     [rbp+state], 0
jnz     short loc_1D1A1
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1D1A2

loc_1D1A1:
nop

loc_1D1A2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D1EF
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D1EF:
cmp     [rbp+state], 0
jnz     short loc_1D20E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1D217

loc_1D20E:
add     [rbp+i_0], 1
jmp     loc_1D063

loc_1D217:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D26F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5586 ; "Warning"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D26F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1CF16
Warning endp



; Attributes: bp-based frame

; int __cdecl cache_directive(ctx *c)
public cache_directive
cache_directive proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1D2B6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1D2B6:
cmp     [rbp+state], 0
jz      loc_1D435
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_1D3DB

loc_1D2DD:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1D302
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1D302:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1D377
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1D339
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1D339:
cmp     [rbp+state], 0
jnz     short loc_1D376
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1D363
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_1D363:
cmp     [rbp+state], 0
jnz     short loc_1D376
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1D377

loc_1D376:
nop

loc_1D377:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D3C4
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D3C4:
cmp     [rbp+state], 0
jnz     short loc_1D3D7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1D3E5

loc_1D3D7:
add     [rbp+i], 1

loc_1D3DB:
cmp     [rbp+i], 0
jle     loc_1D2DD

loc_1D3E5:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D435
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D435:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D48D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5599 ; "cache_directive"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D48D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1D275
cache_directive endp



; Attributes: bp-based frame

; int __cdecl delta_seconds(ctx *c)
public delta_seconds
delta_seconds proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1D510
mov     [rbp+i], 0

loc_1D4CC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1D4EC
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1D4EC:
cmp     [rbp+state], 0
jnz     short loc_1D50A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1D510

loc_1D50A:
add     [rbp+i], 1
jmp     short loc_1D4CC

loc_1D510:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D568
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5609 ; "delta_seconds"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D568:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1D493
delta_seconds endp



; Attributes: bp-based frame

; int __cdecl extension_pragma(ctx *c)
public extension_pragma
extension_pragma proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1D5AF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1D5AF:
cmp     [rbp+state], 0
jz      loc_1D72E
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_1D6D4

loc_1D5D6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1D5FB
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1D5FB:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1D670
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1D632
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1D632:
cmp     [rbp+state], 0
jnz     short loc_1D66F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1D65C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_1D65C:
cmp     [rbp+state], 0
jnz     short loc_1D66F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1D670

loc_1D66F:
nop

loc_1D670:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D6BD
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D6BD:
cmp     [rbp+state], 0
jnz     short loc_1D6D0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1D6DE

loc_1D6D0:
add     [rbp+i], 1

loc_1D6D4:
cmp     [rbp+i], 0
jle     loc_1D5D6

loc_1D6DE:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D72E
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D72E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D786
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5622 ; "extension_pragma"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D786:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1D56E
extension_pragma endp



; Attributes: bp-based frame

; int __cdecl pragma_directive(ctx *c)
public pragma_directive
pragma_directive proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1D7D4
mov     rax, [rbp+c]
lea     rsi, aNoCache   ; "NO-CACHE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1D7D4:
cmp     [rbp+state], 0
jnz     short loc_1D800
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1D801
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    extension_pragma
mov     [rbp+state], al
jmp     short loc_1D801

loc_1D800:
nop

loc_1D801:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D859
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5629 ; "pragma_directive"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D859:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1D78C
pragma_directive endp



; Attributes: bp-based frame

; int __cdecl warn_agent(ctx *c)
public warn_agent
warn_agent proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1D9A5
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1D8C6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    uri_host
mov     [rbp+state], al

loc_1D8C6:
cmp     [rbp+state], 0
jz      loc_1D991
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_1D93B

loc_1D8EA:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1D90F
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1D90F:
cmp     [rbp+state], 0
jz      short loc_1D924
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    port
mov     [rbp+state], al

loc_1D924:
cmp     [rbp+state], 0
jnz     short loc_1D937
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1D941

loc_1D937:
add     [rbp+i], 1

loc_1D93B:
cmp     [rbp+i], 0
jle     short loc_1D8EA

loc_1D941:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D991
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_0]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D991:
cmp     [rbp+state], 0
jnz     short loc_1D9A4
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1D9A5

loc_1D9A4:
nop

loc_1D9A5:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1D9F2
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1D9F2:
cmp     [rbp+state], 0
jnz     short loc_1DA1E
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1DA1F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    pseudonym
mov     [rbp+state], al
jmp     short loc_1DA1F

loc_1DA1E:
nop

loc_1DA1F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DA77
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5643 ; "warn_agent"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DA77:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1D85F
warn_agent endp



; Attributes: bp-based frame

; int __cdecl warn_code(ctx *c)
public warn_code
warn_code proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1DB10
mov     [rbp+i], 0
jmp     short loc_1DAEF

loc_1DAB8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1DAD8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1DAD8:
cmp     [rbp+state], 0
jnz     short loc_1DAEB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1DAF5

loc_1DAEB:
add     [rbp+i], 1

loc_1DAEF:
cmp     [rbp+i], 2
jle     short loc_1DAB8

loc_1DAF5:
cmp     [rbp+i], 2
jle     short loc_1DB08
cmp     [rbp+i], 3
jg      short loc_1DB08
mov     eax, 1
jmp     short loc_1DB0D

loc_1DB08:
mov     eax, 0

loc_1DB0D:
mov     [rbp+state], al

loc_1DB10:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DB68
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5654 ; "warn_code"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DB68:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1DA7D
warn_code endp



; Attributes: bp-based frame

; int __cdecl warn_date(ctx *c)
public warn_date
warn_date proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1DBAF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_1DBAF:
cmp     [rbp+state], 0
jz      short loc_1DBC4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    HTTP_date
mov     [rbp+state], al

loc_1DBC4:
cmp     [rbp+state], 0
jz      short loc_1DBD9
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_1DBD9:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DC31
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5660 ; "warn_date"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DC31:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1DB6E
warn_date endp



; Attributes: bp-based frame

; int __cdecl warn_text(ctx *c)
public warn_text
warn_text proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1DC78
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_1DC78:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DCD0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5666 ; "warn_text"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DCD0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1DC37
warn_text endp



; Attributes: bp-based frame

; int __cdecl warning_value(ctx *c)
public warning_value
warning_value proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1DD17
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    warn_code
mov     [rbp+state], al

loc_1DD17:
cmp     [rbp+state], 0
jz      short loc_1DD2C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1DD2C:
cmp     [rbp+state], 0
jz      short loc_1DD41
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    warn_agent
mov     [rbp+state], al

loc_1DD41:
cmp     [rbp+state], 0
jz      short loc_1DD56
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1DD56:
cmp     [rbp+state], 0
jz      short loc_1DD6B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    warn_text
mov     [rbp+state], al

loc_1DD6B:
cmp     [rbp+state], 0
jz      loc_1DE31
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     short loc_1DDDB

loc_1DD8F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1DDAF
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1DDAF:
cmp     [rbp+state], 0
jz      short loc_1DDC4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    warn_date
mov     [rbp+state], al

loc_1DDC4:
cmp     [rbp+state], 0
jnz     short loc_1DDD7
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1DDE1

loc_1DDD7:
add     [rbp+i], 1

loc_1DDDB:
cmp     [rbp+i], 0
jle     short loc_1DD8F

loc_1DDE1:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DE31
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DE31:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DE89
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5677 ; "warning_value"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DE89:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1DCD6
warning_value endp



; Attributes: bp-based frame

; int __cdecl Proxy_Authenticate(ctx *c)
public Proxy_Authenticate
Proxy_Authenticate proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1DFB1
mov     [rbp+i], 0

loc_1DECC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1DF3C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1DF13
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1DF13:
cmp     [rbp+state], 0
jz      short loc_1DF28
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1DF28:
cmp     [rbp+state], 0
jnz     short loc_1DF3B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1DF3C

loc_1DF3B:
nop

loc_1DF3C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1DF89
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1DF89:
cmp     [rbp+state], 0
jnz     short loc_1DFA8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1DFB1

loc_1DFA8:
add     [rbp+i], 1
jmp     loc_1DECC

loc_1DFB1:
cmp     [rbp+state], 0
jz      short loc_1DFCB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    challenge
mov     [rbp+state], al

loc_1DFCB:
cmp     [rbp+state], 0
jz      loc_1E190
mov     [rbp+i_0], 0

loc_1DFDC:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1E11B
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1E022
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1E022:
cmp     [rbp+state], 0
jz      short loc_1E03C
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1E03C:
cmp     [rbp+state], 0
jz      loc_1E107
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1E0B1

loc_1E060:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1E080
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1E080:
cmp     [rbp+state], 0
jz      short loc_1E09A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    challenge
mov     [rbp+state], al

loc_1E09A:
cmp     [rbp+state], 0
jnz     short loc_1E0AD
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1E0B7

loc_1E0AD:
add     [rbp+i_1], 1

loc_1E0B1:
cmp     [rbp+i_1], 0
jle     short loc_1E060

loc_1E0B7:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E107
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E107:
cmp     [rbp+state], 0
jnz     short loc_1E11A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1E11B

loc_1E11A:
nop

loc_1E11B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E168
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E168:
cmp     [rbp+state], 0
jnz     short loc_1E187
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1E190

loc_1E187:
add     [rbp+i_0], 1
jmp     loc_1DFDC

loc_1E190:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E1E8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5703 ; "Proxy_Authenticate"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E1E8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1DE8F
Proxy_Authenticate endp



; Attributes: bp-based frame

; int __cdecl Proxy_Authorization(ctx *c)
public Proxy_Authorization
Proxy_Authorization proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1E234
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    credentials
mov     [rbp+state], al

loc_1E234:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E28C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5711 ; "Proxy_Authorization"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E28C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1E1EE
Proxy_Authorization endp



; Attributes: bp-based frame

; int __cdecl WWW_Authenticate(ctx *c)
public WWW_Authenticate
WWW_Authenticate proc near

c= qword ptr -48h
save_4= qword ptr -40h
save_3= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1E3B4
mov     [rbp+i], 0

loc_1E2CF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1E33F
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1E316
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1E316:
cmp     [rbp+state], 0
jz      short loc_1E32B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1E32B:
cmp     [rbp+state], 0
jnz     short loc_1E33E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1E33F

loc_1E33E:
nop

loc_1E33F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E38C
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E38C:
cmp     [rbp+state], 0
jnz     short loc_1E3AB
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1E3B4

loc_1E3AB:
add     [rbp+i], 1
jmp     loc_1E2CF

loc_1E3B4:
cmp     [rbp+state], 0
jz      short loc_1E3CE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    challenge
mov     [rbp+state], al

loc_1E3CE:
cmp     [rbp+state], 0
jz      loc_1E593
mov     [rbp+i_0], 0

loc_1E3DF:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1E51E
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
cmp     [rbp+state], 0
jz      short loc_1E425
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1E425:
cmp     [rbp+state], 0
jz      short loc_1E43F
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1E43F:
cmp     [rbp+state], 0
jz      loc_1E50A
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     short loc_1E4B4

loc_1E463:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1E483
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1E483:
cmp     [rbp+state], 0
jz      short loc_1E49D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    challenge
mov     [rbp+state], al

loc_1E49D:
cmp     [rbp+state], 0
jnz     short loc_1E4B0
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1E4BA

loc_1E4B0:
add     [rbp+i_1], 1

loc_1E4B4:
cmp     [rbp+i_1], 0
jle     short loc_1E463

loc_1E4BA:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E50A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_3]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E50A:
cmp     [rbp+state], 0
jnz     short loc_1E51D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1E51E

loc_1E51D:
nop

loc_1E51E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E56B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_2]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E56B:
cmp     [rbp+state], 0
jnz     short loc_1E58A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1E593

loc_1E58A:
add     [rbp+i_0], 1
jmp     loc_1E3DF

loc_1E593:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E5EB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5736 ; "WWW_Authenticate"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E5EB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1E292
WWW_Authenticate endp



; Attributes: bp-based frame

; int __cdecl auth_param(ctx *c)
public auth_param
auth_param proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1E632
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1E632:
cmp     [rbp+state], 0
jz      short loc_1E647
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    BWS
mov     [rbp+state], al

loc_1E647:
cmp     [rbp+state], 0
jz      short loc_1E661
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1E661:
cmp     [rbp+state], 0
jz      short loc_1E676
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    BWS
mov     [rbp+state], al

loc_1E676:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1E6EE
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1E6AD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1E6AD:
cmp     [rbp+state], 0
jnz     short loc_1E6EA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1E6D7
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    quoted_string
mov     [rbp+state], al

loc_1E6D7:
cmp     [rbp+state], 0
jnz     short loc_1E6ED
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1E6EE

loc_1E6EA:
nop
jmp     short loc_1E6EE

loc_1E6ED:
nop

loc_1E6EE:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E73B
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E73B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E793
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5744 ; "auth_param"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E793:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1E5F1
auth_param endp



; Attributes: bp-based frame

; int __cdecl auth_scheme(ctx *c)
public auth_scheme
auth_scheme proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1E7DA
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_1E7DA:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1E832
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5750 ; "auth_scheme"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1E832:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1E799
auth_scheme endp



; Attributes: bp-based frame

; int __cdecl challenge(ctx *c)
public challenge
challenge proc near

c= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 70h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1E879
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_scheme
mov     [rbp+state], al

loc_1E879:
cmp     [rbp+state], 0
jz      loc_1ED51
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_1ECF7

loc_1E8A0:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1E8FC
mov     [rbp+i_0], 0

loc_1E8B8:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1E8D8
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1E8D8:
cmp     [rbp+state], 0
jnz     short loc_1E8F6
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
cmp     [rbp+i_0], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1E8FC

loc_1E8F6:
add     [rbp+i_0], 1
jmp     short loc_1E8B8

loc_1E8FC:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1EC93
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1E93C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token68
mov     [rbp+state], al

loc_1E93C:
cmp     [rbp+state], 0
jnz     loc_1EC92
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_1EC7F
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     loc_1EC25

loc_1E97C:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1EA01
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1E9C3
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1E9C3:
cmp     [rbp+state], 0
jnz     short loc_1EA00
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1E9ED
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_param
mov     [rbp+state], al

loc_1E9ED:
cmp     [rbp+state], 0
jnz     short loc_1EA00
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1EA01

loc_1EA00:
nop

loc_1EA01:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EA4E
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EA4E:
cmp     [rbp+state], 0
jz      loc_1EC0E
mov     [rbp+i_2], 0

loc_1EA5F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1EB99
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_1EAA5
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1EAA5:
cmp     [rbp+state], 0
jz      short loc_1EABF
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1EABF:
cmp     [rbp+state], 0
jz      loc_1EB85
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_1EB2F

loc_1EAE3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_1EB03
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1EB03:
cmp     [rbp+state], 0
jz      short loc_1EB18
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_param
mov     [rbp+state], al

loc_1EB18:
cmp     [rbp+state], 0
jnz     short loc_1EB2B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_1EB35

loc_1EB2B:
add     [rbp+i_3], 1

loc_1EB2F:
cmp     [rbp+i_3], 0
jle     short loc_1EAE3

loc_1EB35:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EB85
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_6]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EB85:
cmp     [rbp+state], 0
jnz     short loc_1EB98
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_1EB99

loc_1EB98:
nop

loc_1EB99:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EBE6
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_5]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EBE6:
cmp     [rbp+state], 0
jnz     short loc_1EC05
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
nop
mov     eax, [rbp+i_2]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1EC0E

loc_1EC05:
add     [rbp+i_2], 1
jmp     loc_1EA5F

loc_1EC0E:
cmp     [rbp+state], 0
jnz     short loc_1EC21
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1EC2F

loc_1EC21:
add     [rbp+i_1], 1

loc_1EC25:
cmp     [rbp+i_1], 0
jle     loc_1E97C

loc_1EC2F:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EC7F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EC7F:
cmp     [rbp+state], 0
jnz     short loc_1EC92
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1EC93

loc_1EC92:
nop

loc_1EC93:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1ECE0
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1ECE0:
cmp     [rbp+state], 0
jnz     short loc_1ECF3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1ED01

loc_1ECF3:
add     [rbp+i], 1

loc_1ECF7:
cmp     [rbp+i], 0
jle     loc_1E8A0

loc_1ED01:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1ED51
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1ED51:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EDA9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5787 ; "challenge"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EDA9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1E838
challenge endp



; Attributes: bp-based frame

; int __cdecl credentials(ctx *c)
public credentials
credentials proc near

c= qword ptr -68h
save_7= qword ptr -60h
save_6= qword ptr -58h
save_5= qword ptr -50h
save_4= qword ptr -48h
save_3= qword ptr -40h
save_2= qword ptr -38h
save_1= qword ptr -30h
save_0= qword ptr -28h
save= qword ptr -20h
i_3= dword ptr -18h
i_2= dword ptr -14h
i_1= dword ptr -10h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 70h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1EDF0
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_scheme
mov     [rbp+state], al

loc_1EDF0:
cmp     [rbp+state], 0
jz      loc_1F2C8
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i], 0
jmp     loc_1F26E

loc_1EE17:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_1EE73
mov     [rbp+i_0], 0

loc_1EE2F:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1EE4F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_1EE4F:
cmp     [rbp+state], 0
jnz     short loc_1EE6D
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
cmp     [rbp+i_0], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1EE73

loc_1EE6D:
add     [rbp+i_0], 1
jmp     short loc_1EE2F

loc_1EE73:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1F20A
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1EEB3
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    token68
mov     [rbp+state], al

loc_1EEB3:
cmp     [rbp+state], 0
jnz     loc_1F209
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      loc_1F1F6
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_1], 0
jmp     loc_1F19C

loc_1EEF3:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_3], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_1EF78
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_4], rax
cmp     [rbp+state], 0
jz      short loc_1EF3A
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1EF3A:
cmp     [rbp+state], 0
jnz     short loc_1EF77
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1EF64
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_param
mov     [rbp+state], al

loc_1EF64:
cmp     [rbp+state], 0
jnz     short loc_1EF77
mov     rax, [rbp+c]
mov     rdx, [rbp+save_4]
mov     [rax], rdx
jmp     short loc_1EF78

loc_1EF77:
nop

loc_1EF78:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1EFC5
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1EFC5:
cmp     [rbp+state], 0
jz      loc_1F185
mov     [rbp+i_2], 0

loc_1EFD6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_5], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1F110
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_6], rax
cmp     [rbp+state], 0
jz      short loc_1F01C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F01C:
cmp     [rbp+state], 0
jz      short loc_1F036
mov     rax, [rbp+c]
mov     esi, 2Ch ; ','  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F036:
cmp     [rbp+state], 0
jz      loc_1F0FC
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     [rbp+i_3], 0
jmp     short loc_1F0A6

loc_1F05A:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_7], rax
cmp     [rbp+state], 0
jz      short loc_1F07A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F07A:
cmp     [rbp+state], 0
jz      short loc_1F08F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    auth_param
mov     [rbp+state], al

loc_1F08F:
cmp     [rbp+state], 0
jnz     short loc_1F0A2
mov     rax, [rbp+c]
mov     rdx, [rbp+save_7]
mov     [rax], rdx
jmp     short loc_1F0AC

loc_1F0A2:
add     [rbp+i_3], 1

loc_1F0A6:
cmp     [rbp+i_3], 0
jle     short loc_1F05A

loc_1F0AC:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F0FC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_6]
mov     esi, [rbp+i_3]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F0FC:
cmp     [rbp+state], 0
jnz     short loc_1F10F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_6]
mov     [rax], rdx
jmp     short loc_1F110

loc_1F10F:
nop

loc_1F110:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F15D
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_5]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F15D:
cmp     [rbp+state], 0
jnz     short loc_1F17C
mov     rax, [rbp+c]
mov     rdx, [rbp+save_5]
mov     [rax], rdx
nop
mov     eax, [rbp+i_2]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1F185

loc_1F17C:
add     [rbp+i_2], 1
jmp     loc_1EFD6

loc_1F185:
cmp     [rbp+state], 0
jnz     short loc_1F198
mov     rax, [rbp+c]
mov     rdx, [rbp+save_3]
mov     [rax], rdx
jmp     short loc_1F1A6

loc_1F198:
add     [rbp+i_1], 1

loc_1F19C:
cmp     [rbp+i_1], 0
jle     loc_1EEF3

loc_1F1A6:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F1F6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save_2]
mov     esi, [rbp+i_1]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F1F6:
cmp     [rbp+state], 0
jnz     short loc_1F209
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
jmp     short loc_1F20A

loc_1F209:
nop

loc_1F20A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F257
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F257:
cmp     [rbp+state], 0
jnz     short loc_1F26A
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_1F278

loc_1F26A:
add     [rbp+i], 1

loc_1F26E:
cmp     [rbp+i], 0
jle     loc_1EE17

loc_1F278:
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F2C8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rdx, [rbp+save]
mov     esi, [rbp+i]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aOption    ; "__option"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F2C8:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F320
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5823 ; "credentials"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F320:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1EDAF
credentials endp



; Attributes: bp-based frame

; int __cdecl Authorization(ctx *c)
public Authorization
Authorization proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1F367
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    credentials
mov     [rbp+state], al

loc_1F367:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F3BF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5829 ; "Authorization"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F3BF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F326
Authorization endp



; Attributes: bp-based frame

; int __cdecl token68(ctx *c)
public token68
token68 proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      loc_1F628
mov     [rbp+i], 0

loc_1F402:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_1F5B4
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_1F448
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __alpha
mov     [rbp+state], al

loc_1F448:
cmp     [rbp+state], 0
jnz     loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F476
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __digit
mov     [rbp+state], al

loc_1F476:
cmp     [rbp+state], 0
jnz     loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F4A9
mov     rax, [rbp+c]
mov     esi, 2Dh ; '-'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F4A9:
cmp     [rbp+state], 0
jnz     loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F4DC
mov     rax, [rbp+c]
mov     esi, 2Eh ; '.'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F4DC:
cmp     [rbp+state], 0
jnz     loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F50F
mov     rax, [rbp+c]
mov     esi, 5Fh ; '_'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F50F:
cmp     [rbp+state], 0
jnz     loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F542
mov     rax, [rbp+c]
mov     esi, 7Eh ; '~'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F542:
cmp     [rbp+state], 0
jnz     short loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F571
mov     rax, [rbp+c]
mov     esi, 2Bh ; '+'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F571:
cmp     [rbp+state], 0
jnz     short loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_1F5A0
mov     rax, [rbp+c]
mov     esi, 2Fh ; '/'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F5A0:
cmp     [rbp+state], 0
jnz     short loc_1F5B3
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_1F5B4

loc_1F5B3:
nop

loc_1F5B4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F601
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F601:
cmp     [rbp+state], 0
jnz     short loc_1F61F
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
cmp     [rbp+i], 0
setnle  al
mov     [rbp+state], al
jmp     short loc_1F628

loc_1F61F:
add     [rbp+i], 1
jmp     loc_1F402

loc_1F628:
cmp     [rbp+state], 0
jz      short loc_1F67F
mov     [rbp+i_0], 0

loc_1F635:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_1F65A
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F65A:
cmp     [rbp+state], 0
jnz     short loc_1F679
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_1F67F

loc_1F679:
add     [rbp+i_0], 1
jmp     short loc_1F635

loc_1F67F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F6D7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5845 ; "token68"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F6D7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F3C5
token68 endp



; Attributes: bp-based frame

; int __cdecl Connection_header(ctx *c)
public Connection_header
Connection_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1F725
mov     rax, [rbp+c]
lea     rsi, aConnection_0 ; "CONNECTION"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1F725:
cmp     [rbp+state], 0
jz      short loc_1F73F
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F73F:
cmp     [rbp+state], 0
jz      short loc_1F754
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F754:
cmp     [rbp+state], 0
jz      short loc_1F769
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Connection
mov     [rbp+state], al

loc_1F769:
cmp     [rbp+state], 0
jz      short loc_1F77E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F77E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F7D6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5851 ; "Connection_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F7D6:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F6DD
Connection_header endp



; Attributes: bp-based frame

; int __cdecl Content_Length_header(ctx *c)
public Content_Length_header
Content_Length_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1F824
mov     rax, [rbp+c]
lea     rsi, aContentLength_0 ; "CONTENT-LENGTH"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1F824:
cmp     [rbp+state], 0
jz      short loc_1F83E
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F83E:
cmp     [rbp+state], 0
jz      short loc_1F853
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F853:
cmp     [rbp+state], 0
jz      short loc_1F868
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Content_Length
mov     [rbp+state], al

loc_1F868:
cmp     [rbp+state], 0
jz      short loc_1F87D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F87D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F8D5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5857 ; "Content_Length_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F8D5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F7DC
Content_Length_header endp



; Attributes: bp-based frame

; int __cdecl Content_Type_header(ctx *c)
public Content_Type_header
Content_Type_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1F923
mov     rax, [rbp+c]
lea     rsi, aContentType_0 ; "CONTENT-TYPE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1F923:
cmp     [rbp+state], 0
jz      short loc_1F93D
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1F93D:
cmp     [rbp+state], 0
jz      short loc_1F952
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F952:
cmp     [rbp+state], 0
jz      short loc_1F967
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Content_Type
mov     [rbp+state], al

loc_1F967:
cmp     [rbp+state], 0
jz      short loc_1F97C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1F97C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1F9D4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5863 ; "Content_Type_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1F9D4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F8DB
Content_Type_header endp



; Attributes: bp-based frame

; int __cdecl Trailer_header(ctx *c)
public Trailer_header
Trailer_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FA22
mov     rax, [rbp+c]
lea     rsi, aTrailer_0 ; "TRAILER"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FA22:
cmp     [rbp+state], 0
jz      short loc_1FA3C
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FA3C:
cmp     [rbp+state], 0
jz      short loc_1FA51
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FA51:
cmp     [rbp+state], 0
jz      short loc_1FA66
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Trailer
mov     [rbp+state], al

loc_1FA66:
cmp     [rbp+state], 0
jz      short loc_1FA7B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FA7B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FAD3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5869 ; "Trailer_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FAD3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1F9DA
Trailer_header endp



; Attributes: bp-based frame

; int __cdecl Transfer_Encoding_header(ctx *c)
public Transfer_Encoding_header
Transfer_Encoding_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FB21
mov     rax, [rbp+c]
lea     rsi, aTransferEncodi_1 ; "TRANSFER-ENCODING"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FB21:
cmp     [rbp+state], 0
jz      short loc_1FB3B
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FB3B:
cmp     [rbp+state], 0
jz      short loc_1FB50
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FB50:
cmp     [rbp+state], 0
jz      short loc_1FB65
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Transfer_Encoding
mov     [rbp+state], al

loc_1FB65:
cmp     [rbp+state], 0
jz      short loc_1FB7A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FB7A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FBD2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5875 ; "Transfer_Encoding_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FBD2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FAD9
Transfer_Encoding_header endp



; Attributes: bp-based frame

; int __cdecl Upgrade_header(ctx *c)
public Upgrade_header
Upgrade_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FC20
mov     rax, [rbp+c]
lea     rsi, aUpgrade_0 ; "UPGRADE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FC20:
cmp     [rbp+state], 0
jz      short loc_1FC3A
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FC3A:
cmp     [rbp+state], 0
jz      short loc_1FC4F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FC4F:
cmp     [rbp+state], 0
jz      short loc_1FC64
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Upgrade
mov     [rbp+state], al

loc_1FC64:
cmp     [rbp+state], 0
jz      short loc_1FC79
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FC79:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FCD1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5881 ; "Upgrade_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FCD1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FBD8
Upgrade_header endp



; Attributes: bp-based frame

; int __cdecl Via_header(ctx *c)
public Via_header
Via_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FD1F
mov     rax, [rbp+c]
lea     rsi, aVia_0     ; "VIA"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FD1F:
cmp     [rbp+state], 0
jz      short loc_1FD39
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FD39:
cmp     [rbp+state], 0
jz      short loc_1FD4E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FD4E:
cmp     [rbp+state], 0
jz      short loc_1FD63
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Via
mov     [rbp+state], al

loc_1FD63:
cmp     [rbp+state], 0
jz      short loc_1FD78
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FD78:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FDD0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5887 ; "Via_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FDD0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FCD7
Via_header endp



; Attributes: bp-based frame

; int __cdecl Age_header(ctx *c)
public Age_header
Age_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FE1E
mov     rax, [rbp+c]
lea     rsi, aAge_0     ; "AGE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FE1E:
cmp     [rbp+state], 0
jz      short loc_1FE38
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FE38:
cmp     [rbp+state], 0
jz      short loc_1FE4D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FE4D:
cmp     [rbp+state], 0
jz      short loc_1FE62
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Age
mov     [rbp+state], al

loc_1FE62:
cmp     [rbp+state], 0
jz      short loc_1FE77
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FE77:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FECF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5893 ; "Age_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FECF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FDD6
Age_header endp



; Attributes: bp-based frame

; int __cdecl Expires_header(ctx *c)
public Expires_header
Expires_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_1FF1D
mov     rax, [rbp+c]
lea     rsi, aExpires_0 ; "EXPIRES"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_1FF1D:
cmp     [rbp+state], 0
jz      short loc_1FF37
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_1FF37:
cmp     [rbp+state], 0
jz      short loc_1FF4C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FF4C:
cmp     [rbp+state], 0
jz      short loc_1FF61
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Expires
mov     [rbp+state], al

loc_1FF61:
cmp     [rbp+state], 0
jz      short loc_1FF76
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_1FF76:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_1FFCE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5899 ; "Expires_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_1FFCE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FED5
Expires_header endp



; Attributes: bp-based frame

; int __cdecl Date_header(ctx *c)
public Date_header
Date_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2001C
mov     rax, [rbp+c]
lea     rsi, aDate_0    ; "DATE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2001C:
cmp     [rbp+state], 0
jz      short loc_20036
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20036:
cmp     [rbp+state], 0
jz      short loc_2004B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2004B:
cmp     [rbp+state], 0
jz      short loc_20060
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Date
mov     [rbp+state], al

loc_20060:
cmp     [rbp+state], 0
jz      short loc_20075
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20075:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_200CD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5905 ; "Date_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_200CD:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 1FFD4
Date_header endp



; Attributes: bp-based frame

; int __cdecl Location_header(ctx *c)
public Location_header
Location_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2011B
mov     rax, [rbp+c]
lea     rsi, aLocation  ; "LOCATION"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2011B:
cmp     [rbp+state], 0
jz      short loc_20135
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20135:
cmp     [rbp+state], 0
jz      short loc_2014A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2014A:
cmp     [rbp+state], 0
jz      short loc_2015F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Location
mov     [rbp+state], al

loc_2015F:
cmp     [rbp+state], 0
jz      short loc_20174
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20174:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_201CC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5911 ; "Location_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_201CC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 200D3
Location_header endp



; Attributes: bp-based frame

; int __cdecl Retry_After_header(ctx *c)
public Retry_After_header
Retry_After_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2021A
mov     rax, [rbp+c]
lea     rsi, aRetryAfter_0 ; "RETRY-AFTER"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2021A:
cmp     [rbp+state], 0
jz      short loc_20234
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20234:
cmp     [rbp+state], 0
jz      short loc_20249
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20249:
cmp     [rbp+state], 0
jz      short loc_2025E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Retry_After
mov     [rbp+state], al

loc_2025E:
cmp     [rbp+state], 0
jz      short loc_20273
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20273:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_202CB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5917 ; "Retry_After_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_202CB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 201D2
Retry_After_header endp



; Attributes: bp-based frame

; int __cdecl Vary_header(ctx *c)
public Vary_header
Vary_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20319
mov     rax, [rbp+c]
lea     rsi, aVary_0    ; "VARY"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20319:
cmp     [rbp+state], 0
jz      short loc_20333
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20333:
cmp     [rbp+state], 0
jz      short loc_20348
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20348:
cmp     [rbp+state], 0
jz      short loc_2035D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Vary
mov     [rbp+state], al

loc_2035D:
cmp     [rbp+state], 0
jz      short loc_20372
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20372:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_203CA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5923 ; "Vary_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_203CA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 202D1
Vary_header endp



; Attributes: bp-based frame

; int __cdecl Warning_header(ctx *c)
public Warning_header
Warning_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20418
mov     rax, [rbp+c]
lea     rsi, aWarning_0 ; "WARNING"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20418:
cmp     [rbp+state], 0
jz      short loc_20432
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20432:
cmp     [rbp+state], 0
jz      short loc_20447
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20447:
cmp     [rbp+state], 0
jz      short loc_2045C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Warning
mov     [rbp+state], al

loc_2045C:
cmp     [rbp+state], 0
jz      short loc_20471
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20471:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_204C9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5929 ; "Warning_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_204C9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 203D0
Warning_header endp



; Attributes: bp-based frame

; int __cdecl Cache_Control_header(ctx *c)
public Cache_Control_header
Cache_Control_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20517
mov     rax, [rbp+c]
lea     rsi, aCacheControl_0 ; "CACHE-CONTROL"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20517:
cmp     [rbp+state], 0
jz      short loc_20531
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20531:
cmp     [rbp+state], 0
jz      short loc_20546
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20546:
cmp     [rbp+state], 0
jz      short loc_2055B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Cache_Control
mov     [rbp+state], al

loc_2055B:
cmp     [rbp+state], 0
jz      short loc_20570
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20570:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_205C8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5935 ; "Cache_Control_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_205C8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 204CF
Cache_Control_header endp



; Attributes: bp-based frame

; int __cdecl Expect_header(ctx *c)
public Expect_header
Expect_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20616
mov     rax, [rbp+c]
lea     rsi, aExpect_0  ; "EXPECT"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20616:
cmp     [rbp+state], 0
jz      short loc_20630
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20630:
cmp     [rbp+state], 0
jz      short loc_20645
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20645:
cmp     [rbp+state], 0
jz      short loc_2065A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Expect
mov     [rbp+state], al

loc_2065A:
cmp     [rbp+state], 0
jz      short loc_2066F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2066F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_206C7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5941 ; "Expect_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_206C7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 205CE
Expect_header endp



; Attributes: bp-based frame

; int __cdecl Host_header(ctx *c)
public Host_header
Host_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20715
mov     rax, [rbp+c]
lea     rsi, aHost_0    ; "HOST"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20715:
cmp     [rbp+state], 0
jz      short loc_2072F
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2072F:
cmp     [rbp+state], 0
jz      short loc_20744
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20744:
cmp     [rbp+state], 0
jz      short loc_20759
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Host
mov     [rbp+state], al

loc_20759:
cmp     [rbp+state], 0
jz      short loc_2076E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2076E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_207C6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5947 ; "Host_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_207C6:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 206CD
Host_header endp



; Attributes: bp-based frame

; int __cdecl Max_Forwards_header(ctx *c)
public Max_Forwards_header
Max_Forwards_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20814
mov     rax, [rbp+c]
lea     rsi, aMaxForwards_0 ; "MAX-FORWARDS"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20814:
cmp     [rbp+state], 0
jz      short loc_2082E
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2082E:
cmp     [rbp+state], 0
jz      short loc_20843
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20843:
cmp     [rbp+state], 0
jz      short loc_20858
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Max_Forwards
mov     [rbp+state], al

loc_20858:
cmp     [rbp+state], 0
jz      short loc_2086D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2086D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_208C5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5953 ; "Max_Forwards_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_208C5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 207CC
Max_Forwards_header endp



; Attributes: bp-based frame

; int __cdecl Pragma_header(ctx *c)
public Pragma_header
Pragma_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20913
mov     rax, [rbp+c]
lea     rsi, aPragma_0  ; "PRAGMA"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20913:
cmp     [rbp+state], 0
jz      short loc_2092D
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2092D:
cmp     [rbp+state], 0
jz      short loc_20942
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20942:
cmp     [rbp+state], 0
jz      short loc_20957
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Pragma
mov     [rbp+state], al

loc_20957:
cmp     [rbp+state], 0
jz      short loc_2096C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2096C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_209C4
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5959 ; "Pragma_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_209C4:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 208CB
Pragma_header endp



; Attributes: bp-based frame

; int __cdecl Range_header(ctx *c)
public Range_header
Range_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20A12
mov     rax, [rbp+c]
lea     rsi, aRange_0   ; "RANGE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20A12:
cmp     [rbp+state], 0
jz      short loc_20A2C
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20A2C:
cmp     [rbp+state], 0
jz      short loc_20A41
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20A41:
cmp     [rbp+state], 0
jz      short loc_20A56
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Range
mov     [rbp+state], al

loc_20A56:
cmp     [rbp+state], 0
jz      short loc_20A6B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20A6B:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20AC3
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5965 ; "Range_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20AC3:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 209CA
Range_header endp



; Attributes: bp-based frame

; int __cdecl TE_header(ctx *c)
public TE_header
TE_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20B11
mov     rax, [rbp+c]
lea     rsi, aTe_0      ; "TE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20B11:
cmp     [rbp+state], 0
jz      short loc_20B2B
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20B2B:
cmp     [rbp+state], 0
jz      short loc_20B40
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20B40:
cmp     [rbp+state], 0
jz      short loc_20B55
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    TE
mov     [rbp+state], al

loc_20B55:
cmp     [rbp+state], 0
jz      short loc_20B6A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20B6A:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20BC2
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5971 ; "TE_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20BC2:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20AC9
TE_header endp



; Attributes: bp-based frame

; int __cdecl If_Match_header(ctx *c)
public If_Match_header
If_Match_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20C10
mov     rax, [rbp+c]
lea     rsi, aIfMatch_0 ; "IF-MATCH"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20C10:
cmp     [rbp+state], 0
jz      short loc_20C2A
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20C2A:
cmp     [rbp+state], 0
jz      short loc_20C3F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20C3F:
cmp     [rbp+state], 0
jz      short loc_20C54
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    If_Match
mov     [rbp+state], al

loc_20C54:
cmp     [rbp+state], 0
jz      short loc_20C69
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20C69:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20CC1
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5977 ; "If_Match_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20CC1:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20BC8
If_Match_header endp



; Attributes: bp-based frame

; int __cdecl If_None_Match_header(ctx *c)
public If_None_Match_header
If_None_Match_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20D0F
mov     rax, [rbp+c]
lea     rsi, aIfNoneMatch_0 ; "IF-NONE-MATCH"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20D0F:
cmp     [rbp+state], 0
jz      short loc_20D29
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20D29:
cmp     [rbp+state], 0
jz      short loc_20D3E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20D3E:
cmp     [rbp+state], 0
jz      short loc_20D53
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    If_None_Match
mov     [rbp+state], al

loc_20D53:
cmp     [rbp+state], 0
jz      short loc_20D68
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20D68:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20DC0
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5983 ; "If_None_Match_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20DC0:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20CC7
If_None_Match_header endp



; Attributes: bp-based frame

; int __cdecl If_Modified_Since_header(ctx *c)
public If_Modified_Since_header
If_Modified_Since_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20E0E
mov     rax, [rbp+c]
lea     rsi, aIfModifiedSinc_1 ; "IF-MODIFIED-SINCE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20E0E:
cmp     [rbp+state], 0
jz      short loc_20E28
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20E28:
cmp     [rbp+state], 0
jz      short loc_20E3D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20E3D:
cmp     [rbp+state], 0
jz      short loc_20E52
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    If_Modified_Since
mov     [rbp+state], al

loc_20E52:
cmp     [rbp+state], 0
jz      short loc_20E67
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20E67:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20EBF
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5989 ; "If_Modified_Since_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20EBF:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20DC6
If_Modified_Since_header endp



; Attributes: bp-based frame

; int __cdecl If_Unmodified_Since_header(ctx *c)
public If_Unmodified_Since_header
If_Unmodified_Since_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_20F0D
mov     rax, [rbp+c]
lea     rsi, aIfUnmodifiedSi_1 ; "IF-UNMODIFIED-SINCE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_20F0D:
cmp     [rbp+state], 0
jz      short loc_20F27
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_20F27:
cmp     [rbp+state], 0
jz      short loc_20F3C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20F3C:
cmp     [rbp+state], 0
jz      short loc_20F51
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    If_Unmodified_Since
mov     [rbp+state], al

loc_20F51:
cmp     [rbp+state], 0
jz      short loc_20F66
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_20F66:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_20FBE
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___5995 ; "If_Unmodified_Since_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_20FBE:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20EC5
If_Unmodified_Since_header endp



; Attributes: bp-based frame

; int __cdecl If_Range_header(ctx *c)
public If_Range_header
If_Range_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2100C
mov     rax, [rbp+c]
lea     rsi, aIfRange_0 ; "IF-RANGE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2100C:
cmp     [rbp+state], 0
jz      short loc_21026
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21026:
cmp     [rbp+state], 0
jz      short loc_2103B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2103B:
cmp     [rbp+state], 0
jz      short loc_21050
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    If_Range
mov     [rbp+state], al

loc_21050:
cmp     [rbp+state], 0
jz      short loc_21065
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21065:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_210BD
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6001 ; "If_Range_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_210BD:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 20FC4
If_Range_header endp



; Attributes: bp-based frame

; int __cdecl Accept_header(ctx *c)
public Accept_header
Accept_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2110B
mov     rax, [rbp+c]
lea     rsi, aAccept_1  ; "ACCEPT"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2110B:
cmp     [rbp+state], 0
jz      short loc_21125
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21125:
cmp     [rbp+state], 0
jz      short loc_2113A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2113A:
cmp     [rbp+state], 0
jz      short loc_2114F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Accept
mov     [rbp+state], al

loc_2114F:
cmp     [rbp+state], 0
jz      short loc_21164
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21164:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_211BC
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6007 ; "Accept_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_211BC:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 210C3
Accept_header endp



; Attributes: bp-based frame

; int __cdecl Accept_Charset_header(ctx *c)
public Accept_Charset_header
Accept_Charset_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_2120A
mov     rax, [rbp+c]
lea     rsi, aAcceptCharset_0 ; "ACCEPT-CHARSET"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_2120A:
cmp     [rbp+state], 0
jz      short loc_21224
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21224:
cmp     [rbp+state], 0
jz      short loc_21239
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21239:
cmp     [rbp+state], 0
jz      short loc_2124E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Accept_Charset
mov     [rbp+state], al

loc_2124E:
cmp     [rbp+state], 0
jz      short loc_21263
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21263:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_212BB
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6013 ; "Accept_Charset_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_212BB:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 211C2
Accept_Charset_header endp



; Attributes: bp-based frame

; int __cdecl Accept_Encoding_header(ctx *c)
public Accept_Encoding_header
Accept_Encoding_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21309
mov     rax, [rbp+c]
lea     rsi, aAcceptEncoding_1 ; "ACCEPT-ENCODING"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21309:
cmp     [rbp+state], 0
jz      short loc_21323
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21323:
cmp     [rbp+state], 0
jz      short loc_21338
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21338:
cmp     [rbp+state], 0
jz      short loc_2134D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Accept_Encoding
mov     [rbp+state], al

loc_2134D:
cmp     [rbp+state], 0
jz      short loc_21362
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21362:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_213BA
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6019 ; "Accept_Encoding_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_213BA:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 212C1
Accept_Encoding_header endp



; Attributes: bp-based frame

; int __cdecl Accept_Language_header(ctx *c)
public Accept_Language_header
Accept_Language_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21408
mov     rax, [rbp+c]
lea     rsi, aAcceptLanguage_1 ; "ACCEPT-LANGUAGE"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21408:
cmp     [rbp+state], 0
jz      short loc_21422
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21422:
cmp     [rbp+state], 0
jz      short loc_21437
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21437:
cmp     [rbp+state], 0
jz      short loc_2144C
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Accept_Language
mov     [rbp+state], al

loc_2144C:
cmp     [rbp+state], 0
jz      short loc_21461
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21461:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_214B9
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6025 ; "Accept_Language_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_214B9:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 213C0
Accept_Language_header endp



; Attributes: bp-based frame

; int __cdecl Authorization_header(ctx *c)
public Authorization_header
Authorization_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21507
mov     rax, [rbp+c]
lea     rsi, aAuthorization ; "AUTHORIZATION"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21507:
cmp     [rbp+state], 0
jz      short loc_21521
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21521:
cmp     [rbp+state], 0
jz      short loc_21536
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21536:
cmp     [rbp+state], 0
jz      short loc_2154B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Authorization
mov     [rbp+state], al

loc_2154B:
cmp     [rbp+state], 0
jz      short loc_21560
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21560:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_215B8
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6031 ; "Authorization_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_215B8:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 214BF
Authorization_header endp



; Attributes: bp-based frame

; int __cdecl Proxy_Authorization_header(ctx *c)
public Proxy_Authorization_header
Proxy_Authorization_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21606
mov     rax, [rbp+c]
lea     rsi, aProxyAuthoriza_1 ; "PROXY-AUTHORIZATION"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21606:
cmp     [rbp+state], 0
jz      short loc_21620
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21620:
cmp     [rbp+state], 0
jz      short loc_21635
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21635:
cmp     [rbp+state], 0
jz      short loc_2164A
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Proxy_Authorization
mov     [rbp+state], al

loc_2164A:
cmp     [rbp+state], 0
jz      short loc_2165F
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2165F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_216B7
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6037 ; "Proxy_Authorization_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_216B7:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 215BE
Proxy_Authorization_header endp



; Attributes: bp-based frame

; int __cdecl Referer_header(ctx *c)
public Referer_header
Referer_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21705
mov     rax, [rbp+c]
lea     rsi, aReferer_0 ; "REFERER"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21705:
cmp     [rbp+state], 0
jz      short loc_2171F
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2171F:
cmp     [rbp+state], 0
jz      short loc_21734
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21734:
cmp     [rbp+state], 0
jz      short loc_21749
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Referer
mov     [rbp+state], al

loc_21749:
cmp     [rbp+state], 0
jz      short loc_2175E
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2175E:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_217B6
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6043 ; "Referer_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_217B6:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 216BD
Referer_header endp



; Attributes: bp-based frame

; int __cdecl User_Agent_header(ctx *c)
public User_Agent_header
User_Agent_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21804
mov     rax, [rbp+c]
lea     rsi, aUserAgent_0 ; "USER-AGENT"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21804:
cmp     [rbp+state], 0
jz      short loc_2181E
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2181E:
cmp     [rbp+state], 0
jz      short loc_21833
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21833:
cmp     [rbp+state], 0
jz      short loc_21848
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    User_Agent
mov     [rbp+state], al

loc_21848:
cmp     [rbp+state], 0
jz      short loc_2185D
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2185D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_218B5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6049 ; "User_Agent_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_218B5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 217BC
User_Agent_header endp



; Attributes: bp-based frame

; int __cdecl cookie_pair(ctx *c)
public cookie_pair
cookie_pair proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21901
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cookie_name
mov     [rbp+state], al

loc_21901:
cmp     [rbp+state], 0
jz      short loc_2191B
mov     rax, [rbp+c]
mov     esi, 3Dh ; '='  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2191B:
cmp     [rbp+state], 0
jz      short loc_21935
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cookie_value
mov     [rbp+state], al

loc_21935:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_2198D
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6059 ; "cookie_pair"
mov     rdi, rax
mov     eax, 0
call    r9

loc_2198D:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 218BB
cookie_pair endp



; Attributes: bp-based frame

; int __cdecl cookie_name(ctx *c)
public cookie_name
cookie_name proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_219D4
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    token
mov     [rbp+state], al

loc_219D4:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21A2C
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6065 ; "cookie_name"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21A2C:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 21993
cookie_name endp



; Attributes: bp-based frame

; int __cdecl cookie_value(ctx *c)
public cookie_value
cookie_value proc near

c= qword ptr -38h
save_2= qword ptr -30h
save_1= qword ptr -28h
save_0= qword ptr -20h
save= qword ptr -18h
i_0= dword ptr -0Ch
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_21B19
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_21A99
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_21A99:
cmp     [rbp+state], 0
jz      short loc_21AF0
mov     [rbp+i], 0

loc_21AA6:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_21ACB
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cookie_octet
mov     [rbp+state], al

loc_21ACB:
cmp     [rbp+state], 0
jnz     short loc_21AEA
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_21AF0

loc_21AEA:
add     [rbp+i], 1
jmp     short loc_21AA6

loc_21AF0:
cmp     [rbp+state], 0
jz      short loc_21B05
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __dquote
mov     [rbp+state], al

loc_21B05:
cmp     [rbp+state], 0
jnz     short loc_21B18
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_21B19

loc_21B18:
nop

loc_21B19:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21B66
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21B66:
cmp     [rbp+state], 0
jnz     short loc_21BD2
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_21BD3
mov     [rbp+i_0], 0

loc_21B88:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_2], rax
cmp     [rbp+state], 0
jz      short loc_21BAD
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cookie_octet
mov     [rbp+state], al

loc_21BAD:
cmp     [rbp+state], 0
jnz     short loc_21BCC
mov     rax, [rbp+c]
mov     rdx, [rbp+save_2]
mov     [rax], rdx
nop
mov     eax, [rbp+i_0]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_21BD3

loc_21BCC:
add     [rbp+i_0], 1
jmp     short loc_21B88

loc_21BD2:
nop

loc_21BD3:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21C2B
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6085 ; "cookie_value"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21C2B:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 21A32
cookie_value endp



; Attributes: bp-based frame

; int __cdecl cookie_octet(ctx *c)
public cookie_octet
cookie_octet proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21C79
mov     rax, [rbp+c]
lea     rsi, asc_2435D  ; "!"
mov     rdi, rax        ; c
call    __num
mov     [rbp+state], al

loc_21C79:
cmp     [rbp+state], 0
jnz     loc_21D53
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_21CB1
mov     rax, [rbp+c]
mov     edx, 2Bh ; '+'  ; y
mov     esi, 23h ; '#'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_21CB1:
cmp     [rbp+state], 0
jnz     loc_21D56
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_21CE9
mov     rax, [rbp+c]
mov     edx, 3Ah ; ':'  ; y
mov     esi, 2Dh ; '-'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_21CE9:
cmp     [rbp+state], 0
jnz     short loc_21D59
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_21D1D
mov     rax, [rbp+c]
mov     edx, 5Bh ; '['  ; y
mov     esi, 3Ch ; '<'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al

loc_21D1D:
cmp     [rbp+state], 0
jnz     short loc_21D5C
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_21D5D
mov     rax, [rbp+c]
mov     edx, 7Eh ; '~'  ; y
mov     esi, 5Dh ; ']'  ; x
mov     rdi, rax        ; c
call    __range
mov     [rbp+state], al
jmp     short loc_21D5D

loc_21D53:
nop
jmp     short loc_21D5D

loc_21D56:
nop
jmp     short loc_21D5D

loc_21D59:
nop
jmp     short loc_21D5D

loc_21D5C:
nop

loc_21D5D:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21DB5
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6092 ; "cookie_octet"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21DB5:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 21C31
cookie_octet endp



; Attributes: bp-based frame

; int __cdecl Cookie_header(ctx *c)
public Cookie_header
Cookie_header proc near

c= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21E03
mov     rax, [rbp+c]
lea     rsi, aCookie    ; "COOKIE:"
mov     rdi, rax        ; c
call    __istring
mov     [rbp+state], al

loc_21E03:
cmp     [rbp+state], 0
jz      short loc_21E18
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21E18:
cmp     [rbp+state], 0
jz      short loc_21E32
mov     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    cookie_string
mov     [rbp+state], al

loc_21E32:
cmp     [rbp+state], 0
jz      short loc_21E47
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_21E47:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21E9F
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6100 ; "Cookie_header"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21E9F:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 21DBB
Cookie_header endp



; Attributes: bp-based frame

; int __cdecl cookie_string(ctx *c)
public cookie_string
cookie_string proc near

c= qword ptr -28h
save_1= qword ptr -20h
save_0= qword ptr -18h
save= qword ptr -10h
i= dword ptr -8
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_21EE6
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    cookie_pair
mov     [rbp+state], al

loc_21EE6:
cmp     [rbp+state], 0
jz      loc_21FF1
mov     [rbp+i], 0

loc_21EF7:
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      short loc_21F7C
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_1], rax
cmp     [rbp+state], 0
jz      short loc_21F3E
mov     rax, [rbp+c]
mov     esi, 3Bh ; ';'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_21F3E:
cmp     [rbp+state], 0
jz      short loc_21F53
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    __sp
mov     [rbp+state], al

loc_21F53:
cmp     [rbp+state], 0
jz      short loc_21F68
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    cookie_pair
mov     [rbp+state], al

loc_21F68:
cmp     [rbp+state], 0
jnz     short loc_21F7B
mov     rax, [rbp+c]
mov     rdx, [rbp+save_1]
mov     [rax], rdx
jmp     short loc_21F7C

loc_21F7B:
nop

loc_21F7C:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_21FC9
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save_0]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9

loc_21FC9:
cmp     [rbp+state], 0
jnz     short loc_21FE8
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
nop
mov     eax, [rbp+i]
not     eax
shr     eax, 1Fh
mov     [rbp+state], al
jmp     short loc_21FF1

loc_21FE8:
add     [rbp+i], 1
jmp     loc_21EF7

loc_21FF1:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_22049
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6112 ; "cookie_string"
mov     rdi, rax
mov     eax, 0
call    r9

loc_22049:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 21EA5
cookie_string endp



; Attributes: bp-based frame

; int __cdecl header_field(ctx *c)
public header_field
header_field proc near

c= qword ptr -28h
save_0= qword ptr -18h
save= qword ptr -10h
state= byte ptr -1

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save], rax
cmp     [rbp+state], 0
jz      short loc_22090
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Content_Length_header
mov     [rbp+state], al

loc_22090:
cmp     [rbp+state], 0
jnz     loc_221CE
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
cmp     [rbp+state], 0
jz      short loc_220BE
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    Transfer_Encoding_header
mov     [rbp+state], al

loc_220BE:
cmp     [rbp+state], 0
jnz     loc_221D1
mov     rax, [rbp+c]
mov     rdx, [rbp+save]
mov     [rax], rdx
mov     [rbp+state], 1
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax+1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
cmp     [rbp+state], 0
jz      loc_2217F
mov     rax, [rbp+c]
mov     rax, [rax]
mov     [rbp+save_0], rax
cmp     [rbp+state], 0
jz      short loc_22112
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    field_name
mov     [rbp+state], al

loc_22112:
cmp     [rbp+state], 0
jz      short loc_2212C
mov     rax, [rbp+c]
mov     esi, 3Ah ; ':'  ; __c
mov     rdi, rax        ; c
call    __icar
mov     [rbp+state], al

loc_2212C:
cmp     [rbp+state], 0
jz      short loc_22141
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_22141:
cmp     [rbp+state], 0
jz      short loc_22156
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    field_value
mov     [rbp+state], al

loc_22156:
cmp     [rbp+state], 0
jz      short loc_2216B
mov     rax, [rbp+c]
mov     rdi, rax        ; c
call    OWS
mov     [rbp+state], al

loc_2216B:
cmp     [rbp+state], 0
jnz     short loc_2217E
mov     rax, [rbp+c]
mov     rdx, [rbp+save_0]
mov     [rax], rdx
jmp     short loc_2217F

loc_2217E:
nop

loc_2217F:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_221D2
mov     rax, [rbp+c]
mov     r9, [rax+8]
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8d, 0
mov     rcx, rdx
lea     rdx, aGroup     ; "__group"
mov     rdi, rax
mov     eax, 0
call    r9
jmp     short loc_221D2

loc_221CE:
nop
jmp     short loc_221D2

loc_221D1:
nop

loc_221D2:
mov     rax, [rbp+c]
mov     eax, [rax+10h]
lea     edx, [rax-1]
mov     rax, [rbp+c]
mov     [rax+10h], edx
mov     rax, [rbp+c]
mov     rax, [rax+8]
test    rax, rax
jz      short loc_2222A
mov     rax, [rbp+c]
mov     r9, [rax+8]
mov     rax, [rbp+c]
mov     rax, [rax]
sub     rax, [rbp+save]
mov     rcx, rax
movsx   esi, [rbp+state]
mov     rdx, [rbp+save]
mov     rax, [rbp+c]
mov     r8, rcx
mov     rcx, rdx
lea     rdx, __func___6121 ; "header_field"
mov     rdi, rax
mov     eax, 0
call    r9

loc_2222A:
movsx   eax, [rbp+state]
leave
retn
; } // starts at 2204F
header_field endp



; Attributes: bp-based frame

; void __cdecl shutdownSocket(int i)
public shutdownSocket
shutdownSocket proc near

i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+i], edi
cmp     [rbp+i], 0
js      loc_222C6
cmp     [rbp+i], 9
jg      short loc_222C6
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
test    eax, eax
jz      short loc_222C6
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
mov     esi, 1          ; how
mov     edi, eax        ; fd
call    _shutdown
mov     edi, 0          ; timer
call    _time
lea     rcx, [rax+5]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     [rdx+rax], rcx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 7

loc_222C6:
nop
leave
retn
; } // starts at 22230
shutdownSocket endp



; Attributes: bp-based frame

; void __cdecl requestShutdownSocket(int i)
public requestShutdownSocket
requestShutdownSocket proc near

i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+i], edi
cmp     [rbp+i], 0
js      short loc_2233B
cmp     [rbp+i], 9
jg      short loc_2233B
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
test    eax, eax
jz      short loc_2233B
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jz      short loc_22321
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    shutdownSocket
jmp     short loc_2233B

loc_22321:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 1

loc_2233B:
nop
leave
retn
; } // starts at 222C9
requestShutdownSocket endp



; Attributes: static bp-based frame

; void __cdecl closeSocket(int i)
closeSocket proc near

i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+i], edi
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
test    eax, eax
jz      loc_22414
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
mov     edi, eax        ; fd
call    _close
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
test    rax, rax
jz      short loc_223BF
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
mov     rdi, rax        ; ptr
call    _free

loc_223BF:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
add     rax, rdx
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     qword ptr [rax+18h], 0
mov     qword ptr [rax+20h], 0
mov     qword ptr [rax+28h], 0
mov     qword ptr [rax+30h], 0
mov     qword ptr [rax+38h], 0

loc_22414:
nop
leave
retn
; } // starts at 2233E
closeSocket endp



; Attributes: static bp-based frame

; int __cdecl createSocket(int port)
createSocket proc near

port= dword ptr -34h
enable= dword ptr -24h
serv_addr= sockaddr_in ptr -20h
fd= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 40h
mov     [rbp+port], edi
mov     [rbp+enable], 1
mov     edx, 0          ; protocol
mov     esi, 1          ; type
mov     edi, 2          ; domain
call    _socket
mov     [rbp+fd], eax
cmp     [rbp+fd], 0
jns     short loc_2245C
lea     rdi, aSocketCreation ; "socket creation failed\n"
call    _perror
mov     eax, 0FFFFFFFFh
jmp     locret_2251B

loc_2245C:
lea     rax, [rbp+serv_addr]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     [rbp+serv_addr.sin_family], 2
mov     [rbp+serv_addr.sin_addr.s_addr], 0
mov     eax, [rbp+port]
movzx   eax, ax
mov     edi, eax        ; hostshort
call    _htons
mov     [rbp+serv_addr.sin_port], ax
lea     rdx, [rbp+enable]
mov     eax, [rbp+fd]
mov     r8d, 4          ; optlen
mov     rcx, rdx        ; optval
mov     edx, 2          ; optname
mov     esi, 1          ; level
mov     edi, eax        ; fd
call    _setsockopt
test    eax, eax
jns     short loc_224C5
lea     rdi, aSetsockoptFail ; "setsockopt failed\n"
call    _perror
mov     eax, 0FFFFFFFFh
jmp     short locret_2251B

loc_224C5:
lea     rcx, [rbp+serv_addr]
mov     eax, [rbp+fd]
mov     edx, 10h        ; len
mov     rsi, rcx        ; addr
mov     edi, eax        ; fd
call    _bind
test    eax, eax
jns     short loc_224F2
lea     rdi, aBindFailed ; "bind failed\n"
call    _perror
mov     eax, 0FFFFFFFFh
jmp     short locret_2251B

loc_224F2:
mov     eax, [rbp+fd]
mov     esi, 5          ; n
mov     edi, eax        ; fd
call    _listen
test    eax, eax
jns     short loc_22518
lea     rdi, aListenFailed ; "listen failed\n"
call    _perror
mov     eax, 0FFFFFFFFh
jmp     short locret_2251B

loc_22518:
mov     eax, [rbp+fd]

locret_2251B:
leave
retn
; } // starts at 22417
createSocket endp



; Attributes: bp-based frame

; void __cdecl getLastField(ctx *c, char state, char *func, char *s, int len)
public getLastField
getLastField proc near

s= qword ptr -30h
func= qword ptr -28h
len= dword ptr -20h
state= byte ptr -1Ch
c= qword ptr -18h
f= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 30h
mov     [rbp+c], rdi
mov     eax, esi
mov     [rbp+func], rdx
mov     [rbp+s], rcx
mov     [rbp+len], r8d
mov     [rbp+state], al
mov     rax, [rbp+c]
mov     rax, [rax+18h]
mov     [rbp+f], rax
cmp     [rbp+f], 0
jz      short loc_2258E
mov     rax, [rbp+f]
mov     rax, [rax]
mov     rdx, [rbp+func]
mov     rsi, rdx        ; s2
mov     rdi, rax        ; s1
call    _strcmp
test    eax, eax
jnz     short loc_2258E
mov     rax, [rbp+f]
mov     rdx, [rbp+s]
mov     [rax+8], rdx
mov     edx, [rbp+len]
mov     rax, [rbp+f]
mov     [rax+10h], edx
mov     rax, [rbp+f]
mov     eax, [rax+14h]
lea     edx, [rax+1]
mov     rax, [rbp+f]
mov     [rax+14h], edx

loc_2258E:
nop
leave
retn
; } // starts at 2251D
getLastField endp



; Attributes: static bp-based frame

; int __cdecl findLen(char *buf, unsigned int *len)
findLen proc near

len= qword ptr -50h
buf= qword ptr -48h
f= field ptr -40h
c= ctx ptr -20h

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+buf], rdi
mov     [rbp+len], rsi
lea     rax, [rbp+f]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     rax, [rbp+len]
mov     dword ptr [rax], 0
lea     rax, aTransferCoding_0 ; "transfer_coding"
mov     [rbp+f.search], rax
lea     rax, [rbp+c]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     qword ptr [rax+18h], 0
lea     rax, [rbp+f]
mov     [rbp+c.opaque], rax
mov     rax, [rbp+buf]
mov     [rbp+c.current], rax
lea     rax, getLastField
mov     [rbp+c.callback], rax
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    HTTP_message
mov     rax, [rbp+f.buf]
test    rax, rax
jz      short loc_2264F
mov     eax, [rbp+f.len]
mov     edx, eax        ; n
mov     rax, [rbp+f.buf]
lea     rsi, s2         ; "chunked"
mov     rdi, rax        ; s1
call    _strncmp
test    eax, eax
jnz     short loc_2264F
mov     eax, 0
jmp     locret_226D1

loc_2264F:
lea     rax, [rbp+c]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     qword ptr [rax+18h], 0
mov     rax, [rbp+buf]
mov     [rbp+c.current], rax
lea     rax, getLastField
mov     [rbp+c.callback], rax
lea     rax, aContentLength_1 ; "Content_Length"
mov     [rbp+f.search], rax
lea     rax, [rbp+f]
mov     [rbp+c.opaque], rax
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    HTTP_message
mov     eax, [rbp+f.nb]
cmp     eax, 1
jnz     short loc_226CC
mov     rax, [rbp+f.buf]
mov     rdi, rax        ; nptr
call    _atoi
mov     edx, eax
mov     rax, [rbp+len]
mov     [rax], edx
mov     eax, 1
jmp     short locret_226D1

loc_226CC:
mov     eax, 1

locret_226D1:
leave
retn
; } // starts at 22591
findLen endp



; Attributes: static bp-based frame

; message *__cdecl parseChunk(int i)
parseChunk proc near

i= dword ptr -44h
c= ctx ptr -40h
start= qword ptr -18h
len= dword ptr -0Ch
r= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+i], edi
mov     [rbp+r], 0
mov     [rbp+len], 0
lea     rax, [rbp+c]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     qword ptr [rax+18h], 0
mov     [rbp+c.callback], 0
mov     [rbp+c.opaque], 0
jmp     loc_22887

loc_22725:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
mov     edx, [rbp+i]
movsxd  rdx, edx
mov     rcx, rdx
shl     rcx, 6
lea     rdx, clients.expectedLen
mov     edx, [rcx+rdx]
mov     edx, edx
add     rax, rdx
mov     [rbp+c.current], rax
mov     rax, [rbp+c.current]
mov     [rbp+start], rax
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_size
test    eax, eax
jz      loc_22894
mov     rax, [rbp+start]
mov     rdi, rax        ; nptr
call    _atoi
mov     [rbp+len], eax
cmp     [rbp+len], 0
js      loc_22897
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    chunk_ext
test    eax, eax
jz      loc_2289E
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    __crlf
test    eax, eax
jz      loc_2289E
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     eax, [rdx+rax]
mov     esi, eax
mov     rdx, [rbp+c.current]
mov     eax, [rbp+len]
cdqe
lea     rcx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
sub     rcx, rax
mov     rax, rcx
cmp     rsi, rax
jle     loc_2289A
mov     rdx, [rbp+c.current]
mov     eax, [rbp+len]
cdqe
add     rax, rdx
mov     [rbp+c.current], rax
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    __crlf
test    eax, eax
jz      short loc_2289D
mov     rdx, [rbp+c.current]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.buf
mov     rax, [rcx+rax]
sub     rdx, rax
mov     rax, rdx
mov     ecx, eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     [rdx+rax], ecx
cmp     [rbp+len], 0
jnz     short loc_22887
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    sendRequest
mov     [rbp+r], rax
jmp     short loc_2289E

loc_22887:
cmp     [rbp+r], 0
jz      loc_22725
jmp     short loc_2289E

loc_22894:
nop
jmp     short loc_2289E

loc_22897:
nop
jmp     short loc_2289E

loc_2289A:
nop
jmp     short loc_2289E

loc_2289D:
nop

loc_2289E:
mov     rax, [rbp+r]
leave
retn
; } // starts at 226D3
parseChunk endp



; Attributes: static bp-based frame

; message *__cdecl parseBuffer(int i)
parseBuffer proc near

i= dword ptr -44h
len= dword ptr -34h
c= ctx ptr -30h
r= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 50h
mov     [rbp+i], edi
mov     [rbp+r], 0
mov     [rbp+len], 0
lea     rax, [rbp+c]
mov     qword ptr [rax], 0
mov     qword ptr [rax+8], 0
mov     qword ptr [rax+10h], 0
mov     qword ptr [rax+18h], 0
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 4
jnz     loc_22A9F
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
mov     [rbp+c.current], rax
lea     rax, [rbp+c]
mov     rdi, rax        ; c
mov     eax, 0
call    HTTP_message
test    eax, eax
jz      loc_22A0C
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
lea     rdx, [rbp+len]
mov     rsi, rdx        ; len
mov     rdi, rax        ; buf
call    findLen
test    eax, eax
jz      short loc_229B9
mov     rdx, [rbp+c.current]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.buf
mov     rax, [rcx+rax]
sub     rdx, rax
mov     rax, rdx
mov     edx, eax
mov     eax, [rbp+len]
lea     ecx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     [rdx+rax], ecx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 5
jmp     short loc_22A0C

loc_229B9:
mov     rdx, [rbp+c.current]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.buf
mov     rax, [rcx+rax]
sub     rdx, rax
mov     rax, rdx
mov     ecx, eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     [rdx+rax], ecx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 6

loc_22A0C:
mov     rax, [rbp+c.current]
mov     esi, 0Ah        ; c
mov     rdi, rax        ; s
call    _strchr
test    rax, rax
jz      short loc_22A9F
mov     rdx, [rbp+c.current]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.buf
mov     rax, [rcx+rax]
cmp     rdx, rax
jnz     short loc_22A9F
mov     eax, [rbp+i]
mov     esi, eax
lea     rdi, format     ; "##### Warning !! Hey what did client %d"...
mov     eax, 0
call    _printf
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     eax, [rdx+rax]
mov     edx, [rbp+i]
movsxd  rdx, edx
mov     rcx, rdx
shl     rcx, 6
lea     rdx, clients.expectedLen
mov     [rcx+rdx], eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 5

loc_22A9F:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 6
jnz     short loc_22AC8
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    parseChunk
mov     [rbp+r], rax

loc_22AC8:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 5
jnz     loc_22B9B
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.expectedLen
mov     eax, [rcx+rax]
cmp     edx, eax
jb      loc_22B9B
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.expectedLen
mov     eax, [rcx+rax]
cmp     edx, eax
jbe     short loc_22B8D
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     ecx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     eax, [rdx+rax]
mov     edx, [rbp+i]
mov     esi, eax
lea     rdi, aWarningIReceiv ; "##### Warning !! I received %d bytes fr"...
mov     eax, 0
call    _printf

loc_22B8D:
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    sendRequest
mov     [rbp+r], rax

loc_22B9B:
mov     rax, [rbp+r]
leave
retn
; } // starts at 228A4
parseBuffer endp



; Attributes: static bp-based frame

; message *__cdecl fillBuffer(int i, char *buf, unsigned int len)
fillBuffer proc near

buf= qword ptr -10h
len= dword ptr -8
i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+i], edi
mov     [rbp+buf], rsi
mov     [rbp+len], edx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     eax, [rbp+len]
add     eax, edx
cmp     eax, 20000000h
jbe     short loc_22BE4
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    sendRequest
jmp     locret_22CF7

loc_22BE4:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     eax, [rbp+len]
add     eax, edx
add     eax, 1
mov     ecx, eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
mov     rsi, rcx        ; size
mov     rdi, rax        ; ptr
call    _realloc
mov     rcx, rax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     [rdx+rax], rcx
mov     edx, [rbp+len]  ; n
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients.buf
mov     rax, [rcx+rax]
mov     ecx, [rbp+i]
movsxd  rcx, ecx
mov     rsi, rcx
shl     rsi, 6
lea     rcx, clients.len
mov     ecx, [rsi+rcx]
mov     ecx, ecx
add     rcx, rax
mov     rax, [rbp+buf]
mov     rsi, rax        ; src
mov     rdi, rcx        ; dest
call    _memcpy
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     eax, [rbp+len]
lea     ecx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     [rdx+rax], ecx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
mov     edx, [rbp+i]
movsxd  rdx, edx
mov     rcx, rdx
shl     rcx, 6
lea     rdx, clients.len
mov     edx, [rcx+rdx]
mov     edx, edx
add     rax, rdx
mov     byte ptr [rax], 0
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    parseBuffer

locret_22CF7:
leave
retn
; } // starts at 22BA1
fillBuffer endp



; Attributes: bp-based frame

; void __cdecl sendBuffer(int i)
public sendBuffer
sendBuffer proc near

i= dword ptr -14h
len= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+i], edi
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wlen
mov     eax, [rdx+rax]
mov     esi, eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rcx, [rdx+rax]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
mov     rdx, rsi        ; n
mov     rsi, rcx        ; buf
mov     edi, eax        ; fd
call    _write
mov     [rbp+len], rax
cmp     [rbp+len], 0
jle     loc_22E4C
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wlen
mov     eax, [rdx+rax]
mov     rdx, [rbp+len]
sub     eax, edx
mov     ecx, eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wlen
mov     [rdx+rax], ecx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wlen
mov     eax, [rdx+rax]
test    eax, eax
jnz     loc_22E4C
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 1
jnz     short loc_22DDE
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    shutdownSocket
jmp     short loc_22DF8

loc_22DDE:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 4

loc_22DF8:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wlen
mov     dword ptr [rdx+rax], 0
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rax, [rdx+rax]
mov     rdi, rax        ; ptr
call    _free
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     qword ptr [rdx+rax], 0

loc_22E4C:
nop
leave
retn
; } // starts at 22CF9
sendBuffer endp



; Attributes: bp-based frame

; void __cdecl writeDirectClient(int i, char *buf, unsigned int len)
public writeDirectClient
writeDirectClient proc near

buf= qword ptr -10h
len= dword ptr -8
i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+i], edi
mov     [rbp+buf], rsi
mov     [rbp+len], edx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 2
cmp     [rbp+len], 0
jz      short loc_22EA8
mov     edx, [rbp+len]  ; n
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rax, clients
mov     eax, [rcx+rax]
mov     rcx, [rbp+buf]
mov     rsi, rcx        ; buf
mov     edi, eax        ; fd
call    _write

loc_22EA8:              ; timer
mov     edi, 0
call    _time
lea     rcx, [rax+5]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     [rdx+rax], rcx
nop
leave
retn
; } // starts at 22E4F
writeDirectClient endp



; Attributes: bp-based frame

; void __cdecl endWriteDirectClient(int i)
public endWriteDirectClient
endWriteDirectClient proc near

i= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
mov     [rbp+i], edi
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 4
nop
pop     rbp
retn
; } // starts at 22ED0
endWriteDirectClient endp



; Attributes: bp-based frame

; void __cdecl sendReponse(message *r)
public sendReponse
sendReponse proc near

r= qword ptr -18h

; __unwind {
push    rbp
mov     rbp, rsp
push    rbx
sub     rsp, 18h
mov     [rbp+r], rdi
cmp     [rbp+r], 0
jz      loc_2301D
mov     rax, [rbp+r]
mov     rax, [rax]
test    rax, rax
jz      loc_2301D
mov     rax, [rbp+r]
mov     eax, [rax+8]
test    eax, eax
jz      loc_2301D
mov     rax, [rbp+r]
mov     eax, [rax+0Ch]
cmp     eax, 9
ja      loc_2301D
mov     rax, [rbp+r]
mov     eax, [rax+0Ch]
mov     eax, eax
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
test    eax, eax
jz      loc_2301D
mov     rax, [rbp+r]
mov     eax, [rax+8]
mov     edx, eax
mov     rax, [rbp+r]
mov     ebx, [rax+0Ch]
mov     rdi, rdx        ; size
call    _malloc
mov     rcx, rax
mov     eax, ebx
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     [rdx+rax], rcx
mov     eax, ebx
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rax, [rdx+rax]
test    rax, rax
jz      short loc_2301D
mov     rax, [rbp+r]
mov     eax, [rax+0Ch]
mov     eax, eax
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 2
mov     rax, [rbp+r]
mov     eax, [rax+8]
mov     esi, eax
mov     rax, [rbp+r]
mov     rcx, [rax]
mov     rax, [rbp+r]
mov     eax, [rax+0Ch]
mov     eax, eax
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rax, [rdx+rax]
mov     rdx, rsi        ; n
mov     rsi, rcx        ; src
mov     rdi, rax        ; dest
call    _memcpy
mov     rax, [rbp+r]
mov     edx, [rax+0Ch]
mov     rax, [rbp+r]
mov     eax, [rax+8]
mov     edx, edx
mov     rcx, rdx
shl     rcx, 6
lea     rdx, clients.wlen
mov     [rcx+rdx], eax

loc_2301D:
nop
add     rsp, 18h
pop     rbx
pop     rbp
retn
; } // starts at 22EF4
sendReponse endp



; Attributes: bp-based frame

; void __cdecl freeRequest(message *r)
public freeRequest
freeRequest proc near

r= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 10h
mov     [rbp+r], rdi
cmp     [rbp+r], 0
jz      short loc_2305F
mov     rax, [rbp+r]
mov     rax, [rax]
test    rax, rax
jz      short loc_2305F
mov     rax, [rbp+r]
mov     rax, [rax]
mov     rdi, rax        ; ptr
call    _free
mov     rax, [rbp+r]
mov     rdi, rax        ; ptr
call    _free

loc_2305F:
nop
leave
retn
; } // starts at 23025
freeRequest endp



; Attributes: bp-based frame

; message *__cdecl sendRequest(int i)
public sendRequest
sendRequest proc near

i= dword ptr -14h
r= qword ptr -8

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 20h
mov     [rbp+i], edi
mov     edi, 18h        ; size
call    _malloc
mov     [rbp+r], rax
cmp     [rbp+r], 0
jnz     short loc_2308C
mov     eax, 0
jmp     locret_23174

loc_2308C:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rdx, [rdx+rax]
mov     rax, [rbp+r]
mov     [rax], rdx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.len
mov     edx, [rdx+rax]
mov     rax, [rbp+r]
mov     [rax+8], edx
mov     edx, [rbp+i]
mov     rax, [rbp+r]
mov     [rax+0Ch], edx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
lea     rdx, [rax+20h]
lea     rax, clients
add     rax, rdx
lea     rdx, [rax+4]
mov     rax, [rbp+r]
mov     [rax+10h], rdx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 4
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     dword ptr [rdx+rax], 0
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.expectedLen
mov     eax, [rdx+rax]
mov     edx, [rbp+i]
movsxd  rdx, edx
mov     rcx, rdx
shl     rcx, 6
lea     rdx, clients.len
mov     [rcx+rdx], eax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     qword ptr [rdx+rax], 0
mov     rax, [rbp+r]

locret_23174:
leave
retn
; } // starts at 23062
sendRequest endp



; Attributes: bp-based frame

; message *__cdecl getRequest(__int16 port)
public getRequest
getRequest proc near

port= word ptr -754h
client_address= sockaddr_in ptr -750h
l= dword ptr -734h
buf= byte ptr -730h
tv= timeval ptr -150h
wfds= fd_set ptr -140h
rfds= fd_set ptr -0C0h
len= dword ptr -34h
newSocket= dword ptr -30h
sel= dword ptr -2Ch
__d1_0= dword ptr -28h
__d0_0= dword ptr -24h
__d1= dword ptr -20h
__d0= dword ptr -1Ch
r= qword ptr -18h
nbclients= dword ptr -10h
libre= dword ptr -0Ch
i= dword ptr -8
nfds= dword ptr -4

; __unwind {
push    rbp
mov     rbp, rsp
sub     rsp, 760h
mov     eax, edi
mov     [rbp+port], ax
mov     [rbp+r], 0
mov     eax, cs:priSocket
test    eax, eax
jnz     short loc_231E7
movsx   eax, [rbp+port]
mov     edi, eax        ; port
call    createSocket
mov     cs:priSocket, eax
mov     eax, cs:priSocket
test    eax, eax
jns     short loc_231D0
lea     rdi, aSocket_0  ; "socket\n"
call    _perror
mov     eax, 0
jmp     locret_23964

loc_231D0:
lea     rdx, clients
mov     eax, 0
mov     ecx, 50h ; 'P'
mov     rdi, rdx
rep stosq

loc_231E7:
mov     [rbp+nfds], 0
mov     eax, 0
mov     ecx, 10h
lea     rdx, [rbp+rfds]
mov     rdi, rdx
cld
rep stosq
mov     eax, edi
mov     edx, ecx
mov     [rbp+__d0], edx
mov     [rbp+__d1], eax
mov     eax, 0
mov     ecx, 10h
lea     rdx, [rbp+wfds]
mov     rdi, rdx
cld
rep stosq
mov     eax, edi
mov     edx, ecx
mov     [rbp+__d0_0], edx
mov     [rbp+__d1_0], eax
mov     [rbp+libre], 0FFFFFFFFh
mov     [rbp+nbclients], 0
mov     [rbp+i], 0
jmp     loc_233EB

loc_2324C:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jbe     loc_232FC
add     [rbp+nbclients], 1
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
mov     esi, eax
movsxd  rax, esi
mov     rdi, [rbp+rax*8+rfds.__fds_bits]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
or      rdi, rax
mov     rdx, rdi
movsxd  rax, esi
mov     [rbp+rax*8+rfds.__fds_bits], rdx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cmp     [rbp+nfds], eax
cmovge  eax, [rbp+nfds]
mov     [rbp+nfds], eax

loc_232FC:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jz      short loc_23336
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 1
jnz     loc_233C7

loc_23336:
add     [rbp+nbclients], 1
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
mov     esi, eax
movsxd  rax, esi
mov     rdi, [rbp+rax*8+wfds.__fds_bits]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
or      rdi, rax
mov     rdx, rdi
movsxd  rax, esi
mov     [rbp+rax*8+wfds.__fds_bits], rdx
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cmp     [rbp+nfds], eax
cmovge  eax, [rbp+nfds]
mov     [rbp+nfds], eax

loc_233C7:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
test    eax, eax
jnz     short loc_233E7
mov     eax, [rbp+i]
mov     [rbp+libre], eax

loc_233E7:
add     [rbp+i], 1

loc_233EB:
cmp     [rbp+i], 9
jle     loc_2324C
cmp     [rbp+nbclients], 9
jg      short loc_23458
mov     eax, cs:priSocket
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
mov     esi, eax
movsxd  rax, esi
mov     rdi, [rbp+rax*8+rfds.__fds_bits]
mov     eax, cs:priSocket
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
or      rdi, rax
mov     rdx, rdi
movsxd  rax, esi
mov     [rbp+rax*8+rfds.__fds_bits], rdx
mov     eax, cs:priSocket
cmp     [rbp+nfds], eax
cmovge  eax, [rbp+nfds]
mov     [rbp+nfds], eax

loc_23458:
mov     [rbp+tv.tv_sec], 0
mov     [rbp+tv.tv_usec], 2DC6C0h
mov     eax, [rbp+nfds]
lea     edi, [rax+1]    ; nfds
lea     rcx, [rbp+tv]
lea     rdx, [rbp+wfds] ; writefds
lea     rax, [rbp+rfds]
mov     r8, rcx         ; timeout
mov     ecx, 0          ; exceptfds
mov     rsi, rax        ; readfds
call    _select
mov     [rbp+sel], eax
cmp     [rbp+sel], 0
jns     short loc_234B8
lea     rdi, aSelect_0  ; "select"
call    _perror
mov     edi, 0FFFFFFFFh ; status
call    _exit

loc_234B8:
mov     eax, cs:priSocket
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
cdqe
mov     rsi, [rbp+rax*8+rfds.__fds_bits]
mov     eax, cs:priSocket
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
and     rax, rsi
test    rax, rax
jz      loc_235DD
cmp     [rbp+nbclients], 9
jg      loc_235DD
mov     [rbp+l], 10h
lea     rax, [rbp+client_address]
mov     edx, 10h        ; n
mov     esi, 0          ; c
mov     rdi, rax        ; s
call    _memset
mov     eax, cs:priSocket
lea     rdx, [rbp+l]    ; addr_len
lea     rcx, [rbp+client_address]
mov     rsi, rcx        ; addr
mov     edi, eax        ; fd
call    _accept
mov     [rbp+newSocket], eax
cmp     [rbp+newSocket], 0
jle     loc_235DD
mov     eax, [rbp+libre]
cdqe
shl     rax, 6
mov     rcx, rax
lea     rdx, clients
mov     eax, [rbp+newSocket]
mov     [rcx+rdx], eax
mov     eax, [rbp+libre]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     dword ptr [rdx+rax], 4
mov     edi, 0          ; timer
call    _time
lea     rcx, [rax+5]
mov     eax, [rbp+libre]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     [rdx+rax], rcx
mov     eax, [rbp+libre]
cdqe
shl     rax, 6
lea     rdx, [rax+20h]
lea     rax, clients
add     rax, rdx
lea     rcx, [rax+4]
mov     rax, qword ptr [rbp+client_address.sin_family]
mov     rdx, qword ptr [rbp+client_address.sin_zero]
mov     [rcx], rax
mov     [rcx+8], rdx

loc_235DD:
mov     [rbp+i], 0
jmp     loc_23702

loc_235E9:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jbe     loc_236FE
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
cdqe
mov     rsi, [rbp+rax*8+rfds.__fds_bits]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
and     rax, rsi
test    rax, rax
jz      loc_236FE
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
lea     rcx, [rbp+buf]
mov     edx, 5DCh       ; nbytes
mov     rsi, rcx        ; buf
mov     edi, eax        ; fd
call    _read
mov     [rbp+len], eax
cmp     [rbp+len], 0
jg      short loc_236AE
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    closeSocket
jmp     short loc_236FE

loc_236AE:              ; timer
mov     edi, 0
call    _time
lea     rcx, [rax+5]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     [rdx+rax], rcx
mov     edx, [rbp+len]  ; len
lea     rcx, [rbp+buf]
mov     eax, [rbp+i]
mov     rsi, rcx        ; buf
mov     edi, eax        ; i
call    fillBuffer
mov     [rbp+r], rax
cmp     [rbp+r], 0
jz      short loc_236FE
mov     rax, [rbp+r]
jmp     locret_23964

loc_236FE:
add     [rbp+i], 1

loc_23702:
cmp     [rbp+i], 9
jle     loc_235E9
mov     [rbp+i], 0
jmp     loc_237E6

loc_23718:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jz      short loc_23752
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 1
jnz     loc_237E2

loc_23752:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
lea     edx, [rax+3Fh]
test    eax, eax
cmovs   eax, edx
sar     eax, 6
cdqe
mov     rsi, [rbp+rax*8+wfds.__fds_bits]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients
mov     eax, [rdx+rax]
cdq
shr     edx, 1Ah
add     eax, edx
and     eax, 3Fh
sub     eax, edx
mov     edx, 1
mov     ecx, eax
shl     rdx, cl
mov     rax, rdx
and     rax, rsi
test    rax, rax
jz      short loc_237E2
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    sendBuffer
mov     edi, 0          ; timer
call    _time
lea     rcx, [rax+5]
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     [rdx+rax], rcx

loc_237E2:
add     [rbp+i], 1

loc_237E6:
cmp     [rbp+i], 9
jle     loc_23718
cmp     [rbp+sel], 0
jnz     loc_231E7
mov     [rbp+i], 0
jmp     loc_23955

loc_23806:              ; timer
mov     edi, 0
call    _time
mov     rcx, rax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.timeout
mov     rax, [rdx+rax]
cmp     rcx, rax
jle     loc_23951
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jbe     loc_238D6
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     rax, [rdx+rax]
test    rax, rax
jz      short loc_238B6
mov     eax, [rbp+i]
mov     esi, eax
lea     rdi, aWarningTimeout ; "##### Warning Timeout reached for clien"...
mov     eax, 0
call    _printf
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    sendRequest
mov     [rbp+r], rax
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.buf
mov     qword ptr [rdx+rax], 0
mov     rax, [rbp+r]
jmp     locret_23964

loc_238B6:
mov     eax, [rbp+i]
mov     esi, eax
lea     rdi, aWarningTimeout_0 ; "##### Warning Timeout reached for clien"...
mov     eax, 0
call    _printf
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    shutdownSocket

loc_238D6:
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.state
mov     eax, [rdx+rax]
cmp     eax, 2
jnz     short loc_23951
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rax, [rdx+rax]
test    rax, rax
jz      short loc_23947
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     rax, [rdx+rax]
mov     rdi, rax        ; ptr
call    _free
mov     eax, [rbp+i]
cdqe
shl     rax, 6
mov     rdx, rax
lea     rax, clients.wbuf
mov     qword ptr [rdx+rax], 0

loc_23947:
mov     eax, [rbp+i]
mov     edi, eax        ; i
call    closeSocket

loc_23951:
add     [rbp+i], 1

loc_23955:
cmp     [rbp+i], 9
jle     loc_23806
jmp     loc_231E7

locret_23964:
leave
retn
; } // starts at 23176
getRequest endp

_text ends


; Segment type: Pure data
; Segment permissions: Read
_rodata segment para public 'CONST' use64
assume cs:_rodata
;org 24000h
aOption db '__option',0
; const char s[]
s db '//',0
aGroup db '__group',0
; const char asc_24014[]
asc_24014 db '::',0
; const char a25[]
a25 db '25',0
; const char byte_2401A
byte_2401A db 0
; const char aEnGbOed[]
aEnGbOed db 'EN-GB-OED',0
; const char aIAmi[]
aIAmi db 'I-AMI',0
; const char aIBnn[]
aIBnn db 'I-BNN',0
; const char aIDefault[]
aIDefault db 'I-DEFAULT',0
; const char aIEnochian[]
aIEnochian db 'I-ENOCHIAN',0
; const char aIHak[]
aIHak db 'I-HAK',0
; const char aIKlingon[]
aIKlingon db 'I-KLINGON',0
; const char aILux[]
aILux db 'I-LUX',0
; const char aIMingo[]
aIMingo db 'I-MINGO',0
; const char aINavajo[]
aINavajo db 'I-NAVAJO',0
; const char aIPwn[]
aIPwn db 'I-PWN',0
; const char aITao[]
aITao db 'I-TAO',0
; const char aITay[]
aITay db 'I-TAY',0
; const char aITsu[]
aITsu db 'I-TSU',0
; const char aSgnBeFr[]
aSgnBeFr db 'SGN-BE-FR',0
; const char aSgnBeNl[]
aSgnBeNl db 'SGN-BE-NL',0
; const char aSgnChDe[]
aSgnChDe db 'SGN-CH-DE',0
; const char aArtLojban[]
aArtLojban db 'ART-LOJBAN',0
; const char aCelGaulish[]
aCelGaulish db 'CEL-GAULISH',0
; const char aNoBok[]
aNoBok db 'NO-BOK',0
; const char aNoNyn[]
aNoNyn db 'NO-NYN',0
; const char aZhGuoyu[]
aZhGuoyu db 'ZH-GUOYU',0
; const char aZhHakka[]
aZhHakka db 'ZH-HAKKA',0
; const char aZhMin[]
aZhMin db 'ZH-MIN',0
; const char aZhMinNan[]
aZhMinNan db 'ZH-MIN-NAN',0
; const char aZhXiang[]
aZhXiang db 'ZH-XIANG',0
; const char aHttp_0[]
aHttp_0 db 'HTTP',0
; const char aHttp[]
aHttp db 'HTTP://',0
; const char aHttps[]
aHttps db 'HTTPS://',0
; const char aTrailers[]
aTrailers db 'TRAILERS',0
; const char aQ[]
aQ db 'Q=',0
; const char aChunked[]
aChunked db 'CHUNKED',0
; const char aCompress[]
aCompress db 'COMPRESS',0
; const char aDeflate[]
aDeflate db 'DEFLATE',0
; const char aGzip[]
aGzip db 'GZIP',0
; const char a100Continue[]
a100Continue db '100-CONTINUE',0
; const char aGmt_0[]
aGmt_0 db 'GMT',0
; const char aIdentity[]
aIdentity db 'IDENTITY',0
; const char aMon[]
aMon db 'Mon',0
; const char aTue[]
aTue db 'Tue',0
; const char aWed[]
aWed db 'Wed',0
; const char aThu[]
aThu db 'Thu',0
; const char aFri[]
aFri db 'Fri',0
; const char aSat[]
aSat db 'Sat',0
; const char aSun[]
aSun db 'Sun',0
; const char aMonday[]
aMonday db 'Monday',0
; const char aTuesday[]
aTuesday db 'Tuesday',0
; const char aWednesday[]
aWednesday db 'Wednesday',0
; const char aThursday[]
aThursday db 'Thursday',0
; const char aFriday[]
aFriday db 'Friday',0
; const char aSaturday[]
aSaturday db 'Saturday',0
; const char aSunday[]
aSunday db 'Sunday',0
; const char asc_241A4[]
asc_241A4 db '*/*',0
; const char asc_241A8[]
asc_241A8 db '/*',0
; const char aJan[]
aJan db 'Jan',0
; const char aFeb[]
aFeb db 'Feb',0
; const char aMar[]
aMar db 'Mar',0
; const char aApr[]
aApr db 'Apr',0
; const char aMay[]
aMay db 'May',0
; const char aJun[]
aJun db 'Jun',0
; const char aJul[]
aJul db 'Jul',0
; const char aAug[]
aAug db 'Aug',0
; const char aSep[]
aSep db 'Sep',0
; const char aOct[]
aOct db 'Oct',0
; const char aNov[]
aNov db 'Nov',0
; const char aDec[]
aDec db 'Dec',0
; const char aW[]
aW db 'W/',0
; const char aNone[]
aNone db 'NONE',0
; const char aBytes[]
aBytes db 'BYTES',0
; const char asc_241E9[]
asc_241E9 db '*/',0
; const char aNoCache[]
aNoCache db 'NO-CACHE',0
; const char aConnection_0[]
aConnection_0 db 'CONNECTION',0
; const char aContentLength_0[]
aContentLength_0 db 'CONTENT-LENGTH',0
; const char aContentType_0[]
aContentType_0 db 'CONTENT-TYPE',0
; const char aTrailer_0[]
aTrailer_0 db 'TRAILER',0
; const char aTransferEncodi_1[]
aTransferEncodi_1 db 'TRANSFER-ENCODING',0
; const char aUpgrade_0[]
aUpgrade_0 db 'UPGRADE',0
; const char aVia_0[]
aVia_0 db 'VIA',0
; const char aAge_0[]
aAge_0 db 'AGE',0
; const char aExpires_0[]
aExpires_0 db 'EXPIRES',0
; const char aDate_0[]
aDate_0 db 'DATE',0
; const char aLocation[]
aLocation db 'LOCATION',0
; const char aRetryAfter_0[]
aRetryAfter_0 db 'RETRY-AFTER',0
; const char aVary_0[]
aVary_0 db 'VARY',0
; const char aWarning_0[]
aWarning_0 db 'WARNING',0
; const char aCacheControl_0[]
aCacheControl_0 db 'CACHE-CONTROL',0
; const char aExpect_0[]
aExpect_0 db 'EXPECT',0
; const char aHost_0[]
aHost_0 db 'HOST',0
; const char aMaxForwards_0[]
aMaxForwards_0 db 'MAX-FORWARDS',0
; const char aPragma_0[]
aPragma_0 db 'PRAGMA',0
; const char aRange_0[]
aRange_0 db 'RANGE',0
; const char aTe_0[]
aTe_0 db 'TE',0
; const char aIfMatch_0[]
aIfMatch_0 db 'IF-MATCH',0
; const char aIfNoneMatch_0[]
aIfNoneMatch_0 db 'IF-NONE-MATCH',0
; const char aIfModifiedSinc_1[]
aIfModifiedSinc_1 db 'IF-MODIFIED-SINCE',0
; const char aIfUnmodifiedSi_1[]
aIfUnmodifiedSi_1 db 'IF-UNMODIFIED-SINCE',0
; const char aIfRange_0[]
aIfRange_0 db 'IF-RANGE',0
; const char aAccept_1[]
aAccept_1 db 'ACCEPT',0
; const char aAcceptCharset_0[]
aAcceptCharset_0 db 'ACCEPT-CHARSET',0
; const char aAcceptEncoding_1[]
aAcceptEncoding_1 db 'ACCEPT-ENCODING',0
; const char aAcceptLanguage_1[]
aAcceptLanguage_1 db 'ACCEPT-LANGUAGE',0
; const char aAuthorization[]
aAuthorization db 'AUTHORIZATION',0
; const char aProxyAuthoriza_1[]
aProxyAuthoriza_1 db 'PROXY-AUTHORIZATION',0
; const char aReferer_0[]
aReferer_0 db 'REFERER',0
; const char aUserAgent_0[]
aUserAgent_0 db 'USER-AGENT',0
; const char asc_2435D[]
asc_2435D db '!',0
; const char aCookie[]
aCookie db 'COOKIE:',0
; Function-local static variable
; const char _func___2710[4]
__func___2710 db 'URI',0
align 10h
; Function-local static variable
; const char _func___2727[10]
__func___2727 db 'hier_part',0
align 20h
; Function-local static variable
; const char _func___2736[14]
__func___2736 db 'URI_reference',0
align 10h
; Function-local static variable
; const char _func___2749[13]
__func___2749 db 'absolute_URI',0
align 20h
; Function-local static variable
; const char _func___2769[13]
__func___2769 db 'relative_ref',0
align 10h
; Function-local static variable
; const char _func___2782[14]
__func___2782 db 'relative_part',0
; Function-local static variable
; const char _func___2794[7]
__func___2794 db 'scheme',0
align 8
; Function-local static variable
; const char _func___2816[10]
__func___2816 db 'authority',0
align 8
; Function-local static variable
; const char _func___2834[9]
__func___2834 db 'userinfo',0
; Function-local static variable
; const char _func___2847[5]
__func___2847 db 'host',0
; Function-local static variable
; const char _func___2857[5]
__func___2857 db 'port',0
align 10h
; Function-local static variable
; const char _func___2869[11]
__func___2869 db 'IP_literal',0
align 20h
; Function-local static variable
; const char _func___2887[10]
__func___2887 db 'IPvFuture',0
align 10h
; Function-local static variable
; const char _func___3035[12]
__func___3035 db 'IPv6address',0
; Function-local static variable
; const char _func___3046[4]
__func___3046 db 'h16',0
; Function-local static variable
; const char _func___3056[5]
__func___3056 db 'ls32',0
align 8
; Function-local static variable
; const char _func___3067[12]
__func___3067 db 'IPv4address',0
align 8
; Function-local static variable
; const char _func___3079[10]
__func___3079 db 'dec_octet',0
align 8
; Function-local static variable
; const char _func___3094[9]
__func___3094 db 'reg_name',0
; Function-local static variable
; const char _func___3106[5]
__func___3106 db 'path',0
align 8
; Function-local static variable
; const char _func___3120[13]
__func___3120 db 'path_abempty',0
align 8
; Function-local static variable
; const char _func___3140[14]
__func___3140 db 'path_absolute',0
align 8
; Function-local static variable
; const char _func___3155[14]
__func___3155 db 'path_noscheme',0
align 8
; Function-local static variable
; const char _func___3169[14]
__func___3169 db 'path_rootless',0
align 8
; Function-local static variable
; const char _func___3175[11]
__func___3175 db 'path_empty',0
align 8
; Function-local static variable
; const char _func___3187[8]
__func___3187 db 'segment',0
; Function-local static variable
; const char _func___3198[11]
__func___3198 db 'segment_nz',0
align 20h
; Function-local static variable
; const char _func___3213[14]
__func___3213 db 'segment_nz_nc',0
; Function-local static variable
; const char _func___3223[6]
__func___3223 db 'pchar',0
; Function-local static variable
; const char _func___3235[6]
__func___3235 db 'query',0
align 20h
; Function-local static variable
; const char _func___3247[9]
__func___3247 db 'fragment',0
align 10h
; Function-local static variable
; const char _func___3253[12]
__func___3253 db 'pct_encoded',0
align 20h
; Function-local static variable
; const char _func___3260[11]
__func___3260 db 'unreserved',0
align 10h
; Function-local static variable
; const char _func___3270[9]
__func___3270 db 'reserved',0
align 20h
; Function-local static variable
; const char _func___3277[11]
__func___3277 db 'gen_delims',0
align 10h
; Function-local static variable
; const char _func___3284[11]
__func___3284 db 'sub_delims',0
align 20h
; Function-local static variable
; const char _func___3311[15]
__func___3311 db 'language_range',0
align 10h
; Function-local static variable
; const char _func___3318[9]
__func___3318 db 'alphanum',0
align 20h
; Function-local static variable
; const char _func___3331[13]
__func___3331 db 'Language_Tag',0
align 10h
; Function-local static variable
; const char _func___3375[8]
__func___3375 db 'langtag',0
; Function-local static variable
; const char _func___3404[9]
__func___3404 db 'language',0
align 8
; Function-local static variable
; const char _func___3427[8]
__func___3427 db 'extlang',0
; Function-local static variable
; const char _func___3438[7]
__func___3438 db 'script',0
; Function-local static variable
; const char _func___3455[7]
__func___3455 db 'region',0
align 20h
; Function-local static variable
; const char _func___3474[8]
__func___3474 db 'variant',0
; Function-local static variable
; const char _func___3495[10]
__func___3495 db 'extension',0
align 8
; Function-local static variable
; const char _func___3502[10]
__func___3502 db 'singleton',0
align 8
; Function-local static variable
; const char _func___3521[11]
__func___3521 db 'privateuse',0
align 8
; Function-local static variable
; const char _func___3532[14]
__func___3532 db 'grandfathered',0
align 8
; Function-local static variable
; const char _func___3539[10]
__func___3539 db 'irregular',0
align 8
; Function-local static variable
; const char _func___3546[8]
__func___3546 db 'regular',0
; Function-local static variable
; const char _func___3554[4]
__func___3554 db 'BWS',0
align 8
; Function-local static variable
; const char _func___3583[11]
__func___3583 db 'Connection',0
align 8
; Function-local static variable
; const char _func___3593[15]
__func___3593 db 'Content_Length',0
align 8
; Function-local static variable
; const char _func___3609[13]
__func___3609 db 'HTTP_message',0
align 8
; Function-local static variable
; const char _func___3615[10]
__func___3615 db 'HTTP_name',0
align 8
; Function-local static variable
; const char _func___3621[13]
__func___3621 db 'HTTP_version',0
; Function-local static variable
; const char _func___3634[5]
__func___3634 db 'Host',0
; Function-local static variable
; const char _func___3646[4]
__func___3646 db 'OWS',0
; Function-local static variable
; const char _func___3658[4]
__func___3658 db 'RWS',0
; Function-local static variable
; const char _func___3685[3]
__func___3685 db 'TE',0
align 8
; Function-local static variable
; const char _func___3711[8]
__func___3711 db 'Trailer',0
; Function-local static variable
; const char _func___3737[18]
__func___3737 db 'Transfer_Encoding',0
align 8
; Function-local static variable
; const char _func___3763[8]
__func___3763 db 'Upgrade',0
; Function-local static variable
; const char _func___3809[4]
__func___3809 db 'Via',0
align 8
; Function-local static variable
; const char _func___3815[14]
__func___3815 db 'absolute_form',0
align 8
; Function-local static variable
; const char _func___3827[14]
__func___3827 db 'absolute_path',0
align 8
; Function-local static variable
; const char _func___3833[14]
__func___3833 db 'asterisk_form',0
align 8
; Function-local static variable
; const char _func___3839[15]
__func___3839 db 'authority_form',0
; Function-local static variable
; const char _func___3856[6]
__func___3856 db 'chunk',0
align 20h
; Function-local static variable
; const char _func___3866[11]
__func___3866 db 'chunk_data',0
align 10h
; Function-local static variable
; const char _func___3887[10]
__func___3887 db 'chunk_ext',0
align 20h
; Function-local static variable
; const char _func___3895[15]
__func___3895 db 'chunk_ext_name',0
align 10h
; Function-local static variable
; const char _func___3905[14]
__func___3905 db 'chunk_ext_val',0
align 20h
; Function-local static variable
; const char _func___3915[11]
__func___3915 db 'chunk_size',0
align 10h
; Function-local static variable
; const char _func___3929[13]
__func___3929 db 'chunked_body',0
align 20h
; Function-local static variable
; const char _func___3945[8]
__func___3945 db 'comment',0
align 10h
; Function-local static variable
; const char _func___3952[18]
__func___3952 db 'connection_option',0
; Function-local static variable
; const char _func___3961[6]
__func___3961 db 'ctext',0
; Function-local static variable
; const char _func___3970[14]
__func___3970 db 'field_content',0
align 8
; Function-local static variable
; const char _func___3977[11]
__func___3977 db 'field_name',0
align 8
; Function-local static variable
; const char _func___3991[12]
__func___3991 db 'field_value',0
align 8
; Function-local static variable
; const char _func___3999[12]
__func___3999 db 'field_vchar',0
align 8
; Function-local static variable
; const char _func___4015[9]
__func___4015 db 'http_URI',0
align 8
; Function-local static variable
; const char _func___4031[10]
__func___4031 db 'https_URI',0
align 8
; Function-local static variable
; const char _func___4046[11]
__func___4046 db 'last_chunk',0
align 8
; Function-local static variable
; const char _func___4056[13]
__func___4056 db 'message_body',0
; Function-local static variable
; const char _func___4063[7]
__func___4063 db 'method',0
align 10h
; Function-local static variable
; const char _func___4075[9]
__func___4075 db 'obs_fold',0
align 20h
; Function-local static variable
; const char _func___4081[9]
__func___4081 db 'obs_text',0
align 10h
; Function-local static variable
; const char _func___4092[12]
__func___4092 db 'origin_form',0
align 20h
; Function-local static variable
; const char _func___4103[12]
__func___4103 db 'partial_URI',0
align 10h
; Function-local static variable
; const char _func___4118[9]
__func___4118 db 'protocol',0
align 20h
; Function-local static variable
; const char _func___4125[14]
__func___4125 db 'protocol_name',0
align 10h
; Function-local static variable
; const char _func___4132[17]
__func___4132 db 'protocol_version',0
align 8
; Function-local static variable
; const char _func___4139[10]
__func___4139 db 'pseudonym',0
; Function-local static variable
; const char _func___4146[7]
__func___4146 db 'qdtext',0
align 20h
; Function-local static variable
; const char _func___4154[12]
__func___4154 db 'quoted_pair',0
align 10h
; Function-local static variable
; const char _func___4166[14]
__func___4166 db 'quoted_string',0
; Function-local static variable
; const char _func___4197[5]
__func___4197 db 'rank',0
align 8
; Function-local static variable
; const char _func___4209[14]
__func___4209 db 'reason_phrase',0
align 8
; Function-local static variable
; const char _func___4224[12]
__func___4224 db 'received_by',0
align 10h
; Function-local static variable
; const char _func___4235[18]
__func___4235 db 'received_protocol',0
align 8
; Function-local static variable
; const char _func___4243[13]
__func___4243 db 'request_line',0
align 8
; Function-local static variable
; const char _func___4249[15]
__func___4249 db 'request_target',0
align 8
; Function-local static variable
; const char _func___4255[11]
__func___4255 db 'start_line',0
align 8
; Function-local static variable
; const char _func___4266[12]
__func___4266 db 'status_code',0
align 8
; Function-local static variable
; const char _func___4272[12]
__func___4272 db 'status_line',0
align 8
; Function-local static variable
; const char _func___4289[10]
__func___4289 db 't_codings',0
align 8
; Function-local static variable
; const char _func___4295[10]
__func___4295 db 't_ranking',0
; Function-local static variable
; const char _func___4302[6]
__func___4302 db 'tchar',0
; Function-local static variable
; const char _func___4312[6]
__func___4312 db 'token',0
; Function-local static variable
; const char _func___4319[5]
__func___4319 db 'notq',0
align 8
; Function-local static variable
; const char _func___4338[10]
__func___4338 db 'notqtoken',0
align 8
; Function-local static variable
; const char _func___4351[13]
__func___4351 db 'trailer_part',0
align 10h
; Function-local static variable
; const char _func___4360[16]
__func___4360 db 'transfer_coding',0
; Function-local static variable
; const char _func___4374[19]
__func___4374 db 'transfer_extension',0
align 20h
; Function-local static variable
; const char _func___4382[19]
__func___4382 db 'transfer_parameter',0
align 8
; Function-local static variable
; const char _func___4388[9]
__func___4388 db 'uri_host',0
; Function-local static variable
; const char _func___4432[7]
__func___4432 db 'Accept',0
; Function-local static variable
; const char _func___4479[15]
__func___4479 db 'Accept_Charset',0
align 20h
; Function-local static variable
; const char _func___4522[16]
__func___4522 db 'Accept_Encoding',0
; Function-local static variable
; const char _func___4561[16]
__func___4561 db 'Accept_Language',0
; Function-local static variable
; const char _func___4585[6]
__func___4585 db 'Allow',0
align 10h
; Function-local static variable
; const char _func___4611[17]
__func___4611 db 'Content_Encoding',0
align 10h
; Function-local static variable
; const char _func___4634[17]
__func___4634 db 'Content_Language',0
align 10h
; Function-local static variable
; const char _func___4641[17]
__func___4641 db 'Content_Location',0
align 8
; Function-local static variable
; const char _func___4649[13]
__func___4649 db 'Content_Type',0
; Function-local static variable
; const char _func___4657[5]
__func___4657 db 'Date',0
; Function-local static variable
; const char _func___4663[7]
__func___4663 db 'Expect',0
; Function-local static variable
; const char _func___4669[4]
__func___4669 db 'GMT',0
align 8
; Function-local static variable
; const char _func___4680[10]
__func___4680 db 'HTTP_date',0
align 8
; Function-local static variable
; const char _func___4692[12]
__func___4692 db 'IMF_fixdate',0
align 8
; Function-local static variable
; const char _func___4698[9]
__func___4698 db 'Location',0
align 8
; Function-local static variable
; const char _func___4708[13]
__func___4708 db 'Max_Forwards',0
align 8
; Function-local static variable
; const char _func___4715[8]
__func___4715 db 'Referer',0
; Function-local static variable
; const char _func___4724[12]
__func___4724 db 'Retry_After',0
; Function-local static variable
; const char _func___4741[7]
__func___4741 db 'Server',0
align 8
; Function-local static variable
; const char _func___4757[11]
__func___4757 db 'User_Agent',0
; Function-local static variable
; const char _func___4783[5]
__func___4783 db 'Vary',0
; Function-local static variable
; const char _func___4796[11]
__func___4796 db 'accept_ext',0
align 8
; Function-local static variable
; const char _func___4807[14]
__func___4807 db 'accept_params',0
align 8
; Function-local static variable
; const char _func___4819[13]
__func___4819 db 'asctime_date',0
align 8
; Function-local static variable
; const char _func___4825[8]
__func___4825 db 'charset',0
; Function-local static variable
; const char _func___4833[8]
__func___4833 db 'codings',0
; Function-local static variable
; const char _func___4839[15]
__func___4839 db 'content_coding',0
; Function-local static variable
; const char _func___4850[6]
__func___4850 db 'date1',0
; Function-local static variable
; const char _func___4863[6]
__func___4863 db 'date2',0
; Function-local static variable
; const char _func___4879[6]
__func___4879 db 'date3',0
; Function-local static variable
; const char _func___4890[4]
__func___4890 db 'day',0
align 20h
; Function-local static variable
; const char _func___4897[9]
__func___4897 db 'day_name',0
align 10h
; Function-local static variable
; const char _func___4904[11]
__func___4904 db 'day_name_l',0
align 20h
; Function-local static variable
; const char _func___4914[14]
__func___4914 db 'delay_seconds',0
; Function-local static variable
; const char _func___4925[5]
__func___4925 db 'hour',0
align 8
; Function-local static variable
; const char _func___4950[12]
__func___4950 db 'media_range',0
align 8
; Function-local static variable
; const char _func___4966[11]
__func___4966 db 'media_type',0
; Function-local static variable
; const char _func___4977[7]
__func___4977 db 'minute',0
; Function-local static variable
; const char _func___4984[6]
__func___4984 db 'month',0
; Function-local static variable
; const char _func___4993[9]
__func___4993 db 'obs_date',0
align 10h
; Function-local static variable
; const char _func___5001[10]
__func___5001 db 'parameter',0
align 20h
; Function-local static variable
; const char _func___5009[16]
__func___5009 db 'media_parameter',0
; Function-local static variable
; const char _func___5022[8]
__func___5022 db 'product',0
align 20h
; Function-local static variable
; const char _func___5028[16]
__func___5028 db 'product_version',0
; Function-local static variable
; const char _func___5059[7]
__func___5059 db 'qvalue',0
align 8
; Function-local static variable
; const char _func___5066[12]
__func___5066 db 'rfc850_date',0
; Function-local static variable
; const char _func___5077[7]
__func___5077 db 'second',0
align 10h
; Function-local static variable
; const char _func___5083[8]
__func___5083 db 'subtype',0
; Function-local static variable
; const char _func___5089[12]
__func___5089 db 'time_of_day',0
; Function-local static variable
; const char _func___5095[5]
__func___5095 db 'type',0
; Function-local static variable
; const char _func___5101[7]
__func___5101 db 'weight',0
; Function-local static variable
; const char _func___5112[5]
__func___5112 db 'year',0
; Function-local static variable
; const char _func___5120[5]
__func___5120 db 'ETag',0
align 20h
; Function-local static variable
; const char _func___5148[9]
__func___5148 db 'If_Match',0
align 10h
; Function-local static variable
; const char _func___5154[18]
__func___5154 db 'If_Modified_Since',0
align 8
; Function-local static variable
; const char _func___5182[14]
__func___5182 db 'If_None_Match',0
align 20h
; Function-local static variable
; const char _func___5188[20]
__func___5188 db 'If_Unmodified_Since',0
align 8
; Function-local static variable
; const char _func___5194[14]
__func___5194 db 'Last_Modified',0
align 8
; Function-local static variable
; const char _func___5209[11]
__func___5209 db 'entity_tag',0
; Function-local static variable
; const char _func___5216[6]
__func___5216 db 'etagc',0
align 20h
; Function-local static variable
; const char _func___5226[11]
__func___5226 db 'opaque_tag',0
; Function-local static variable
; const char _func___5232[5]
__func___5232 db 'weak',0
; Function-local static variable
; const char _func___5240[14]
__func___5240 db 'Accept_Ranges',0
align 20h
; Function-local static variable
; const char _func___5251[14]
__func___5251 db 'Content_Range',0
align 10h
; Function-local static variable
; const char _func___5258[9]
__func___5258 db 'If_Range',0
; Function-local static variable
; const char _func___5269[6]
__func___5269 db 'Range',0
align 20h
; Function-local static variable
; const char _func___5298[18]
__func___5298 db 'acceptable_ranges',0
align 20h
; Function-local static variable
; const char _func___5312[19]
__func___5312 db 'byte_content_range',0
align 8
; Function-local static variable
; const char _func___5322[11]
__func___5322 db 'byte_range',0
align 10h
; Function-local static variable
; const char _func___5332[16]
__func___5332 db 'byte_range_resp',0
; Function-local static variable
; const char _func___5365[15]
__func___5365 db 'byte_range_set',0
align 10h
; Function-local static variable
; const char _func___5378[16]
__func___5378 db 'byte_range_spec',0
; Function-local static variable
; const char _func___5385[22]
__func___5385 db 'byte_ranges_specifier',0
align 8
; Function-local static variable
; const char _func___5391[11]
__func___5391 db 'bytes_unit',0
align 10h
; Function-local static variable
; const char _func___5401[16]
__func___5401 db 'complete_length',0
; Function-local static variable
; const char _func___5411[15]
__func___5411 db 'first_byte_pos',0
align 10h
; Function-local static variable
; const char _func___5421[14]
__func___5421 db 'last_byte_pos',0
align 20h
; Function-local static variable
; const char _func___5431[20]
__func___5431 db 'other_content_range',0
align 20h
; Function-local static variable
; const char _func___5441[17]
__func___5441 db 'other_range_resp',0
align 20h
; Function-local static variable
; const char _func___5451[16]
__func___5451 db 'other_range_set',0
; Function-local static variable
; const char _func___5457[17]
__func___5457 db 'other_range_unit',0
align 10h
; Function-local static variable
; const char _func___5463[23]
__func___5463 db 'other_ranges_specifier',0
align 8
; Function-local static variable
; const char _func___5470[11]
__func___5470 db 'range_unit',0
align 20h
; Function-local static variable
; const char _func___5478[23]
__func___5478 db 'suffix_byte_range_spec',0
align 8
; Function-local static variable
; const char _func___5488[14]
__func___5488 db 'suffix_length',0
align 10h
; Function-local static variable
; const char _func___5494[18]
__func___5494 db 'unsatisfied_range',0
; Function-local static variable
; const char _func___5502[4]
__func___5502 db 'Age',0
align 8
; Function-local static variable
; const char _func___5528[14]
__func___5528 db 'Cache_Control',0
align 8
; Function-local static variable
; const char _func___5534[8]
__func___5534 db 'Expires',0
; Function-local static variable
; const char _func___5560[7]
__func___5560 db 'Pragma',0
align 8
; Function-local static variable
; const char _func___5586[8]
__func___5586 db 'Warning',0
; Function-local static variable
; const char _func___5599[16]
__func___5599 db 'cache_directive',0
; Function-local static variable
; const char _func___5609[14]
__func___5609 db 'delta_seconds',0
align 10h
; Function-local static variable
; const char _func___5622[17]
__func___5622 db 'extension_pragma',0
align 10h
; Function-local static variable
; const char _func___5629[17]
__func___5629 db 'pragma_directive',0
align 8
; Function-local static variable
; const char _func___5643[11]
__func___5643 db 'warn_agent',0
align 8
; Function-local static variable
; const char _func___5654[10]
__func___5654 db 'warn_code',0
align 8
; Function-local static variable
; const char _func___5660[10]
__func___5660 db 'warn_date',0
align 8
; Function-local static variable
; const char _func___5666[10]
__func___5666 db 'warn_text',0
align 8
; Function-local static variable
; const char _func___5677[14]
__func___5677 db 'warning_value',0
align 20h
; Function-local static variable
; const char _func___5703[19]
__func___5703 db 'Proxy_Authenticate',0
align 20h
; Function-local static variable
; const char _func___5711[20]
__func___5711 db 'Proxy_Authorization',0
align 20h
; Function-local static variable
; const char _func___5736[17]
__func___5736 db 'WWW_Authenticate',0
align 8
; Function-local static variable
; const char _func___5744[11]
__func___5744 db 'auth_param',0
align 8
; Function-local static variable
; const char _func___5750[12]
__func___5750 db 'auth_scheme',0
align 8
; Function-local static variable
; const char _func___5787[10]
__func___5787 db 'challenge',0
align 8
; Function-local static variable
; const char _func___5823[12]
__func___5823 db 'credentials',0
align 8
; Function-local static variable
; const char _func___5829[14]
__func___5829 db 'Authorization',0
align 8
; Function-local static variable
; const char _func___5845[8]
__func___5845 db 'token68',0
; Function-local static variable
; const char _func___5851[18]
__func___5851 db 'Connection_header',0
align 10h
; Function-local static variable
; const char _func___5857[22]
__func___5857 db 'Content_Length_header',0
align 10h
; Function-local static variable
; const char _func___5863[20]
__func___5863 db 'Content_Type_header',0
align 8
; Function-local static variable
; const char _func___5869[15]
__func___5869 db 'Trailer_header',0
align 20h
; Function-local static variable
; const char _func___5875[25]
__func___5875 db 'Transfer_Encoding_header',0
align 20h
; Function-local static variable
; const char _func___5881[15]
__func___5881 db 'Upgrade_header',0
align 10h
; Function-local static variable
; const char _func___5887[11]
__func___5887 db 'Via_header',0
align 20h
; Function-local static variable
; const char _func___5893[11]
__func___5893 db 'Age_header',0
align 10h
; Function-local static variable
; const char _func___5899[15]
__func___5899 db 'Expires_header',0
align 20h
; Function-local static variable
; const char _func___5905[12]
__func___5905 db 'Date_header',0
align 10h
; Function-local static variable
; const char _func___5911[16]
__func___5911 db 'Location_header',0
; Function-local static variable
; const char _func___5917[19]
__func___5917 db 'Retry_After_header',0
align 8
; Function-local static variable
; const char _func___5923[12]
__func___5923 db 'Vary_header',0
align 8
; Function-local static variable
; const char _func___5929[15]
__func___5929 db 'Warning_header',0
align 20h
; Function-local static variable
; const char _func___5935[21]
__func___5935 db 'Cache_Control_header',0
align 8
; Function-local static variable
; const char _func___5941[14]
__func___5941 db 'Expect_header',0
align 8
; Function-local static variable
; const char _func___5947[12]
__func___5947 db 'Host_header',0
align 20h
; Function-local static variable
; const char _func___5953[20]
__func___5953 db 'Max_Forwards_header',0
align 8
; Function-local static variable
; const char _func___5959[14]
__func___5959 db 'Pragma_header',0
align 8
; Function-local static variable
; const char _func___5965[13]
__func___5965 db 'Range_header',0
align 8
; Function-local static variable
; const char _func___5971[10]
__func___5971 db 'TE_header',0
align 10h
; Function-local static variable
; const char _func___5977[16]
__func___5977 db 'If_Match_header',0
; Function-local static variable
; const char _func___5983[21]
__func___5983 db 'If_None_Match_header',0
align 20h
; Function-local static variable
; const char _func___5989[25]
__func___5989 db 'If_Modified_Since_header',0
align 20h
; Function-local static variable
; const char _func___5995[27]
__func___5995 db 'If_Unmodified_Since_header',0
align 20h
; Function-local static variable
; const char _func___6001[16]
__func___6001 db 'If_Range_header',0
; Function-local static variable
; const char _func___6007[14]
__func___6007 db 'Accept_header',0
align 20h
; Function-local static variable
; const char _func___6013[22]
__func___6013 db 'Accept_Charset_header',0
align 20h
; Function-local static variable
; const char _func___6019[23]
__func___6019 db 'Accept_Encoding_header',0
align 20h
; Function-local static variable
; const char _func___6025[23]
__func___6025 db 'Accept_Language_header',0
align 20h
; Function-local static variable
; const char _func___6031[21]
__func___6031 db 'Authorization_header',0
align 20h
; Function-local static variable
; const char _func___6037[27]
__func___6037 db 'Proxy_Authorization_header',0
align 20h
; Function-local static variable
; const char _func___6043[15]
__func___6043 db 'Referer_header',0
align 10h
; Function-local static variable
; const char _func___6049[18]
__func___6049 db 'User_Agent_header',0
align 8
; Function-local static variable
; const char _func___6059[12]
__func___6059 db 'cookie_pair',0
align 8
; Function-local static variable
; const char _func___6065[12]
__func___6065 db 'cookie_name',0
align 8
; Function-local static variable
; const char _func___6085[13]
__func___6085 db 'cookie_value',0
align 8
; Function-local static variable
; const char _func___6092[13]
__func___6092 db 'cookie_octet',0
align 8
; Function-local static variable
; const char _func___6100[14]
__func___6100 db 'Cookie_header',0
align 8
; Function-local static variable
; const char _func___6112[14]
__func___6112 db 'cookie_string',0
align 8
; Function-local static variable
; const char _func___6121[13]
__func___6121 db 'header_field',0
align 8
; const char aSocketCreation[]
aSocketCreation db 'socket creation failed',0Ah,0
; const char aSetsockoptFail[]
aSetsockoptFail db 'setsockopt failed',0Ah,0
; const char aBindFailed[]
aBindFailed db 'bind failed',0Ah,0
; const char aListenFailed[]
aListenFailed db 'listen failed',0Ah,0
aTransferCoding_0 db 'transfer_coding',0
; const char s2[]
s2 db 'chunked',0
aContentLength_1 db 'Content_Length',0
align 8
; const char format[]
format db '##### Warning !! Hey what did clien'
db 't %d expect ?? Is this just bullshi'
db 't ?',0Ah,0
align 8
; const char aWarningIReceiv[]
aWarningIReceiv db '##### Warning !! I received %d byte'
db 's from client %d when we expected %'
db 'd',0Ah,0
; const char aSocket_0[]
aSocket_0 db 'socket',0Ah,0
; const char aSelect_0[]
aSelect_0 db 'select',0
; const char aWarningTimeout[]
aWarningTimeout db '##### Warning Timeout reached for c'
db 'lient %d I am not sure this is HTTP'
db ' protocol !!',0Ah,0
align 8
; const char aWarningTimeout_0[]
aWarningTimeout_0 db '##### Warning Timeout reached for c'
db 'lient %d Closing connection !!',0Ah
db 0
_rodata ends


; Segment type: Pure data
; Segment permissions: Read
LOAD segment mempage public 'DATA' use64
assume cs:LOAD
;org 255CBh
align 10h
LOAD ends


; Segment type: Pure data
; Segment permissions: Read
_eh_frame segment qword public 'CONST' use64
assume cs:_eh_frame
;org 255D0h
db  14h
db    0
db    0
db    0
db    0
db    0
db    0
db    0
db    1
db  7Ah ; z
db  52h ; R
db    0
db    1
db  78h ; x
db  10h
db    1
db  1Bh
db  0Ch
db    7
db    8
db  90h
db    1
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0B0h
db 0FBh
db 0FDh
db 0FFh
db  66h ; f
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  61h ; a
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  3Ch ; <
db    0
db    0
db    0
db 0F6h
db 0FBh
db 0FDh
db 0FFh
db  4Ah ; J
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  45h ; E
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  5Ch ; \
db    0
db    0
db    0
db  20h
db 0FCh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  7Ch ; |
db    0
db    0
db    0
db  3Ch ; <
db 0FCh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  9Ch
db    0
db    0
db    0
db  58h ; X
db 0FCh
db 0FDh
db 0FFh
db  72h ; r
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  6Dh ; m
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0BCh
db    0
db    0
db    0
db 0AAh
db 0FCh
db 0FDh
db 0FFh
db  58h ; X
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  53h ; S
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0DCh
db    0
db    0
db    0
db 0E2h
db 0FCh
db 0FDh
db 0FFh
db  4Ah ; J
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  45h ; E
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0FCh
db    0
db    0
db    0
db  0Ch
db 0FDh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  1Ch
db    1
db    0
db    0
db  28h ; (
db 0FDh
db 0FDh
db 0FFh
db  82h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  7Dh ; }
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  3Ch ; <
db    1
db    0
db    0
db  8Ah
db 0FDh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  5Ch ; \
db    1
db    0
db    0
db 0A6h
db 0FDh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  7Ch ; |
db    1
db    0
db    0
db 0C2h
db 0FDh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  9Ch
db    1
db    0
db    0
db 0DEh
db 0FDh
db 0FDh
db 0FFh
db  3Ch ; <
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  77h ; w
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0BCh
db    1
db    0
db    0
db 0FAh
db 0FDh
db 0FDh
db 0FFh
db  4Ah ; J
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  45h ; E
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0DCh
db    1
db    0
db    0
db  24h ; $
db 0FEh
db 0FDh
db 0FFh
db  4Ah ; J
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  45h ; E
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0FCh
db    1
db    0
db    0
db  4Eh ; N
db 0FEh
db 0FDh
db 0FFh
db  60h ; `
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  5Bh ; [
db  0Ch
db    7
db    8
db    0
db    0
db  20h
db    0
db    0
db    0
db  1Ch
db    2
db    0
db    0
db  8Eh
db 0FEh
db 0FDh
db 0FFh
db 0F6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  45h ; E
db  83h
db    3
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  40h ; @
db    2
db    0
db    0
db  60h ; `
db 0FFh
db 0FDh
db 0FFh
db  94h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  45h ; E
db  83h
db    3
db    2
db  8Ah
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  64h ; d
db    2
db    0
db    0
db 0D0h
db 0FFh
db 0FDh
db 0FFh
db  76h ; v
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  71h ; q
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  84h
db    2
db    0
db    0
db  26h ; &
db    0
db 0FEh
db 0FFh
db  42h ; B
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  7Dh ; }
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db 0A4h
db    2
db    0
db    0
db  48h ; H
db    0
db 0FEh
db 0FFh
db  94h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  45h ; E
db  83h
db    3
db    2
db  8Ah
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    2
db    0
db    0
db 0B8h
db    0
db 0FEh
db 0FFh
db  78h ; x
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  73h ; s
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    2
db    0
db    0
db  10h
db    3
db 0FEh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    3
db    0
db    0
db  64h ; d
db    4
db 0FEh
db 0FFh
db 0D1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CCh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    3
db    0
db    0
db  15h
db    5
db 0FEh
db 0FFh
db 0A3h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  9Eh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    3
db    0
db    0
db  98h
db    6
db 0FEh
db 0FFh
db  44h ; D
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  3Fh ; ?
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    3
db    0
db    0
db 0BCh
db    8
db 0FEh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    3
db    0
db    0
db  10h
db  0Ah
db 0FEh
db 0FFh
db  3Eh ; >
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  39h ; 9
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    3
db    0
db    0
db  2Eh ; .
db  0Ch
db 0FEh
db 0FFh
db  44h ; D
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  3Fh ; ?
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    3
db    0
db    0
db  52h ; R
db  0Eh
db 0FEh
db 0FFh
db    0
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0FBh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    3
db    0
db    0
db  32h ; 2
db  10h
db 0FEh
db 0FFh
db    8
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    3
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    4
db    0
db    0
db  1Ah
db  11h
db 0FEh
db 0FFh
db 0DCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    4
db    0
db    0
db 0D6h
db  11h
db 0FEh
db 0FFh
db  8Dh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  88h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    4
db    0
db    0
db  43h ; C
db  13h
db 0FEh
db 0FFh
db  51h ; Q
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  4Ch ; L
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    4
db    0
db    0
db  74h ; t
db  15h
db 0FEh
db 0FFh
db 0E7h
db  17h
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0E2h
db  17h
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    4
db    0
db    0
db  3Bh ; ;
db  2Dh ; -
db 0FEh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    4
db    0
db    0
db  0Ch
db  2Eh ; .
db 0FEh
db 0FFh
db  83h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  7Eh ; ~
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    4
db    0
db    0
db  6Fh ; o
db  2Fh ; /
db 0FEh
db 0FFh
db  40h ; @
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  3Bh ; ;
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    4
db    0
db    0
db  8Fh
db  30h ; 0
db 0FEh
db 0FFh
db  45h ; E
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  40h ; @
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    5
db    0
db    0
db 0B4h
db  32h ; 2
db 0FEh
db 0FFh
db 0CDh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0C8h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    5
db    0
db    0
db  61h ; a
db  34h ; 4
db 0FEh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    5
db    0
db    0
db 0B5h
db  35h ; 5
db 0FEh
db 0FFh
db  85h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  80h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    5
db    0
db    0
db  1Ah
db  37h ; 7
db 0FEh
db 0FFh
db  5Ch ; \
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  57h ; W
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    5
db    0
db    0
db  56h ; V
db  39h ; 9
db 0FEh
db 0FFh
db  9Fh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  9Ah
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    5
db    0
db    0
db 0D5h
db  3Ah ; :
db 0FEh
db 0FFh
db  9Fh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  9Ah
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    5
db    0
db    0
db  54h ; T
db  3Ch ; <
db 0FEh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    5
db    0
db    0
db 0DAh
db  3Ch ; <
db 0FEh
db 0FFh
db 0E1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0DCh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    6
db    0
db    0
db  9Bh
db  3Dh ; =
db 0FEh
db 0FFh
db 0E0h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0DBh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    6
db    0
db    0
db  5Bh ; [
db  3Eh ; >
db 0FEh
db 0FFh
db 0FFh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0FAh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    6
db    0
db    0
db  3Ah ; :
db  40h ; @
db 0FEh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    6
db    0
db    0
db  8Eh
db  41h ; A
db 0FEh
db 0FFh
db 0C8h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0C3h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    6
db    0
db    0
db  36h ; 6
db  43h ; C
db 0FEh
db 0FFh
db 0C8h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0C3h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    6
db    0
db    0
db 0DEh
db  44h ; D
db 0FEh
db 0FFh
db 0CEh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C9h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    6
db    0
db    0
db  8Ch
db  45h ; E
db 0FEh
db 0FFh
db 0A0h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  9Bh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    6
db    0
db    0
db  0Ch
db  47h ; G
db 0FEh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    7
db    0
db    0
db 0C2h
db  47h ; G
db 0FEh
db 0FFh
db 0E0h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0DBh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    7
db    0
db    0
db  82h
db  49h ; I
db 0FEh
db 0FFh
db 0B8h
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0B3h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    7
db    0
db    0
db  1Ah
db  4Ch ; L
db 0FEh
db 0FFh
db 0FBh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0F6h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    7
db    0
db    0
db 0F5h
db  4Eh ; N
db 0FEh
db 0FFh
db 0CCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    7
db    0
db    0
db 0A1h
db  4Fh ; O
db 0FEh
db 0FFh
db    8
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    3
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    7
db    0
db    0
db  89h
db  50h ; P
db 0FEh
db 0FFh
db  0Ah
db    5
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    5
db    5
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    7
db    0
db    0
db  73h ; s
db  55h ; U
db 0FEh
db 0FFh
db 0C3h
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0BEh
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    7
db    0
db    0
db  16h
db  58h ; X
db 0FEh
db 0FFh
db  56h ; V
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  51h ; Q
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    8
db    0
db    0
db  4Ch ; L
db  5Ah ; Z
db 0FEh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    8
db    0
db    0
db  1Dh
db  5Bh ; [
db 0FEh
db 0FFh
db  70h ; p
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Bh ; k
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    8
db    0
db    0
db  6Dh ; m
db  5Ch ; \
db 0FEh
db 0FFh
db  10h
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  0Bh
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    8
db    0
db    0
db  5Dh ; ]
db  5Eh ; ^
db 0FEh
db 0FFh
db  76h ; v
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  71h ; q
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    8
db    0
db    0
db 0B3h
db  60h ; `
db 0FEh
db 0FFh
db  83h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  7Eh ; ~
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    8
db    0
db    0
db  16h
db  62h ; b
db 0FEh
db 0FFh
db  76h ; v
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  71h ; q
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    8
db    0
db    0
db  6Ch ; l
db  64h ; d
db 0FEh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    8
db    0
db    0
db  22h ; "
db  65h ; e
db 0FEh
db 0FFh
db  22h ; "
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  1Dh
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db    9
db    0
db    0
db  24h ; $
db  69h ; i
db 0FEh
db 0FFh
db  5Eh ; ^
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  59h ; Y
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db    9
db    0
db    0
db  62h ; b
db  6Bh ; k
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db    9
db    0
db    0
db 0E6h
db  6Bh ; k
db 0FEh
db 0FFh
db  6Eh ; n
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  69h ; i
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db    9
db    0
db    0
db  34h ; 4
db  6Fh ; o
db 0FEh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db    9
db    0
db    0
db 0EFh
db  6Fh ; o
db 0FEh
db 0FFh
db 0AFh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0AAh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db    9
db    0
db    0
db  7Eh ; ~
db  71h ; q
db 0FEh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db    9
db    0
db    0
db    4
db  72h ; r
db 0FEh
db 0FFh
db 0FDh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0F8h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db    9
db    0
db    0
db 0E1h
db  72h ; r
db 0FEh
db 0FFh
db  6Fh ; o
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Ah ; j
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Ah
db    0
db    0
db  30h ; 0
db  74h ; t
db 0FEh
db 0FFh
db  90h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  8Bh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Ah
db    0
db    0
db 0A0h
db  75h ; u
db 0FEh
db 0FFh
db  8Fh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  8Ah
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Ah
db    0
db    0
db  0Fh
db  77h ; w
db 0FEh
db 0FFh
db 0BEh
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0B9h
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Ah
db    0
db    0
db 0ADh
db  7Ah ; z
db 0FEh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Ah
db    0
db    0
db 0ECh
db  7Dh ; }
db 0FEh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Ah
db    0
db    0
db  2Bh ; +
db  81h
db 0FEh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Ah
db    0
db    0
db  6Ah ; j
db  84h
db 0FEh
db 0FFh
db  68h ; h
db    6
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  63h ; c
db    6
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Ah
db    0
db    0
db 0B2h
db  8Ah
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Bh
db    0
db    0
db  31h ; 1
db  8Bh
db 0FEh
db 0FFh
db  7Fh ; 
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  7Ah ; z
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Bh
db    0
db    0
db  90h
db  8Ch
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Bh
db    0
db    0
db  14h
db  8Dh
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Bh
db    0
db    0
db  93h
db  8Dh
db 0FEh
db 0FFh
db  9Eh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  99h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Bh
db    0
db    0
db  11h
db  8Fh
db 0FEh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Bh
db    0
db    0
db 0CCh
db  8Fh
db 0FEh
db 0FFh
db  59h ; Y
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  54h ; T
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Bh
db    0
db    0
db    5
db  92h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Bh
db    0
db    0
db  89h
db  92h
db 0FEh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Ch
db    0
db    0
db  3Fh ; ?
db  93h
db 0FEh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Ch
db    0
db    0
db 0FAh
db  93h
db 0FEh
db 0FFh
db  25h ; %
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  20h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Ch
db    0
db    0
db 0FFh
db  94h
db 0FEh
db 0FFh
db 0FCh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0F7h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Ch
db    0
db    0
db 0DBh
db  96h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Ch
db    0
db    0
db  5Fh ; _
db  97h
db 0FEh
db 0FFh
db 0AFh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0AAh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Ch
db    0
db    0
db 0EEh
db  98h
db 0FEh
db 0FFh
db 0FEh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0F9h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Ch
db    0
db    0
db 0CCh
db  99h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Ch
db    0
db    0
db  50h ; P
db  9Ah
db 0FEh
db 0FFh
db  95h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  90h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Dh
db    0
db    0
db 0C5h
db  9Bh
db 0FEh
db 0FFh
db 0D1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CCh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Dh
db    0
db    0
db  76h ; v
db  9Ch
db 0FEh
db 0FFh
db  66h ; f
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  61h ; a
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Dh
db    0
db    0
db 0BCh
db  9Eh
db 0FEh
db 0FFh
db  66h ; f
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  61h ; a
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Dh
db    0
db    0
db    2
db 0A1h
db 0FEh
db 0FFh
db 0A6h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0A1h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Dh
db    0
db    0
db  88h
db 0A2h
db 0FEh
db 0FFh
db 0DCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Dh
db    0
db    0
db  44h ; D
db 0A3h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Dh
db    0
db    0
db 0C8h
db 0A3h
db 0FEh
db 0FFh
db 0A4h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  9Fh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Dh
db    0
db    0
db  4Ch ; L
db 0A5h
db 0FEh
db 0FFh
db 0A9h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A4h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Eh
db    0
db    0
db 0D5h
db 0A5h
db 0FEh
db 0FFh
db  6Ah ; j
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  65h ; e
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Eh
db    0
db    0
db  1Fh
db 0A7h
db 0FEh
db 0FFh
db  6Ah ; j
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  65h ; e
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Eh
db    0
db    0
db  69h ; i
db 0A8h
db 0FEh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Eh
db    0
db    0
db 0BDh
db 0A9h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Eh
db    0
db    0
db  41h ; A
db 0AAh
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Eh
db    0
db    0
db 0C5h
db 0AAh
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Eh
db    0
db    0
db  49h ; I
db 0ABh
db 0FEh
db 0FFh
db 0A5h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0A0h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Eh
db    0
db    0
db 0CEh
db 0ACh
db 0FEh
db 0FFh
db 0CBh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0C6h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  0Fh
db    0
db    0
db  79h ; y
db 0AEh
db 0FEh
db 0FFh
db 0BAh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0B5h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  0Fh
db    0
db    0
db  13h
db 0B0h
db 0FEh
db 0FFh
db  35h ; 5
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  30h ; 0
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  0Fh
db    0
db    0
db  28h ; (
db 0B4h
db 0FEh
db 0FFh
db 0ECh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0E7h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  0Fh
db    0
db    0
db 0F4h
db 0B5h
db 0FEh
db 0FFh
db  23h ; #
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  1Eh
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  0Fh
db    0
db    0
db 0F7h
db 0B7h
db 0FEh
db 0FFh
db  6Ah ; j
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  65h ; e
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  0Fh
db    0
db    0
db  41h ; A
db 0B9h
db 0FEh
db 0FFh
db  0Dh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    8
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  0Fh
db    0
db    0
db  2Eh ; .
db 0BAh
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  0Fh
db    0
db    0
db 0ADh
db 0BAh
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  10h
db    0
db    0
db  2Ch ; ,
db 0BBh
db 0FEh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  10h
db    0
db    0
db 0FDh
db 0BBh
db 0FEh
db 0FFh
db    8
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    3
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  10h
db    0
db    0
db 0E5h
db 0BCh
db 0FEh
db 0FFh
db  19h
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  14h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  10h
db    0
db    0
db 0DEh
db 0BEh
db 0FEh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  10h
db    0
db    0
db 0BDh
db 0BFh
db 0FEh
db 0FFh
db 0F2h
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0EDh
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  10h
db    0
db    0
db  8Fh
db 0C3h
db 0FEh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  10h
db    0
db    0
db  4Ah ; J
db 0C4h
db 0FEh
db 0FFh
db  17h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  12h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  10h
db    0
db    0
db  41h ; A
db 0C5h
db 0FEh
db 0FFh
db 0BDh
db    5
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0B8h
db    5
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  11h
db    0
db    0
db 0DEh
db 0CAh
db 0FEh
db 0FFh
db  80h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  7Bh ; {
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  11h
db    0
db    0
db  3Eh ; >
db 0CCh
db 0FEh
db 0FFh
db  7Ch ; |
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  77h ; w
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  11h
db    0
db    0
db  9Ah
db 0CDh
db 0FEh
db 0FFh
db 0C4h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0BFh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  11h
db    0
db    0
db  3Eh ; >
db 0CFh
db 0FEh
db 0FFh
db 0A8h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0A3h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  11h
db    0
db    0
db 0C6h
db 0D0h
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  11h
db    0
db    0
db  45h ; E
db 0D1h
db 0FEh
db 0FFh
db  47h ; G
db    6
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  42h ; B
db    6
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  11h
db    0
db    0
db  6Ch ; l
db 0D7h
db 0FEh
db 0FFh
db  8Eh
db    8
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  89h
db    8
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  11h
db    0
db    0
db 0DAh
db 0DFh
db 0FEh
db 0FFh
db  47h ; G
db    6
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  42h ; B
db    6
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  12h
db    0
db    0
db    1
db 0E6h
db 0FEh
db 0FFh
db 0D6h
db    5
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0D1h
db    5
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  12h
db    0
db    0
db 0B7h
db 0EBh
db 0FEh
db 0FFh
db 0B4h
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0AFh
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  12h
db    0
db    0
db  4Bh ; K
db 0EFh
db 0FEh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  12h
db    0
db    0
db  8Ah
db 0F2h
db 0FEh
db 0FFh
db  55h ; U
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  50h ; P
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  12h
db    0
db    0
db 0BFh
db 0F5h
db 0FEh
db 0FFh
db 0CCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  12h
db    0
db    0
db  6Bh ; k
db 0F6h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  12h
db    0
db    0
db 0EFh
db 0F6h
db 0FEh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  12h
db    0
db    0
db  73h ; s
db 0F7h
db 0FEh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  13h
db    0
db    0
db 0F9h
db 0F7h
db 0FEh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  13h
db    0
db    0
db  7Fh ; 
db 0F8h
db 0FEh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  13h
db    0
db    0
db  35h ; 5
db 0F9h
db 0FEh
db 0FFh
db  46h ; F
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  41h ; A
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  13h
db    0
db    0
db  5Bh ; [
db 0FAh
db 0FEh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  13h
db    0
db    0
db 0DAh
db 0FAh
db 0FEh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  13h
db    0
db    0
db  95h
db 0FBh
db 0FEh
db 0FFh
db 0CCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  13h
db    0
db    0
db  41h ; A
db 0FCh
db 0FEh
db 0FFh
db 0D1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CCh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  13h
db    0
db    0
db 0F2h
db 0FCh
db 0FEh
db 0FFh
db  4Bh ; K
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  46h ; F
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  14h
db    0
db    0
db  1Dh
db 0FFh
db 0FEh
db 0FFh
db  4Bh ; K
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  46h ; F
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  14h
db    0
db    0
db  48h ; H
db    1
db 0FFh
db 0FFh
db  12h
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  0Dh
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  14h
db    0
db    0
db  3Ah ; :
db    5
db 0FFh
db 0FFh
db  62h ; b
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Dh ; ]
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  14h
db    0
db    0
db  7Ch ; |
db    7
db 0FFh
db 0FFh
db 0F6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0F1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  14h
db    0
db    0
db  52h ; R
db    8
db 0FFh
db 0FFh
db  31h ; 1
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  2Ch ; ,
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  14h
db    0
db    0
db  63h ; c
db    9
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  14h
db    0
db    0
db 0E2h
db    9
db 0FFh
db 0FFh
db  0Ah
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    5
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  14h
db    0
db    0
db 0CCh
db  0Ah
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  15h
db    0
db    0
db  4Bh ; K
db  0Bh
db 0FFh
db 0FFh
db    2
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FDh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  15h
db    0
db    0
db  2Dh ; -
db  0Ch
db 0FFh
db 0FFh
db  59h ; Y
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  54h ; T
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  15h
db    0
db    0
db  66h ; f
db  0Dh
db 0FFh
db 0FFh
db  70h ; p
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Bh ; k
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  15h
db    0
db    0
db 0B6h
db  0Fh
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  15h
db    0
db    0
db  87h
db  10h
db 0FFh
db 0FFh
db 0EEh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0E9h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  15h
db    0
db    0
db  55h ; U
db  12h
db 0FFh
db 0FFh
db 0EEh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0E9h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  15h
db    0
db    0
db  23h ; #
db  14h
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  15h
db    0
db    0
db 0DEh
db  14h
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  16h
db    0
db    0
db 0AFh
db  15h
db 0FFh
db 0FFh
db  14h
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  0Fh
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  16h
db    0
db    0
db 0A3h
db  19h
db 0FFh
db 0FFh
db 0FDh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0F8h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  16h
db    0
db    0
db  80h
db  1Bh
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  16h
db    0
db    0
db  51h ; Q
db  1Ch
db 0FFh
db 0FFh
db    6
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    1
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  16h
db    0
db    0
db  37h ; 7
db  1Fh
db 0FFh
db 0FFh
db 0D1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CCh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  16h
db    0
db    0
db 0E8h
db  1Fh
db 0FFh
db 0FFh
db  7Eh ; ~
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  79h ; y
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  16h
db    0
db    0
db  46h ; F
db  21h ; !
db 0FFh
db 0FFh
db  7Eh ; ~
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  79h ; y
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  16h
db    0
db    0
db 0A4h
db  22h ; "
db 0FFh
db 0FFh
db  6Fh ; o
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Ah ; j
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  17h
db    0
db    0
db 0F3h
db  23h ; #
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  17h
db    0
db    0
db  72h ; r
db  24h ; $
db 0FFh
db 0FFh
db  35h ; 5
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  30h ; 0
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  17h
db    0
db    0
db  87h
db  28h ; (
db 0FFh
db 0FFh
db  3Ch ; <
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  37h ; 7
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  17h
db    0
db    0
db 0A3h
db  29h ; )
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  17h
db    0
db    0
db  74h ; t
db  2Ah ; *
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  17h
db    0
db    0
db 0F3h
db  2Ah ; *
db 0FFh
db 0FFh
db 0FDh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0F8h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  17h
db    0
db    0
db 0D0h
db  2Bh ; +
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  17h
db    0
db    0
db  4Fh ; O
db  2Ch ; ,
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  18h
db    0
db    0
db  2Eh ; .
db  2Dh ; -
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  18h
db    0
db    0
db 0FFh
db  2Dh ; -
db 0FFh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  18h
db    0
db    0
db  83h
db  2Eh ; .
db 0FFh
db 0FFh
db  1Ch
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  17h
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  18h
db    0
db    0
db  7Fh ; 
db  32h ; 2
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  18h
db    0
db    0
db 0FEh
db  32h ; 2
db 0FFh
db 0FFh
db  1Ch
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  17h
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  18h
db    0
db    0
db 0FAh
db  36h ; 6
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  18h
db    0
db    0
db  79h ; y
db  37h ; 7
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  18h
db    0
db    0
db 0F8h
db  37h ; 7
db 0FFh
db 0FFh
db  5Ah ; Z
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  55h ; U
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  19h
db    0
db    0
db  32h ; 2
db  39h ; 9
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  19h
db    0
db    0
db 0EDh
db  39h ; 9
db 0FFh
db 0FFh
db    6
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    1
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  19h
db    0
db    0
db 0D3h
db  3Ah ; :
db 0FFh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  19h
db    0
db    0
db  59h ; Y
db  3Bh ; ;
db 0FFh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  19h
db    0
db    0
db 0DDh
db  3Bh ; ;
db 0FFh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  19h
db    0
db    0
db  93h
db  3Ch ; <
db 0FFh
db 0FFh
db 0CCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  19h
db    0
db    0
db  3Fh ; ?
db  3Dh ; =
db 0FFh
db 0FFh
db 0D6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  19h
db    0
db    0
db 0F5h
db  3Dh ; =
db 0FFh
db 0FFh
db  1Ah
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  15h
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Ah
db    0
db    0
db 0EFh
db  41h ; A
db 0FFh
db 0FFh
db  88h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  83h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Ah
db    0
db    0
db  57h ; W
db  43h ; C
db 0FFh
db 0FFh
db 0D8h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D3h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Ah
db    0
db    0
db  0Fh
db  44h ; D
db 0FFh
db 0FFh
db  88h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  83h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Ah
db    0
db    0
db  77h ; w
db  45h ; E
db 0FFh
db 0FFh
db 0CDh
db    4
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0C8h
db    4
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Ah
db    0
db    0
db  24h ; $
db  4Ah ; J
db 0FFh
db 0FFh
db  74h ; t
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  6Fh ; o
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Ah
db    0
db    0
db  78h ; x
db  4Bh ; K
db 0FFh
db 0FFh
db 0D3h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CEh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Ah
db    0
db    0
db  2Bh ; +
db  4Ch ; L
db 0FFh
db 0FFh
db 0A6h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0A1h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Ah
db    0
db    0
db 0B1h
db  4Ch ; L
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Bh
db    0
db    0
db  6Ch ; l
db  4Dh ; M
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Bh
db    0
db    0
db  27h ; '
db  4Eh ; N
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Bh
db    0
db    0
db 0E2h
db  4Eh ; N
db 0FFh
db 0FFh
db 0D3h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CEh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Bh
db    0
db    0
db  95h
db  4Fh ; O
db 0FFh
db 0FFh
db 0DCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Bh
db    0
db    0
db  51h ; Q
db  50h ; P
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Bh
db    0
db    0
db  0Ch
db  51h ; Q
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Bh
db    0
db    0
db  8Bh
db  51h ; Q
db 0FFh
db 0FFh
db 0CEh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C9h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Bh
db    0
db    0
db  39h ; 9
db  52h ; R
db 0FFh
db 0FFh
db 0CCh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C7h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Ch
db    0
db    0
db 0E5h
db  52h ; R
db 0FFh
db 0FFh
db 0BEh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0B9h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Ch
db    0
db    0
db  83h
db  53h ; S
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Ch
db    0
db    0
db  3Eh ; >
db  54h ; T
db 0FFh
db 0FFh
db 0BBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0B6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Ch
db    0
db    0
db 0D9h
db  54h ; T
db 0FFh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Ch
db    0
db    0
db  5Dh ; ]
db  55h ; U
db 0FFh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Ch
db    0
db    0
db  9Ch
db  58h ; X
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Ch
db    0
db    0
db  1Bh
db  59h ; Y
db 0FFh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Ch
db    0
db    0
db  5Ah ; Z
db  5Ch ; \
db 0FFh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Dh
db    0
db    0
db  99h
db  5Fh ; _
db 0FFh
db 0FFh
db  1Eh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  19h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Dh
db    0
db    0
db  97h
db  61h ; a
db 0FFh
db 0FFh
db 0DBh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D6h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Dh
db    0
db    0
db  52h ; R
db  62h ; b
db 0FFh
db 0FFh
db  1Eh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  19h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Dh
db    0
db    0
db  50h ; P
db  64h ; d
db 0FFh
db 0FFh
db 0D3h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0CEh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Dh
db    0
db    0
db    3
db  65h ; e
db 0FFh
db 0FFh
db  1Eh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  19h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Dh
db    0
db    0
db    1
db  67h ; g
db 0FFh
db 0FFh
db 0F1h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0ECh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Dh
db    0
db    0
db 0D2h
db  67h ; g
db 0FFh
db 0FFh
db 0C9h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0C4h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Dh
db    0
db    0
db  7Bh ; {
db  68h ; h
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Eh
db    0
db    0
db 0FAh
db  68h ; h
db 0FFh
db 0FFh
db 0B9h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0B4h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Eh
db    0
db    0
db  93h
db  6Ah ; j
db 0FFh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Eh
db    0
db    0
db 0D2h
db  6Dh ; m
db 0FFh
db 0FFh
db 0A4h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Fh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Eh
db    0
db    0
db  56h ; V
db  6Eh ; n
db 0FFh
db 0FFh
db  5Fh ; _
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  5Ah ; Z
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Eh
db    0
db    0
db  95h
db  71h ; q
db 0FFh
db 0FFh
db 0A8h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0A3h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Eh
db    0
db    0
db  1Dh
db  73h ; s
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Eh
db    0
db    0
db  9Ch
db  73h ; s
db 0FFh
db 0FFh
db  77h ; w
db    5
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  72h ; r
db    5
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Eh
db    0
db    0
db 0F3h
db  78h ; x
db 0FFh
db 0FFh
db  77h ; w
db    5
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  72h ; r
db    5
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  1Fh
db    0
db    0
db  4Ah ; J
db  7Eh ; ~
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  1Fh
db    0
db    0
db 0C9h
db  7Eh ; ~
db 0FFh
db 0FFh
db  18h
db    3
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  13h
db    3
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  1Fh
db    0
db    0
db 0C1h
db  81h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  1Fh
db    0
db    0
db 0A0h
db  82h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  1Fh
db    0
db    0
db  7Fh ; 
db  83h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  1Fh
db    0
db    0
db  5Eh ; ^
db  84h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  1Fh
db    0
db    0
db  3Dh ; =
db  85h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  1Fh
db    0
db    0
db  1Ch
db  86h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  20h
db    0
db    0
db 0FBh
db  86h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  20h
db    0
db    0
db 0DAh
db  87h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  20h
db    0
db    0
db 0B9h
db  88h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  20h
db    0
db    0
db  98h
db  89h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  20h
db    0
db    0
db  77h ; w
db  8Ah
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  20h
db    0
db    0
db  56h ; V
db  8Bh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  20h
db    0
db    0
db  35h ; 5
db  8Ch
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  20h
db    0
db    0
db  14h
db  8Dh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  21h ; !
db    0
db    0
db 0F3h
db  8Dh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  21h ; !
db    0
db    0
db 0D2h
db  8Eh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  21h ; !
db    0
db    0
db 0B1h
db  8Fh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  21h ; !
db    0
db    0
db  90h
db  90h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  21h ; !
db    0
db    0
db  6Fh ; o
db  91h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  21h ; !
db    0
db    0
db  4Eh ; N
db  92h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  21h ; !
db    0
db    0
db  2Dh ; -
db  93h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  21h ; !
db    0
db    0
db  0Ch
db  94h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  22h ; "
db    0
db    0
db 0EBh
db  94h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  22h ; "
db    0
db    0
db 0CAh
db  95h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  22h ; "
db    0
db    0
db 0A9h
db  96h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  22h ; "
db    0
db    0
db  88h
db  97h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  22h ; "
db    0
db    0
db  67h ; g
db  98h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  22h ; "
db    0
db    0
db  46h ; F
db  99h
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  22h ; "
db    0
db    0
db  25h ; %
db  9Ah
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  22h ; "
db    0
db    0
db    4
db  9Bh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  23h ; #
db    0
db    0
db 0E3h
db  9Bh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  23h ; #
db    0
db    0
db 0C2h
db  9Ch
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  48h ; H
db  23h ; #
db    0
db    0
db 0A1h
db  9Dh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  68h ; h
db  23h ; #
db    0
db    0
db  80h
db  9Eh
db 0FFh
db 0FFh
db 0FFh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0FAh
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  88h
db  23h ; #
db    0
db    0
db  5Fh ; _
db  9Fh
db 0FFh
db 0FFh
db 0D8h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D3h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0A8h
db  23h ; #
db    0
db    0
db  17h
db 0A0h
db 0FFh
db 0FFh
db  9Fh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  9Ah
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0C8h
db  23h ; #
db    0
db    0
db  96h
db 0A0h
db 0FFh
db 0FFh
db 0FFh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0FAh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0E8h
db  23h ; #
db    0
db    0
db  75h ; u
db 0A2h
db 0FFh
db 0FFh
db  8Ah
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  85h
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db    8
db  24h ; $
db    0
db    0
db 0DFh
db 0A3h
db 0FFh
db 0FFh
db 0EAh
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0E5h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  28h ; (
db  24h ; $
db    0
db    0
db 0A9h
db 0A4h
db 0FFh
db 0FFh
db 0AAh
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0A5h
db    1
db  0Ch
db    7
db    8
db    0
db  20h
db    0
db    0
db    0
db  48h ; H
db  24h ; $
db    0
db    0
db  33h ; 3
db 0A6h
db 0FFh
db 0FFh
db 0E1h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0DCh
db    1
db  0Ch
db    7
db    8
db    0
db    0
db    0
db    0
db    0
db  24h ; $
db    0
db    0
db    0
db  6Ch ; l
db  24h ; $
db    0
db    0
db 0C0h
db 0D5h
db 0FDh
db 0FFh
db 0A0h
db    1
db    0
db    0
db    0
db  0Eh
db  10h
db  46h ; F
db  0Eh
db  18h
db  4Ah ; J
db  0Fh
db  0Bh
db  77h ; w
db    8
db  80h
db    0
db  3Fh ; ?
db  1Ah
db  3Bh ; ;
db  2Ah ; *
db  33h ; 3
db  24h ; $
db  22h ; "
db    0
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  94h
db  24h ; $
db    0
db    0
db 0C8h
db 0A7h
db 0FFh
db 0FFh
db  99h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  94h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0B4h
db  24h ; $
db    0
db    0
db  41h ; A
db 0A8h
db 0FFh
db 0FFh
db  75h ; u
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  70h ; p
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0D4h
db  24h ; $
db    0
db    0
db  96h
db 0A8h
db 0FFh
db 0FFh
db 0D9h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db 0D4h
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0F4h
db  24h ; $
db    0
db    0
db  4Fh ; O
db 0A9h
db 0FFh
db 0FFh
db    6
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db    1
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  14h
db  25h ; %
db    0
db    0
db  35h ; 5
db 0AAh
db 0FFh
db 0FFh
db  74h ; t
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  6Fh ; o
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  34h ; 4
db  25h ; %
db    0
db    0
db  89h
db 0AAh
db 0FFh
db 0FFh
db  42h ; B
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  3Dh ; =
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  54h ; T
db  25h ; %
db    0
db    0
db 0ABh
db 0ABh
db 0FFh
db 0FFh
db 0D1h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0CCh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  74h ; t
db  25h ; %
db    0
db    0
db  5Ch ; \
db 0ADh
db 0FFh
db 0FFh
db 0FDh
db    2
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0F8h
db    2
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  94h
db  25h ; %
db    0
db    0
db  39h ; 9
db 0B0h
db 0FFh
db 0FFh
db  58h ; X
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  53h ; S
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0B4h
db  25h ; %
db    0
db    0
db  71h ; q
db 0B1h
db 0FFh
db 0FFh
db  56h ; V
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  51h ; Q
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db 0D4h
db  25h ; %
db    0
db    0
db 0A7h
db 0B2h
db 0FFh
db 0FFh
db  81h
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    2
db  7Ch ; |
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db 0F4h
db  25h ; %
db    0
db    0
db    8
db 0B3h
db 0FFh
db 0FFh
db  24h ; $
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  5Fh ; _
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  20h
db    0
db    0
db    0
db  14h
db  26h ; &
db    0
db    0
db  0Ch
db 0B3h
db 0FFh
db 0FFh
db  31h ; 1
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  45h ; E
db  83h
db    3
db    3
db  27h ; '
db    1
db  0Ch
db    7
db    8
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  38h ; 8
db  26h ; &
db    0
db    0
db  19h
db 0B4h
db 0FFh
db 0FFh
db  3Dh ; =
db    0
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db  78h ; x
db  0Ch
db    7
db    8
db    0
db    0
db    0
db  1Ch
db    0
db    0
db    0
db  58h ; X
db  26h ; &
db    0
db    0
db  36h ; 6
db 0B4h
db 0FFh
db 0FFh
db  14h
db    1
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db  0Fh
db    1
db  0Ch
db    7
db    8
db    0
db  1Ch
db    0
db    0
db    0
db  78h ; x
db  26h ; &
db    0
db    0
db  2Ah ; *
db 0B5h
db 0FFh
db 0FFh
db 0F0h
db    7
db    0
db    0
db    0
db  41h ; A
db  0Eh
db  10h
db  86h
db    2
db  43h ; C
db  0Dh
db    6
db    3
db 0EBh
db    7
db  0Ch
db    7
db    8
db    0
_eh_frame ends

; ELF Dynamic Information

; Segment type: Pure data
; Segment permissions: Read/Write
LOAD segment mempage public 'DATA' use64
assume cs:LOAD
;org 28EF0h
_DYNAMIC Elf64_Dyn <0Eh, 0DB4h> ; DT_SONAME librequest.so
Elf64_Dyn <4, 1C8h>     ; DT_HASH
Elf64_Dyn <6FFFFEF5h, 0B08h> ; DT_GNU_HASH
Elf64_Dyn <5, 3378h>    ; DT_STRTAB
Elf64_Dyn <6, 14E8h>    ; DT_SYMTAB
Elf64_Dyn <0Ah, 0DC2h>  ; DT_STRSZ
Elf64_Dyn <0Bh, 18h>    ; DT_SYMENT
Elf64_Dyn <3, 29000h>   ; DT_PLTGOT
Elf64_Dyn <2, 258h>     ; DT_PLTRELSZ
Elf64_Dyn <14h, 7>      ; DT_PLTREL
Elf64_Dyn <17h, 4140h>  ; DT_JMPREL
Elf64_Dyn <0>           ; DT_NULL
align 80h
LOAD ends


; Segment type: Pure data
; Segment permissions: Read/Write
_got_plt segment qword public 'DATA' use64
assume cs:_got_plt
;org 29000h
_GLOBAL_OFFSET_TABLE_ dq offset _DYNAMIC
qword_29008 dq 0
qword_29010 dq 0
printf_ptr dq offset printf
memcpy_ptr dq offset memcpy
perror_ptr dq offset perror
malloc_ptr dq offset malloc
socket_ptr dq offset socket
select_ptr dq offset select
accept_ptr dq offset accept
write_ptr dq offset write
bind_ptr dq offset bind
setsockopt_ptr dq offset setsockopt
read_ptr dq offset read
strncmp_ptr dq offset strncmp
realloc_ptr dq offset realloc
listen_ptr dq offset listen
memset_ptr dq offset memset
time_ptr dq offset time
strcmp_ptr dq offset strcmp
shutdown_ptr dq offset shutdown
htons_ptr dq offset htons
exit_ptr dq offset exit
atoi_ptr dq offset atoi
strlen_ptr dq offset strlen
strchr_ptr dq offset strchr
close_ptr dq offset close
free_ptr dq offset free
_got_plt ends


; Segment type: Uninitialized
; Segment permissions: Read/Write
_bss segment align_32 public 'BSS' use64
assume cs:_bss
;org 290E0h
assume es:nothing, ss:nothing, ds:LOAD, fs:nothing, gs:nothing
; client clients[10]
clients client 0Ah dup(<?>)
; int priSocket
priSocket dd ?
align 8
_bss ends


; Segment type: Externs
; extern
; int printf(const char *format, ...)
extrn printf:near
; void *memcpy(void *dest, const void *src, size_t n)
extrn memcpy:near
; void perror(const char *s)
extrn perror:near
; void *malloc(size_t size)
extrn malloc:near
; int socket(int domain, int type, int protocol)
extrn socket:near
; int select(int nfds, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)
extrn select:near
; int accept(int fd, struct sockaddr *addr, socklen_t *addr_len)
extrn accept:near
; ssize_t write(int fd, const void *buf, size_t n)
extrn write:near
; int bind(int fd, const struct sockaddr *addr, socklen_t len)
extrn bind:near
; int setsockopt(int fd, int level, int optname, const void *optval, socklen_t optlen)
extrn setsockopt:near
; ssize_t read(int fd, void *buf, size_t nbytes)
extrn read:near
; int strncmp(const char *s1, const char *s2, size_t n)
extrn strncmp:near
; void *realloc(void *ptr, size_t size)
extrn realloc:near
; int listen(int fd, int n)
extrn listen:near
; void *memset(void *s, int c, size_t n)
extrn memset:near
; time_t time(time_t *timer)
extrn time:near
; int strcmp(const char *s1, const char *s2)
extrn strcmp:near
; int shutdown(int fd, int how)
extrn shutdown:near
; uint16_t htons(uint16_t hostshort)
extrn htons:near
; void __noreturn exit(int status)
extrn exit:near
; int atoi(const char *nptr)
extrn atoi:near
; size_t strlen(const char *s)
extrn strlen:near
; char *strchr(const char *s, int c)
extrn strchr:near
; int close(int fd)
extrn close:near
; void free(void *ptr)
extrn free:near


end __alpha
